#!/usr/bin/env perl
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-

# Time configurator. Designed to be architecture- and distribution independent.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Chema Celorio <chema@ximian.com>
#          Arturo Espinosa <arturo@ximian.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Best viewed with 100 columns of width.


BEGIN {
require "___scriptsdir___/general.pl";
require "___scriptsdir___/platform.pl";
require "___scriptsdir___/util.pl";
require "___scriptsdir___/file.pl";
require "___scriptsdir___/xml.pl";
require "___scriptsdir___/service.pl";
require "___scriptsdir___/parse.pl";
require "___scriptsdir___/replace.pl";
require "___scriptsdir___/network.pl";
}


# --- Tool information --- #

$name = "internetsharing";
$version = "___version___";
@platforms = ("redhat-7.1", "redhat-7.0", "mandrake-7.2");

$description =<<"end_of_description;";
       Sets up firewall rules for a basic internet sharing (masq)
       network.
end_of_description;


# --- XML parsing --- #

# Scan XML from standard input to an internal tree.

sub xml_parse
{
  my ($tree, %hash, $elem);
  
  # Scan XML to tree.

  $tree = &xst_xml_scan ();

  # Walk the tree recursively and extract configuration parameters.
  # This is the top level - find and enter the "networking" tag.

  while ($elem = shift @$tree)
  {
    if   ($elem eq "internetsharing") { &xml_parse_internetsharing (shift @$tree, \%hash); }
    else { &xst_report ("xml_unexp_tag", $elem); shift @$tree; }
  }

  return (\%hash);
}


sub xml_parse_internetsharing
{
  my ($tree, $hash) = @_;
  my ($elem, %interface);
  
  shift @$tree;  # Skip attributes.
  
  while ($elem = shift @$tree)
  {
      if    ($elem eq "fwrules")   { $$hash{"fwrules"} = &xml_parse_fwrules (shift @$tree);        }
      elsif ($elem eq "dhcp")      { $$hash{"dhcp"}    = &xml_parse_dhcp    (shift @$tree);        }
      elsif ($elem eq "interface") { &xst_network_xml_parse_interface (shift @$tree, \%interface); }
      else  { &xst_report ("xml_unexp_tag", $elem); shift @$tree; }
  }
  
  $$hash{"interface"} = \%interface unless scalar keys %interface == 0;
}


sub xml_parse_fwrules
{
  my ($tree) = @_;
  my ($elem, $hash, $landevs);

  $hash = {};
  $landevs = [];
  shift @$tree;  # Skip attributes.

  while ($elem = shift @$tree)
  {
      if    ($elem eq "tools")        { $$hash{"tools"}        = &xst_xml_get_pcdata (shift @$tree); }
      elsif ($elem eq "configured")   { $$hash{"configured"}   = &xst_xml_get_pcdata (shift @$tree); }
      elsif ($elem eq "forwarding")   { $$hash{"forwarding"}   = &xst_xml_get_pcdata (shift @$tree); }
      elsif ($elem eq "masquerading") { $$hash{"masquerading"} = &xst_xml_get_pcdata (shift @$tree); }
      elsif ($elem eq "active")       { $$hash{"active"}       = &xst_xml_get_pcdata (shift @$tree); }
      elsif ($elem eq "landev")       { push @$landevs, &xst_xml_get_pcdata (shift @$tree); }
      else  { &xst_report ("xml_unexp_tag", $elem); shift @$tree; }
  }

  $hash{"landev"} = $landevs;

  return $hash;
}


sub xml_parse_dhcp
{
  my ($tree) = @_;
  my ($elem, $hash);

  $hash = {};
  shift @$tree;  # Skip attributes.

  while ($elem = shift @$tree)
  {
      if    ($elem eq "installed")    { $$hash{"installed"}  = &xst_xml_get_pcdata (shift @$tree); }
      elsif ($elem eq "configured")   { $$hash{"configured"} = &xst_xml_get_pcdata (shift @$tree); }
      elsif ($elem eq "active")       { $$hash{"active"}     = &xst_xml_get_pcdata (shift @$tree); }
      else  { &xst_report ("xml_unexp_tag", $elem); shift @$tree; }
  }

  return $hash;
}


sub xst_ishare_get_linux22_support_active
{
  my ($hash) = @_;
  my $forward_file = "/proc/sys/net/ipv4/ip_forward";
  my ($fd, $val);
  
  $fd = &xst_file_open_read_from_names ($forward_file);
  $val = <$fd>;
  chomp $val;
  $$hash{"active"} = ($val == 1)? 1: 0;
  close $fd;
}
  

sub xst_ishare_get_linux22_support
{
  my ($hash) = @_;
  my ($forward_file, $masq_file) =
      ("/proc/sys/net/ipv4/ip_forward", "/proc/sys/net/ipv4/ip_masq_debug");

  $$hash{"forwarding"}   = (-f $forward_file)? 1: 0;
  $$hash{"masquerading"} = (-f $masq_file)?    1: 0;
}


sub xst_ishare_fwrules_get_ipchains
{
  my ($ipchains_conf) = @_;
  my (%hash, $fd, $val);

  $hash{"tools"} = &xst_file_tool_installed ("ipchains");

  if ($hash{"tools"})
  {
    $fd = &xst_file_open_read_from_names ($ipchains_conf);
    if ($fd ne undef)
    {
      $val = <$fd>;
      $hash{"configured"} = ($val =~ /^-A forward.*MASQ$/)? 1: 0;
      close $fd;
    }
  }

  &xst_ishare_get_linux22_support (\%hash);
  &xst_ishare_get_linux22_support_active (\%hash) if ($hash{"configured"});

  return \%hash;
}


sub xst_ishare_fwrules_set_ipchains
{
  my ($ipchains_conf, $interface, $values_hash) = @_;
  my ($fd, $val);

  
}


sub xst_ishare_dhcp_isc_get
{
  my ($dhcpd_conf) = @_;
  my (%hash);

  $hash{"installed"}  = &xst_service_sysv_installed ("dhcpd");
  $hash{"configured"} = ((-f "/etc/dhcpd.conf")? 1: 0)         if $hash{"installed"};
  $hash{"active"}     = &xst_service_sysv_get_status ("dhcpd") if $hash{"configured"};
  
  return \%hash;
}


# --- XML printing --- #


sub xml_print
{
  my ($h) = @_;

  &xst_xml_print_begin ();
  &xst_xml_print_hash      ($$h{"fwrules"}, "fwrules");
  &xst_xml_print_hash      ($$h{"dhcp"},    "dhcp");
  &xst_xml_print_hash_hash ($$h{"interface"}, "interface");
  &xst_xml_print_end ();
}

# Main operations

sub get
{
  my $hash;
  
  $hash = &conf_get ();

  &xst_end();
  &xml_print ($hash);
}


sub set
{
  my $hash;

  $hash = &xml_parse ();
  &conf_set ($hash);
  &xst_end();
}


# --- Filter config: XML in, XML out --- #


sub filter
{
  my $hash;

  $hash = &xml_parse ();
  &xst_end();
  &xml_print ($hash);
}

# --- Main --- #

# get, set and filter are special cases that don't need more parameters than a ref to their function.
# Read general.pl.in:xst_run_directive to know about the format of this hash.

$directives = {
  "get"    => [ \&get,    [], "" ],
  "set"    => [ \&set,    [], "" ],
  "filter" => [ \&filter, [], "" ]
    };

$tool = &xst_init ($name, $version, $description, $directives, @ARGV);
&xst_platform_ensure_supported ($tool, @platforms);
&xst_run ($tool);

# Portable code.
sub conf_get
{
  my %dist_attrib;
  my $hash;

  %dist_attrib = &conf_get_parse_table ();

  $hash = &xst_parse_from_table ($dist_attrib{"fn"},
                                 $dist_attrib{"table"});
  return $hash;
}

sub conf_set
{
  my ($values_hash) = @_;
  my (%dist_attrib, $old_hash);

  %dist_attrib = &conf_get_replace_table ();

  $old_hash = &xst_network_conf_get ();
  $res = &xst_replace_from_table ($dist_attrib{"fn"}, $dist_attrib{"table"},
                                  $values_hash, $old_hash);

  return $res;
}

sub conf_get_parse_table
{
  my %dist_map =
  (
   "redhat-7.0"   => "mandrake-7.2",
   "redhat-7.1"   => "mandrake-7.2",
   "mandrake-7.2" => "mandrake-7.2",
   );

  my %dist_tables =
      (
       "mandrake-7.2" =>
       {
         fn =>
         {
           IPCHAINS_CONF => "/etc/sysconfig/ipchains",
           DHCPD_CONF    => "/etc/dhcpd.conf"
         },
         table =>
             [
              [ "interface", \&xst_network_interfaces_get ],
              [ "fwrules",   \&xst_ishare_fwrules_get_ipchains, IPCHAINS_CONF],
              [ "dhcp",      \&xst_ishare_dhcp_isc_get,       DHCPD_CONF],
              ]
                },
       );

  my $dist = $dist_map {$xst_dist};
  return %{$dist_tables{$dist}} if $dist;

  &xst_report ("platform_no_table", $xst_dist);
  return undef;
}

sub conf_get_replace_table
{
  my %dist_map =
  (
   "redhat-7.0"   => "mandrake-7.2",
   "redhat-7.1"   => "mandrake-7.2",
   "mandrake-7.2" => "mandrake-7.2",
   );

  my %dist_tables =
      (
       "mandrake-7.2" =>
       {
         fn =>
         {
           IPCHAINS_CONF => "/etc/sysconfig/ipchains",
           DHCPD_CONF    => "/etc/dhcpd.conf"
         },
         table =>
             [
              [ "interface", \&xst_network_interfaces_set,      OLD_HASH ],
              [ "fwrules",   \&xst_ishare_fwrules_set_ipchains, IPCHAINS_CONF, "%interface%" ],
              [ "dhcp",      \&xst_ishare_dhcp_isc_set,         DHCPD_CONF,    "%interface%" ],
              ]
                },
       );

  my $dist = $dist_map {$xst_dist};
  return %{$dist_tables{$dist}} if $dist;

  &xst_report ("platform_no_table", $xst_dist);
  return undef;
}
