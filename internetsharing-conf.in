#!/usr/bin/env perl
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-

# Time configurator. Designed to be architecture- and distribution independent.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Hans Petter Jansson <hpj@ximian.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Best viewed with 100 columns of width.

# Configuration files affected/used:
#
# /usr/share/zoneinfo/zone.tab
# /etc/ntp.conf
# /etc/ntp/step-tickers
# /etc/localtime

# Running programs affected/used:
#
# date



require "___scriptsdir___/general.pl";
require "___scriptsdir___/platform.pl";
require "___scriptsdir___/util.pl";
require "___scriptsdir___/file.pl";
require "___scriptsdir___/xml.pl";
require "___scriptsdir___/service.pl";
require "___scriptsdir___/parse.pl";
require "___scriptsdir___/replace.pl";


# --- Tool information --- #

$name = "internetsharing";
$version = "0.1.0";
@platforms = ("mandrake-7.2");

$description =<<"end_of_description;";
       Configures your system clock, timezone and time server list.
end_of_description;

$progress_max = 365;


# --- XML parsing --- #


# Scan XML from standard input to an internal tree.

sub xml_parse
{
  my ($tree, %hash);
  
  # Scan XML to tree.

  $tree = &xst_xml_scan;

  # Walk the tree recursively and extract configuration parameters.
  # This is the top level - find and enter the "networking" tag.

#  while (@$tree)
#  {
#    if ($$tree[0] eq "time") { &xml_parse_time($$tree[1], \%hash); }
#
#    shift @$tree;
#    shift @$tree;
#  }

  return(\%hash);
}


# <networking>...</networking>

sub xml_parse_time
{
  my $tree = $_[0];
  my $hash = $_[1];

  shift @$tree;  # Skip attributes.

  while (@$tree)
  {
#    if    ($$tree[0] eq "local_time"){ $$hash{"local_time"} = &xml_parse_local_time ($$tree[1]); }
#    elsif ($$tree[0] eq "timezone") { $$hash{"timezone"} = &xst_xml_get_word ($$tree[1]); }
#    elsif ($$tree[0] eq "sync")     { $$hash{"sync"} = &xml_parse_sync ($$tree[1]); }

    shift @$tree;
    shift @$tree;
  }
}

# --- XML printing --- #


sub xml_print
{
  my $h = $_[0];
  my @sync;

  @scalar_keys = qw (ip_forwarding_installed);

  $sync = $$h{"sync"};

  &xst_xml_print_begin ();

  
#  &xst_xml_print_vspace ();
#  &xst_xml_print_hash ($$h{"local_time"}, "local_time");
#  &xst_xml_print_vspace ();
  
#  &xst_xml_print_vspace ();
#  &xst_xml_print_line ("<sync active='" . &xst_print_boolean_yesno ($sync_active) . "'>\n");
 
#  &xst_xml_enter ();
#  foreach $server (@$sync)
#  {
#    &xst_xml_print_line ("<server>$server</server>\n");
#  }
#  &xst_xml_leave ();
  
#  &xst_xml_print_line ("</sync>\n");
#  &xst_xml_print_vspace ();

  &xst_xml_print_scalars ($h, @scalar_keys);
  &xst_xml_print_vspace ();

  &xst_xml_print_end ();
}

# Main operations

sub get
{
  my $hash;

  &xst_begin ();
  
  $hash = &conf_get ();

  &xst_end();
  &xml_print ($hash);
}


sub set
{
  my $hash;

  &xst_begin ();
  $hash = &xml_parse ();

  &conf_set ($hash);
  
  &xst_end();
}


# --- Filter config: XML in, XML out --- #


sub filter
{
  my $hash;

  &xst_begin ();
  $hash = &xml_parse ();
  &xst_end();
  &xml_print ($hash);
}


# --- Main --- #

&xst_init($name, $version, $description, @ARGV);
&xst_platform_ensure_supported (@platforms);

# Do our thing.

if    ($xst_operation eq "get")    { &get; }
elsif ($xst_operation eq "set")    { &set; }
elsif ($xst_operation eq "filter") { &filter; }

# Portable code.
sub conf_get
{
  my %dist_attrib;
  my $hash;

  %dist_attrib = &conf_get_parse_table ();

  $hash = &xst_parse_from_table ($dist_attrib{"fn"},
                                 $dist_attrib{"table"});
  return $hash;
}

sub conf_set
{
  my $values_hash = $_[0];
  my %dist_attrib;

  %dist_attrib = &conf_get_replace_table ();

  $res = &xst_replace_from_table ($dist_attrib{"fn"}, $dist_attrib{"table"},
                                  $values_hash);

  return $res;
}

sub conf_get_parse_table
{
  my %dist_map =
  (
   "mandrake-7.2" => "mandrake-7.2",
   );

  my %dist_tables =
      (
       "mandrake-7.2" =>
       {
         fn =>
         {
           IPCHAINS_CONF     => "/etc/sysconfig/ipchains",
         },
         table =>
             [
              [ "ip_forwarding_installed", \&xst_service_sysv_installed, "ipchains" ],
              ]
                },
       );

  my $dist = $dist_map {$xst_dist};
  return %{$dist_tables{$dist}} if $dist;

  #FIXME: warn about unsupported platform.
  return undef;
}

sub conf_get_replace_table
{
  my %dist_map =
  (
   "mandrake-7.2" => "mandrake-7.2",
   );

  my %dist_tables =
      (
       "mandrake-7.2" =>
       {
         fn =>
         {
           IPCHAINS_CONF => "/etc/sysconfig/ipchains",
         },
         table =>
             [
              [ "ip_forwarding_installed", \&xst_service_sysv_set_status, 8, "ipchains" ],
              ]
                },
       );

  my $dist = $dist_map {$xst_dist};
  return %{$dist_tables{$dist}} if $dist;

  #FIXME: warn about unsupported platform.
  return undef;
}

