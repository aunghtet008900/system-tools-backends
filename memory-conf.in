#!/usr/bin/env perl
#-*-perl-*-

# Memory configurator. 
# Designed to be architecture- and distribution independent.
#
# Copyright (C) 2000 Helix Code, Inc.
#
# Authors: Bradford Hovinen <hovinen@helixcode.com>, Tambet Ingo <tambeti@ut.ee>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Best viewed with 100 columns of width.

# Configuration files affected:
#
# /etc/fstab

# Running programs affected/used:
#
# /sbin/swapon /sbin/swapoff /sbin/mkswap /sbin/fdisk

# --- Common stuff --- #



require "___scriptsdir___/be.pl";



# --- Usage text --- #

my $Usage =<<"End_of_Usage;";
Usage: memory-conf <--get | --set | --filter | --help>
                   [--prefix <location>] [--disable-immediate]
                   [--verbose] [--progress]

       Major operations (specify one of these):

       -g --get      Prints the current memory configuration to standard
                     output, as as standalone XML document. The parameters
                     are read from the host\'s low-level configuration.

       -s --set      Updates the system memory configuration from a standalone
                     XML document read from standard input. The format is
                     the same as for the document generated with --get.

       -f --filter   Reads XML configuration from standard input, parses it,
                     and writes the configurator\'s impression of it back to
                     standard output. Good for debugging and parsing tests.

       -h --help     Prints this page to standard output.

          --version  Prints version information to standard output.

       Modifiers (specify any combination of these):

       -p --prefix <location>  Specifies a directory prefix where the
                     configuration is looked for or stored. When storing
                     (with --set), directories and files may be created.

          --disable-immediate  With --set, prevents the configurator from
                     running any commands that make immediate changes to
                     the system configuration. Use with --prefix to make a
                     dry run that won\'t affect your configuration.

                     With --get, suppresses running of non-vital external
                     programs that might take a long time to finish.

       -v --verbose  Turns on diagnostic messages to standard error.

          --progress Prints progress information suitable for interactive
                     frontends to standard output. The progress information
                     is printed before any XML, and consists of a decimal
                     number saying how many dots to expect, followed by a
                     newline, and a running line of dots as the operation
                     progresses, followed by a newline after the last dot.
                     The dots generated can be more or less than the
                     number indicated on the first line.

End_of_Usage;

$version = "0.1.0";

# --- System config file locations --- #

# We list each config file type with as many alternate locations as possible.
# They are tried in array order. First found = used.

@fstab_names =       ( "/etc/fstab" );

# --- Internal configuration variables --- #

# Configuration is parsed/read to, and printed/written from, these temporary variables.

@cf_swapinfo = ();
@cf_partition = ();
@cf_memory = ();


# --- XML scanning --- #

sub xml_parse_memory
  {
    my $tree = @_[0];
    
    shift @$tree;		# Skip attributes.
    
    while (@$tree)
      {
	if (@$tree[0] eq "swapdev") 
	  { 
	    push @cf_swapinfo, be_xml_parse_swapinfo (@$tree[1]); 
	  }
	
	shift @$tree;
	shift @$tree;
      }
  }


# <swap-device>...</swap-device>

sub xml_parse_swapinfo
  {
    my $tree = @_[0];
    my $node;
    my $entry = {};
    
    shift @$tree;		# Skip attributes.
    
    while (@$tree)
      {
	if (@$tree[0] eq 'device') 
	  { 
	    $entry->{device} = be_xml_get_word (@$tree[1]);
	  }
	elsif (@$tree[0] eq 'enabled') 
	  {
	    $node = @$tree[1];
	    $entry->{enabled} = read_boolean (@$node[0]->{state});
	  }
	elsif (@$tree[0] eq 'priority') 
	  { 
	    $entry->{priority} = be_xml_get_word (@$tree[1]);
	  }
	elsif (@$tree[0] eq 'size') 
	  { 
	    $entry->{size} = be_xml_get_size (@$tree[1]);
	  }
	elsif (@$tree[0] eq 'isfile') 
	  { 
	    $node = @$tree[1];
	    $entry->{is_file} = read_boolean (@$node[0]->{state});
	  }
	elsif (@$tree[0] eq 'isnew') 
	  { 
	    $node = @$tree[1];
	    $entry->{is_new} = read_boolean (@$node[0]->{state});
	  }
	
	shift @$tree;
	shift @$tree;
      }

    return $entry;
  }

# --- XML printing --- #


sub xml_print
  {
    print "<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>\n";
    print "<!DOCTYPE memory []>\n\n";
    print "<memory>\n";
    be_xml_enter ();

    be_xml_vspace ();
    be_xml_indent (); print "<!-- Configuration starts here -->\n";
    be_xml_vspace ();

    foreach $entry (@cf_memory) {
      be_xml_indent (); print "<MemTotal>$entry->{MemTotal}</MemTotal>\n";
      be_xml_indent (); print "<SwapTotal>$entry->{SwapTotal}</SwapTotal>\n\n";
    }

    foreach $entry (@cf_partition) {
      be_xml_indent (); print "<partition>\n";
      be_xml_indent (); be_xml_indent (); print "<device>$entry->{device}</device>\n";
      be_xml_indent (); be_xml_indent (); print "<size>$entry->{size}</size>\n";
      be_xml_indent (); print "</partition>\n\n";
    }

    be_xml_vspace ();

    foreach $entry (@cf_swapinfo) {
      be_xml_indent (); print "<swapdev>\n";
      be_xml_indent (); be_xml_indent (); print "<device>$entry->{device}</device>\n";
      be_xml_indent (); be_xml_indent (); print "<enabled state='", 
                            be_print_boolean_yesno ($entry->{enabled}), 
                            "'/>\n";
      be_xml_indent (); be_xml_indent (); print "<priority>$entry->{priority}</priority>\n";
      be_xml_indent (); be_xml_indent (); print "<isfile state='",
                            be_print_boolean_truefalse ($entry->{is_file}),
                            "'/>\n";
      be_xml_indent (); be_xml_indent (); print "<size>$entry->{size}</size>\n";
      be_xml_indent (); be_xml_indent (); print "<isnew state='",
                            be_print_boolean_truefalse ($entry->{is_new}),
                            "'/>\n";
      be_xml_indent (); print "</swapdev>\n\n";
    }

    be_xml_indent (); print "<!-- End of configuration -->\n";
    be_xml_vspace ();

    be_xml_leave ();
    print "</memory>\n";
  }


# --- Get (read) config --- #

sub get_memory
{
  my (@meminfo);
  my ($totmem);
  my ($totswap);

  open (FD, "/proc/meminfo");		# Not portable at all, works on Linuces.
  @meminfo = <FD>;
  close FD;

  foreach $entry (@meminfo)
    {
      if ($entry =~ /^MemTotal:(\s+)(\w+)/)
	{
	  $totmem = sprintf ("%d Mb", $2 / 1024);	# In Mb, integer
	}
      elsif ($entry =~ /^SwapTotal:(\s+)(\w+)/)
	{
	  $totswap = sprintf ("%d Mb", $2 / 1024);
	}
    }

  push @cf_memory, {
		"MemTotal" => $totmem,
		"SwapTotal" => $totswap
		};
}


sub get_fdisk
{
  my $fdisk_tool;

  # Okay, so this is strictly not portable either. Patches welcome.

  my @check_devs = ( "/dev/hda", "/dev/hdb", "/dev/hdc", "/dev/hdd",

                     "/dev/sda", "/dev/sdb", "/dev/sdc", "/dev/sdd",
                     "/dev/sde", "/dev/sdf",
                     
                     "/dev/eda", "/dev/edb", "/dev/edc", "/dev/edd",
                     
                     "/dev/xda", "/dev/xdb" );

  $fdisk_tool = "/sbin/fdisk";

  for $dev (@check_devs)
  {
    my $disk, $device, $point, $fs, $options, $check, $size, $bootable;
    
    if ($be_verbose) { print STDERR "Looking for partitions on $dev.\n"; }

    open(FDISK_HD, "$fdisk_tool -l $dev 2>/dev/null |");
    while (<FDISK_HD>)
    {
      if (/^\/dev/)
      {
        @line = split(/[ \n\r\t]+/, $_);

        $device = @line[0]; shift @line;
        ($disk) = ($device =~ /([a-zA-Z\/]+)/);

        shift @line; shift @line;  # Start and end clusters.

        ($size) = (@line[0] =~ /([0-9]+)/);
	$size = sprintf ("%d Mb", $size / 1024);
        shift @line;

        if (@line[0] ne "82") { next; }  # Not Swap
        else
	  {
	    push @cf_partition, {
				"device" => $device,
				"size" => $size
				};
	  }


      }
    }
    close(FDISK_HD);

    if ($be_verbose) { print STDERR "Querying size of $dev.\n"; }

#    open(FDISK_HD, "$fdisk_tool -s $dev 2>/dev/null |");
#    ($size) = (<FDISK_HD> =~ /([0-9]+)/);
#    if ($size eq "") { next; }
#    close(FDISK_HD);

  }
}



sub get_swap_size
  {
    my ($device) = $_[0];
    my ($is_file) = $_[1];
    my ($size) = 0;

    if ($is_file && -f $device)
      {
        # Is file, get file size.
	my (@stats) = stat($device);
	$size = $stats[7];			# size in stat structure.
	$size = $size /1024 / 1024;		# Size from bytes to Mb.
	$size .= " Mb";
      }
    elsif ($is_file == 0)
      {
        # Is partition, get size.
        open(FD, "/sbin/fdisk -s $device |");
        while (<FD>)
          {
            if (/^\w+/)
              {
                 $size = sprintf("%d Mb", $_ / 1024);		#size from Kb to Mb
              }
          }
      }

    return $size;
  }


sub get_swap_entries
  {
    local *FSTAB_FILE;

    *FSTAB_FILE = be_open_read_from_names (@fstab_names);

    if (not *FSTAB_FILE) 
      {
	print STDERR "Could not find file.\n";
	return; 
      }

    while (<FSTAB_FILE>)
      {
	my ($device, $mount_pt, $type, $options, $fs_freq, $fs_passno) = split;
	my (@option_list) = split /\,/, $options;
	my ($priority) = -1;
	my ($enabled);
        my ($size);
        my ($is_new) = 0;
        my ($is_file) = 1;

	next if $type ne 'swap';

	if ($be_verbose) { print STDERR "Found swap entry:\n$_"; }

	if ($device =~ /^#(.*)/)
	  {
	    $device = $1;
	    $enabled = 0;
	  }
	else 
	  {
	    $enabled = 1;
	  }

        if ($device =~ /^(#?)\/dev\//)
          {
            $is_file = 0;
          }

        $size = get_swap_size($device, $is_file);

	foreach $item (@option_list)
	  {
	    my ($key, $value) = split /\=/, $item;

	    $priority = $value if $key eq 'pri';
	  }

	push @cf_swapinfo, { 
			    "device" => $device, 
			    "enabled" => $enabled, 
			    "priority" => $priority,
                            "is_file" => $is_file,
                            "size" => $size,
                            "is_new" => $is_new
			   };
      }
  }


sub get
{
    if ($be_progress) { $| = 1; print $progress_max . "\n"; }

    if ($be_verbose) 
      { 
	print STDERR "Getting system configuration, generating XML output.\n";
      }
    
    if ($be_verbose) { print STDERR "Getting swap entries.\n"; }

    get_memory; print_progress;
    get_fdisk;  print_progress;
    get_swap_entries; print_progress;
    
    if ($be_verbose) { print STDERR "Printing XML.\n"; }
    if ($be_progress) { print "\n"; }
    xml_print ();
  }


# --- Set (write) config --- #

sub setup_swap_files
  {
    system ("/sbin/swapoff -a");	# To make sure removed swap spaces get removed
    foreach $entry (@cf_swapinfo)
      {
	if ($entry->{is_new})
	  {
	    if ($entry->{is_file})
	      {
		system ("/bin/dd if=/dev/zero of=$entry->{device} bs=1024 count=$entry->{size}");
	      }

	    system ("/sbin/mkswap $entry->{device} >/dev/null 2>/dev/null");
	  }

	elsif ($entry->{is_file})
	  {
	    my ($size) = get_swap_size($entry->{device}, $entry->{is_file});
	    $size =~ tr/ Mb$//d;	# Remove Mb from the end
	    $size *= 1024;		# Make it to Kb
	    if ($size != $entry->{size})
	      {
		system ("/bin/dd if=/dev/zero of=$entry->{device} bs=1024 count=$entry->{size}");
		system ("/sbin/mkswap $entry->{device} >/dev/null 2>/dev/null");
	      }
	  }

	if ($entry->{priority} == -1)
	  {
	    $priority = "";
	  }
	else 
	  {
	    $priority = "-p $entry->{priority}";
	  }

	if ($entry->{enabled}) 
	  {
	    system ("/sbin/swapon $entry->{device} $priority >/dev/null 2>/dev/null");
	  }
      }
  }

sub set_swap_entries
  {
    local (*FSTAB_IN_FILE, *FSTAB_OUT_FILE);
    my (@lines);
    my ($priority_str);

    (*FSTAB_IN_FILE, *FSTAB_OUT_FILE) = 
      open_filter_write_from_names (@fstab_names);

    while (<FSTAB_IN_FILE>)
      {
	my ($device, $mount_pt, $type, $options, $fs_freq, $fs_passno) = 
	  split /\s+/;

	print FSTAB_OUT_FILE if $type ne 'swap';
      }

    foreach $entry (@cf_swapinfo)
      {
	if ($entry->{priority} >= 0) 
	  {
	    $priority_str = sprintf "pri=%-11u", $entry->{priority};
	  }
	else
	  {
	    $priority_str = "defaults       ";
	  }

	print FSTAB_OUT_FILE "#" if !$entry->{enabled};
	printf FSTAB_OUT_FILE 
	  "%-23s swap                    swap    %s 0 0\n",
	  $entry->{device},
	  $priority_str;
      }

    close FSTAB_FILE;
  }


sub set
  {
    if ($be_verbose) 
      { 
	print STDERR "Setting system configuration from XML input.\n"; 
      }

    if ($be_verbose) { print STDERR "Parsing XML.\n"; }
    be_xml_parse ();
    
    if ($be_do_immediate)
      {
	if ($be_verbose) 
	  { 
	    print STDERR 
	      "Changing running configuration via local utilities.\n"; 
	  }
	setup_swap_files;
	set_swap_entries;
      }
  }


# --- Filter config: XML in, XML out --- #


sub filter
  {
    be_xml_parse ();
    xml_print ();
  }


# --- Main --- #

# Process options.

while (@ARGV)
  {
    if    ($ARGV[0] eq "--get"    || $ARGV[0] eq "-g") { be_set_operation("get"); }
    elsif ($ARGV[0] eq "--set"    || $ARGV[0] eq "-s") { be_set_operation("set"); }
    elsif ($ARGV[0] eq "--filter" || $ARGV[0] eq "-f") { be_set_operation("filter"); }
    elsif ($ARGV[0] eq "--help"   || $ARGV[0] eq "-h") { print $Usage; exit(0); }
    elsif ($ARGV[0] eq "--version")                    { print "$version\n"; exit(0); }
    elsif ($ARGV[0] eq "--prefix" || $ARGV[0] eq "-p")
      {
	if ($be_prefix ne "")
	  {
	    print STDERR "Error: You may specify --prefix only once.\n\n";
	    print STDERR $Usage; exit(1);
	  }
	
	$be_prefix = $ARGV[1];
	
	if ($be_prefix eq "")
	  {
	    print STDERR "Error: You must specify an argument to the --prefix option.\n\n";
	    print STDERR $Usage; exit(1);
	  }
	
	shift @ARGV;		# For the argument.
      }
    elsif ($ARGV[0] eq "--disable-immediate")           { $be_do_immediate = 0; }
    elsif ($ARGV[0] eq "--verbose" || $ARGV[0] eq "-v") { $be_verbose = 1; }
    elsif ($ARGV[0] eq "--progress")                    { $be_progress = 1; }
    else
      {
	print STDERR "Error: Unrecognized option '$ARGV[0]'.\n\n";
	print STDERR $Usage; exit(1);
      }

    shift @ARGV;
  }


# Do our thing.

if    ($be_operation eq "get")    { get; }
elsif ($be_operation eq "set")    { set; }
elsif ($be_operation eq "filter") { filter; }
else
  {
    print STDERR "Error: No operation specified.\n\n";
    print STDERR $Usage; exit(1);
  }

