#!/usr/bin/env perl
#-*-perl-*-

# Users account mannager. Designed to be architecture and distribution independent.
#
# Copyright (C) 2000 Helix Code, Inc.
#
# Authors: Hans Petter Jansson <hpj@helixcode.com> and Arturo Espinosa <arturo@helixcode.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Best viewed with 100 columns of width.

# Configuration files affected:
#
# /etc/passwd
# /etc/group
# /etc/shadow
# /etc/login.defs

# NIS support will come later.

# Running programs affected/used:
#
# adduser: creating users.
# usermod: modifying user data.
# passwd: assigning or changing passwords. (Un)locking users.
# chfn: modifying finger information - Name, Office, Office phone, Home phone.


require "___scriptsdir___/be.pl";



# --- Usage text --- #

my $Usage =<<"End_of_Usage;";
Usage: users2-conf <--get | --set | --filter | --help>
                 [--prefix <location>] [--disable-immediate]
                 [--verbose] [--progress]

       Major operations (specify one of these):

       -g --get      Prints the current users configuration to standard
                     output, as as standalone XML document. The parameters
                     are read from the host\'s low-level configuration.

       -s --set      Updates the user configuration from a standalone
                     XML document read from standard input. The format is
                     the same as for the document generated with --get.

       -f --filter   Reads XML configuration from standard input, parses it,
                     and writes the configurator\'s impression of it back to
                     standard output. Good for debugging and parsing tests.

       -h --help     Prints this page to standard output. That\'s all.

          --version  Prints version information to standard output.

       Modifiers (specify any combination of these):

       -p --prefix <location>  Specifies a directory prefix where the
                     configuration is looked for or stored. When storing
                     (with --set), directories and files may be created.

          --disable-immediate  With --set, prevents the configurator from
                     running any commands that make immediate changes to
                     the system configuration. Use with --prefix to make a
                     dry run that won\'t affect your configuration.

                     With --get, suppresses running of non-vital external
                     programs that might take a long time to finish.

       -v --verbose  Turns on diagnostic messages to standard error.

          --progress Prints progress information suitable for interactive
                     frontends to standard output. The progress information
                     is printed before any XML, and consists of a decimal
                     number saying how many dots to expect, followed by a
                     newline, and a running line of dots as the operation
                     progresses, followed by a newline after the last dot.
                     The dots generated can be more or less than the
                     number indicated on the first line.

End_of_Usage;

$version = "0.1.0";

$progress_max = 3;


# --- System config file locations --- #

# We list each config file type with as many alternate locations as possible.
# They are tried in array order. First found = used.

@passwd_names = ( "/etc/passwd" );
@login_defs_names = ( "/etc/login.defs" );


# --- Internal configuration variables --- #

# Configuration is parsed/read to, and printed/written from, these temporary variables.

%users_hash = ();
@users = ();
%login_defs = ();

# --- Confignuration manipulation --- #

sub read_login_defs
{
  local *FILE;
	my @line;
	
  *FILE = be_open_read_from_names(@login_defs_names);
  if (not *FILE) { return; }  # We didn't find it.
	
	while (<FILE>)
	{
	  next if &be_is_line_comment_start ($_);
	  chomp;
		@line = split (/[ \t]+/, $_);
		$login_defs{$line[0]} = $line[1];
	}
	
	close (FILE);
}
		
sub read_passwd
{
  local *FILE;
	my @line;
	my $i = 0;

  # Find the file.

  *FILE = be_open_read_from_names(@passwd_names);
  if (not *FILE) { return; }  # We didn't find it.

  # Parse the file.

  while (<FILE>)
  {
    chomp;      
    @line = split ':';
		$users_hash{$line[0]} = $i;
    push (@users, [@line]);
		$i ++;
  }
	
	close (FILE);
}

sub write_passwd
{
}


# --- XML printing --- #

sub xml_print
{
  my ($key, $i);

  print "<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>\n";
  print "<!DOCTYPE users []>\n\n";
  print "<users>\n";
  &be_xml_enter ();

  &be_xml_vspace ();
  &be_xml_indent (); print "<!-- login.defs configuration starts here -->\n";
  &be_xml_vspace ();

  &be_xml_indent (); print "<login_defs>\n";
	&be_xml_enter ();
	foreach $key (keys %login_defs)
	{
	  &be_xml_indent (); print "<var name=\"" . $key . "\" value=\"" . $login_defs{$key} . "\"/>\n";
	}
	&be_xml_leave ();
	&be_xml_indent (); print "</login_defs>\n";
	&be_xml_vspace ();
  &be_xml_indent (); print "<!-- Now the users -->\n";
  &be_xml_vspace ();
	
	&be_xml_indent (); print "<userdb>\n";
	&be_xml_enter ();
	foreach $i (@users)
	{
    &be_xml_vspace ();
	  &be_xml_indent (); print "<user>\n";
		&be_xml_enter ();
		&be_xml_indent (); print "<login>" . $i->[0] . "</login>\n";
		&be_xml_indent (); print "<uid>" . $i->[2] . "</uid>\n";
		&be_xml_indent (); print "<gid>" . $i->[3] . "</gid>\n";
		&be_xml_indent (); print "<comment>" . $i->[4] . "</comment>\n";
		&be_xml_indent (); print "<home>" . $i->[5] . "</home>\n";
		&be_xml_indent (); print "<shell>" . $i->[6] . "</shell>\n";
		&be_xml_leave ();
		&be_xml_indent (); print "</user>\n";
	}
	&be_xml_leave ();
  &be_xml_vspace ();
  &be_xml_indent (); print "</userdb>\n";
	
  &be_xml_vspace ();
	&be_xml_leave ();
  print "</users>\n";
}


# --- Get (read) config --- #

sub get
{
  if ($be_progress) { $| = 1; print $progress_max . "\n"; }

  if ($be_verbose) { print STDERR "Getting system configuration, generating XML output.\n"; }
  if ($be_verbose) { print STDERR "Getting user database.\n"; }

  &read_login_defs ();
  &read_passwd (); &be_print_progress ();

  if ($be_verbose) { print STDERR "Printing XML.\n"; }
  if ($be_progress) { print "\n"; }
  &xml_print ();
}

sub set
{
  if ($be_verbose) { print STDERR "Setting system configuration from XML input.\n"; }

  if ($be_verbose) { print STDERR "Parsing XML.\n"; }
  &xml_parse ();

  &write_passwd ();

  if ($be_do_immediate)
  {
    if ($be_verbose) { print STDERR "Changing running configuration via local utilities.\n"; }
		# dunno if do_immediate is relevant in this type of backend
  }
}


# --- Filter config: XML in, XML out --- #


sub filter
{
  &xml_parse ();
  &xml_print ();
}


# --- Main --- #

# Process options.

while (@ARGV)
{
  if    ($ARGV[0] eq "--get"    || $ARGV[0] eq "-g") { be_set_operation("get"); }
  elsif ($ARGV[0] eq "--set"    || $ARGV[0] eq "-s") { be_set_operation("set"); }
  elsif ($ARGV[0] eq "--filter" || $ARGV[0] eq "-f") { be_set_operation("filter"); }
  elsif ($ARGV[0] eq "--help"   || $ARGV[0] eq "-h") { print $Usage; exit(0); }
  elsif ($ARGV[0] eq "--version")                    { print "$version\n"; exit(0); }
  elsif ($ARGV[0] eq "--prefix" || $ARGV[0] eq "-p")
  {
    if ($be_prefix ne "")
    {
      print STDERR "Error: You may specify --prefix only once.\n\n";
      print STDERR $Usage; exit(1);
    }

    $be_prefix = $ARGV[1];

    if ($be_prefix eq "")
    {
      print STDERR "Error: You must specify an argument to the --prefix option.\n\n";
      print STDERR $Usage; exit(1);
    }

    shift @ARGV;  # For the argument.
  }
  elsif ($ARGV[0] eq "--verbose" || $ARGV[0] eq "-v") { $be_verbose = 1; }
  elsif ($ARGV[0] eq "--progress")                    { $be_progress = 1; }
  else
  {
    print STDERR "Error: Unrecognized option '$ARGV[0]'.\n\n";
    print STDERR $Usage; exit(1);
  }

  shift @ARGV;
}


# Do our thing.

if    ($be_operation eq "get")    { &get; }
elsif ($be_operation eq "set")    { &set; }
elsif ($be_operation eq "filter") { &filter; }
else
{
  print STDERR "Error: No operation specified.\n\n";
  print STDERR $Usage; exit(1);
}
