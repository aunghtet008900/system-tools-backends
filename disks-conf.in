#!/usr/bin/env perl
#-*-perl-*-

# Simple fixed media configurator. Designed to be architecture- and distribution independent.
#
# Copyright (C) 2000 Helix Code, Inc.
#
# Authors: Hans Petter Jansson <hpj@helixcode.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Best viewed with 100 columns of width.

# Configuration files affected:
#
# /etc/fstab

# Running programs affected/used:
#
# fdisk
# mount



require "___scriptsdir___/be.pl";



# --- Usage text --- #

my $Usage =<<"End_of_Usage;";
Usage: disks-conf <--get | --set | --filter | --help>
                  [--prefix <location>] [--disable-immediate]
                  [--verbose] [--progress]

       Major operations (specify one of these):

       -g --get      Prints the current fixed media configuration to
                     standard output, as as standalone XML document. The
                     configuration is read from the host\'s system config
                     files.

       -s --set      Updates the system fixed media configuration from
                     a standalone XML document read from standard input.
                     The format is the same as for the document generated
                     with --get.

       -f --filter   Reads XML configuration from standard input, parses it,
                     and writes the configurator\'s impression of it back to
                     standard output. Good for debugging and parsing tests.

       -h --help     Prints this page to standard output.

          --version  Prints version information to standard output.

       Modifiers (specify any combination of these):

       -p --prefix <location>  Specifies a directory prefix where the
                     configuration is looked for or stored. When storing
                     (with --set), directories and files may be created.

          --disable-immediate  With --set, prevents the configurator from
                     running any commands that make immediate changes to
                     the system configuration. Use with --prefix to make a
                     dry run that won\'t affect your configuration.

                     With --get, suppresses running of non-vital external
                     programs that might take a long time to finish.

       -v --verbose  Turns on diagnostic messages to standard error.

          --progress Prints progress information suitable for interactive
                     frontends to standard output. The progress information
                     is printed before any XML, and consists of a decimal
                     number saying how many dots to expect, followed by a
                     newline, and a running line of dots as the operation
                     progresses, followed by a newline after the last dot.
                     The dots generated can be more or less than the
                     number indicated on the first line.

End_of_Usage;

$version = "0.1.0";

$progress_max = 16;


# --- System config file locations --- #

# We list each config file type with as many alternate locations as possible.
# They are tried in array order. First found = used.

# Right now there's only one entry per array, as I couldn't find any
# typical deviations.

@fstab_names = ( "/etc/fstab" );


# --- Internal configuration variables --- #

# Configuration is parsed/read to, and printed/written from, these temporary variables.

@cf_disks = ();


# --- XML printing --- #


sub xml_print
{
  print "<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>\n";
  print "<!DOCTYPE disks []>\n\n";
  print "<disks>\n";
  enter;

  vspace;
  indent; print "<!-- Configuration starts here -->\n";
  vspace;
  indent; print "<!-- Local fixed media and partitions -->\n";
  vspace;

  my @disks = @cf_disks;

  while (@disks)
  {
    if (@disks[0])
    {
      my $disk = @disks[0];
      
      vspace;
      indent; print "<disk>\n";
      enter;

      indent; print "<device>" . %$disk->{device} . "</device>\n";
      if (%$disk->{size}) { indent; print "<size>" . %$disk->{size} . "</size>\n"; }
      
      my $partitions = %$disk->{partitions};
      
      while (@$partitions)
      {
        my $partition = @$partitions[0];

        vspace;
        indent; print "<partition>\n";
        enter;

        indent; print "<device>" . %$partition->{device} . "</device>\n";
        if (%$partition->{type}) { indent; print "<type>" . %$partition->{type} . "</type>\n"; }
        if (%$partition->{point}) { indent; print "<point>" . %$partition->{point} . "</point>\n"; }
        if (%$partition->{size})
        {
          indent; print "<size>" . %$partition->{size} . "</size>\n";
        }
        
        indent; print "<bootable state='" . be_print_boolean_truefalse(%$partition->{bootable}) . "'/>";
                print "<integritycheck state='" . be_print_boolean_truefalse(%$partition->{check}) . "'/>\n";

        indent;
        print "<mounted state='" . be_print_boolean_truefalse(%$partition->{mounted}) . "'/>";
        print "<listed state='" . be_print_boolean_truefalse(%$partition->{listed}) . "'/>";
        print "<detected state='" . be_print_boolean_truefalse(%$partition->{detected}) . "'/>\n";

        leave;
        indent; print "</partition>\n";
        
        shift @$partitions;
      }

      leave;
      indent; print "</disk>\n";
      vspace;
    }
  
    shift @disks;
  }

  vspace;
  indent; print "<!-- End of configuration -->\n";
  vspace;

  leave;
  print "</disks>\n";
}


# --- Get (read) config --- #


sub get
{
  if ($be_progress) { $| = 1; print $progress_max . "\n"; }

  if ($be_verbose) { print STDERR "Getting system configuration, generating XML output.\n"; }

  get_fdisk;
  read_fstab;

  if ($be_verbose) { print STDERR "Printing XML.\n"; }
  if ($be_progress) { print "\n"; }
  xml_print;
}


# --- Set (write) config --- #


sub set_immediate
{
  my $mount_tool;
  my $umount_tool;

  $mount_tool = be_locate_tool("mount");
  $umount_tool = be_locate_tool("umount");

  # Update mount status.

  if (($mount_tool ne "") && ($umount_tool ne ""))
  {
    my $i, my $j;

    for ($i = 0; @cf_disks[$i]; $i++)
    {
      for ($j = 0; @cf_disks[$i]->{partitions}[$j]; $j++)
      {
        if (@cf_disks[$i]->{partitions}[$j]->{mounted})
        {
          if ($be_verbose)
          {
            print STDERR "Mounting " . @cf_disks[$i]->{partitions}[$j]->{device} . ".\n";
          }
          system "$mount_tool " . @cf_disks[$i]->{partitions}[$j]->{device} . " " .
                 @cf_disks[$i]->{partitions}[$j]->{point} . " >/dev/null 2>/dev/null";
        }
        else
        {
          if ($be_verbose)
          {
            print STDERR "Unmounting " . @cf_disks[$i]->{partitions}[$j]->{device} . ".\n";
          }
          system "$umount_tool " . @cf_disks[$i]->{partitions}[$j]->{device} . " >/dev/null 2>/dev/null";
        }
      }
    }
  }
  else
  {
    if ($be_verbose) { print STDERR "Warning: Could not find mount tools. No mounting done.\n"; }
  }
}


sub set
{
  if ($be_verbose) { print STDERR "Setting system configuration from XML input.\n"; }

  if ($be_verbose) { print STDERR "Parsing XML.\n"; }
  be_xml_parse;

  write_fstab;

  if ($be_do_immediate)
  {
    if ($be_verbose) { print STDERR "Changing running configuration via local utilities.\n"; }
    set_immediate;
  }
}


# --- Filter config: XML in, XML out --- #


sub filter
{
  be_xml_parse;
  xml_print;
}


# --- Main --- #

# Process options.

while (@ARGV)
{
  if    (@ARGV[0] eq "--get"    || @ARGV[0] eq "-g") { be_set_operation("get"); }
  elsif (@ARGV[0] eq "--set"    || @ARGV[0] eq "-s") { be_set_operation("set"); }
  elsif (@ARGV[0] eq "--filter" || @ARGV[0] eq "-f") { be_set_operation("filter"); }
  elsif (@ARGV[0] eq "--help"   || @ARGV[0] eq "-h") { print $Usage; exit(0); }
  elsif (@ARGV[0] eq "--version")                    { print "$version\n"; exit(0); }
  elsif (@ARGV[0] eq "--prefix" || @ARGV[0] eq "-p")
  {
    if ($be_prefix ne "")
    {
      print STDERR "Error: You may specify --prefix only once.\n\n";
      print STDERR $Usage; exit(1);
    }

    $be_prefix = @ARGV[1];

    if ($be_prefix eq "")
    {
      print STDERR "Error: You must specify an argument to the --prefix option.\n\n";
      print STDERR $Usage; exit(1);
    }

    shift @ARGV;  # For the argument.
  }
  elsif (@ARGV[0] eq "--disable-immediate")           { $be_do_immediate = 0; }
  elsif (@ARGV[0] eq "--verbose" || @ARGV[0] eq "-v") { $be_verbose = 1; }
  elsif (@ARGV[0] eq "--progress")                    { $be_progress = 1; }
  else
  {
    print STDERR "Error: Unrecognized option '@ARGV[0]'.\n\n";
    print STDERR $Usage; exit(1);
  }

  shift @ARGV;
}


# Do our thing.

if    ($be_operation eq "get")    { get; }
elsif ($be_operation eq "set")    { set; }
elsif ($be_operation eq "filter") { filter; }
else
{
  print STDERR "Error: No operation specified.\n\n";
  print STDERR $Usage; exit(1);
}

