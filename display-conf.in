#!/usr/bin/env perl
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-

# Display configurator. Designed to be architecture and distribution independent.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Tambet Ingo <tambet@ximian.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Best viewed with 100 columns of width.

# Configuration files affected:
#
# /etc/X11/XF86Config

# Running programs affected:
#

require "___scriptsdir___/platform.pl";
require "___scriptsdir___/x.pl";


# --- Tool information --- #

$name = "Display";
$version = "0.1.0";
@platforms = qw(redhat-7.0 redhat-7.1 turbolinux-7.0);

$description =<<"end_of_description;";
       Configures XFree86 verion 4.
end_of_description;

# --- Platform handling --- #

$platmap =
{
  "redhat-7.0"     => XFree4,
  "redhat-7.1"     => XFree4,
  "turbolinux-7.0" => XFree4,
};

$filemap = {
  XFree4 => "/etc/X11/XF86Config-4",
};

@display_sections = qw(Device Monitor Screen Display ServerLayout);

sub distro_file
{
  return $$filemap{$$platmap{$xst_dist}};
}

# --- XML parsing ---
# Scan XML from standard input to an internal tree.

sub xml_parse ()
{
  my ($tree, $hash);

  $tree = &xst_xml_scan ();

  # This is the top level - find and enter the "Display" tag.

  shift @$tree;
  
  while (@$tree)
  {
    if ($$tree[0] eq "Display") { $hash = &x_xml_parse ($$tree[1], $hash); }
    
    shift @$tree;
    shift @$tree;
  }

  return($hash);
}

sub xml_print
{
  my $config = shift;
  my ($section, $hash);

  if (ref ($config) ne "XstXConfig") {
    # TODO: give error
    return;
  }
  
  &xst_xml_print_begin ();
  &xst_xml_print_vspace ();

  foreach $section (keys %$config) {
    my ($arrayref) = $$config{$section};

    foreach $hash (@$arrayref) {      
      &x_xml_print_section ($hash, $section, \@display_sections);
      &xst_xml_print_vspace ();
    }
  }
  
  &xst_xml_print_end ();
}

# Configuration handling.

sub parse
{
  return &x_parse (&distro_file ());
}

# Top-level actions.

sub get
{
  my $config = &parse ();
      
  &xst_end();
  &xml_print ($config);
}

sub set
{
  my $config = &parse ();
  my $xml_config = &xml_parse ();  
  
  &x_config_set (&distro_file (), $config, $xml_config);
  &xst_end ();
}

sub filter
{
  my $config = &xml_parse ();
  
  &xst_end ();
  &xml_print ($config);
}


# --- Main --- #

# get, set and filter are special cases that don't need more parameters than a ref to their function.
# Read general.pl.in:xst_run_directive to know about the format of this hash.

$directives = {
  "get"    => [ \&get,    [], "" ],
  "set"    => [ \&set,    [], "" ],
  "filter" => [ \&filter, [], "" ],
};

$tool = &xst_init ($name, $version, $description, $directives, @ARGV);
&xst_platform_ensure_supported ($tool, @platforms);
&xst_run ($tool);
