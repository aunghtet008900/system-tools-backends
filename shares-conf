#!/usr/bin/perl

# Simple shares configurator. Designed to be architecture- and distribution independent.
#
# Version 0.1.0 - copyright (C) 2000 Helix Code, Inc.
#
# Authors: Hans Petter Jansson <hpj@helixcode.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Best viewed with 100 columns of width.

# WARNING: Works with Red Hat (and probably most derivates) and SuSE.
# You need to have Samba installed. We're more than happy to receive patches
# for other distributions.

# Configuration files affected:
#
# /etc/sysconfig/network
# /etc/sysconfig/network-scripts/ifcfg-*
# /etc/rc.config
# /etc/fstab
# /etc/smb.conf

# Running programs affected/used:
#
# ifconfig
# ping
# showmount
# nmblookup
# smbclient


# --- Usage text --- #

my $Usage =<<"End_of_Usage;";
Usage: shares-conf <--get | --set | --filter | --help>
                   [--prefix <location>] [--disable-immediate]
                   [--verbose] [--progress]

       Major operations (specify one of these):

       -g --get      Prints the current shares configuration to
                     standard output, as as standalone XML document. The
                     configuration is read from the host\'s system config
                     files.

       -s --set      Updates the system shares configuration from
                     a standalone XML document read from standard input.
                     The format is the same as for the document generated
                     with --get.

       -f --filter   Reads XML configuration from standard input, parses it,
                     and writes the configurator\'s impression of it back to
                     standard output. Good for debugging and parsing tests.

       -h --help     Prints this page to standard output.

          --version  Prints version information to standard output.

       Modifiers (specify any combination of these):

       -p --prefix <location>  Specifies a directory prefix where the
                     configuration is looked for or stored. When storing
                     (with --set), directories and files may be created.

          --disable-immediate  With --set, prevents the configurator from
                     running any commands that make immediate changes to
                     the system configuration. Use with --prefix to make a
                     dry run that won\'t affect your configuration.

                     With --get, suppresses running of non-vital external
                     programs that might take a long time to finish.

       -v --verbose  Turns on diagnostic messages to standard error.

          --progress Prints progress information suitable for interactive
                     frontends to standard output. The progress information
                     is printed before any XML, and consists of a decimal
                     number saying how many dots to expect, followed by a
                     newline, and a running line of dots as the operation
                     progresses, followed by a newline after the last dot.
                     The dots generated can be more or less than the
                     number indicated on the first line.

End_of_Usage;

$version = "0.1.0";

$progress_max = 8;


# --- System config file locations --- #

# We list each config file type with as many alternate locations as possible.
# They are tried in array order. First found = used.

# Right now there's only one entry per array, as I couldn't find any
# typical deviations.

@sysconfig_network_names = ( "/etc/sysconfig/network" );
@rc_config_names =         ( "/etc/rc.config" );
@fstab_names =             ( "/etc/fstab" );
@exports_names =           ( "/etc/exports" );
@smb_conf_names =          ( "/etc/smb.conf" );


# --- Internal configuration variables --- #

# Configuration is parsed/read to, and printed/written from, these temporary variables.

$cf_hostip = "";
$cf_netmask = "";
$cf_workgroup = "";
@cf_shares_list = ();
@cf_exports_list = ();

$cf_interface = "";
$cf_netmask = "";
$cf_hostip = "";


# --- Operation modifying variables --- #

# Variables are set to their default value, which may be overridden by user. Note
# that a $prefix of "" will cause the configurator to use '/' as the base path,
# and disables creation of directories and writing of previously non-existent
# files.

$prefix = "";
$verbose = 0;
$progress = 0;
$do_immediate = 1;


# --- Progress printing --- #


sub print_progress
{
  if ($progress) { print "."; }
}


# --- XML print formatting  --- #

# enter: Call after entering a block. Increases indent level.
# leave: Call before leaving a block. Decreases indent level.
# indent: Call before printing a line. Indents to current level. 
# vspace: Ensures there is a vertical space of one and only one line.

$indent_level = 0;
$have_vspace = 0;

sub enter  { $indent_level += 2; }
sub leave  { $indent_level -= 2; }
sub indent { for ($i = 0; $i < $indent_level; $i++) { print " "; } $have_vspace = 0; }
sub vspace { if (not $have_vspace) { print "\n"; $have_vspace = 1; } }


# --- XML scanning --- #

# This code tries to replace XML::Parser scanning from stdin in tree mode.


@xml_scan_list;


sub xml_scan_make_kid_array
{
  my %hash = {};
  my @sublist;

  @attr = @_[0] =~ /[^\t\n\r ]+[\t\n\r ]*([a-zA-Z]+)[ \t\n\r]*\=[ \t\n\r\"\']*([a-zA-Z]+)/g;
  %hash = @attr;

  push(@sublist, \%hash);
  return(\@sublist);
}


sub xml_scan_recurse;

sub xml_scan_recurse
{
  my @list;
  if (@_) { @list = @_[0]->[0]; }

  while (@xml_scan_list)
  {
    $el = @xml_scan_list[0]; shift @xml_scan_list;

    if ((not $el) || $el =~ /^\<[!?].*\>$/s) { next; }  # Empty strings, PI and DTD must go.

    if ($el =~ /^\<.*\/\>$/s)     # Empty.
    {
      $el =~ /^\<([a-zA-Z]+).*\/\>$/s;
      push(@list, $1);
      push(@list, xml_scan_make_kid_array($el));
    }
    elsif ($el =~ /^\<\/.*\>$/s)  # End.
    {
      last;
    }
    elsif ($el =~ /^\<.*\>$/s)    # Start.
    {
      $el =~ /^\<([a-zA-Z]+).*\>$/s;
      push(@list, $1);
      $sublist = xml_scan_make_kid_array($el);
      push(@list, xml_scan_recurse($sublist));
      next;
    }
    elsif ($el ne "")             # PCDATA.
    {
      push(@list, 0);
      push(@list, "$el");
    }
  }

  return(\@list);
}


sub xml_scan
{
  my $doc; my @tree;
  read STDIN, $doc, 512000;  # Read in document (FIXME: ugly).
  @xml_scan_list = ($doc =~ /([^\<]*)(\<[^\>]*\>)[ \t\n\r]*/mg);  # pcdata, tag, pcdata, tag, ...

  $tree = xml_scan_recurse;

  return($tree);

#  $" = "\n";
#  print "@list\n";
}


@xml_entities = ( "&lt;", '<', "&gt;", '>', "&apos;", '\'', "&quot;", '"' );

sub xml_entities_to_plain
{
  my $in = @_[0];
  my $out = "";
  my @xe;

  $in = $$in;

  my @elist = ($in =~ /([^&]*)(\&[a-zA-Z]+\;)?/mg);  # text, entity, text, entity, ...

  while (@elist)
  {
    # Join text.

    $out = join('', $out, @elist[0]);
    shift @elist;
    
    # Find entity and join its text equivalent.
    # Unknown entities are simply removed.

    for (@xe = @xml_entities; @xe; )
    {
      if (@xe[0] eq @elist[0]) { $out = join('', $out, @xe[1]); last; }
      shift @xe; shift @xe;
    }

    shift @elist;
  }

  return($out);
}


sub xml_plain_to_entities
{
  my $in = @_[0];
  my $out = "";
  my @xe;
  my $joined = 0;

  $in = $$in;

  my @clist = split(//, $in);

  while (@clist)
  {
    # Find character and join its entity equivalent.
    # If none found, simply join the character.

    $joined = 0;  # Cumbersome.

    for (@xe = @xml_entities; @xe && !$joined; )
    {
      if (@xe[1] eq @clist[0]) { $out = join('', $out, @xe[0]); $joined = 1; }
      shift @xe; shift @xe;
    }

    if (!$joined) { $out = join('', $out, @clist[0]); }
    shift @clist;
  }

  return($out);
}


# --- String and array manipulation --- #

# Boolean/strings conversion.

sub read_boolean
{
  if (@_[0] eq "true") { return(1); }
  elsif (@_[0] eq "yes") { return(1); }
  return(0);
}

sub print_boolean_yesno
{
  if (@_[0] == 1) { return("yes"); }
  return("no");
}

sub print_boolean_truefalse
{
  if (@_[0] == 1) { return("true"); }
  return("false");
}


# Pushes a value to an array, only if it's not already in there.
# I'm sure there's a smarter way to do this. Should only be used for small lists,
# as it's O(N^2). Larger lists with unique members should use a hash.

sub push_unique
{
  my $arr = @_[0];
  my $found;
  my $i;

  # Go through all elements in pushed list.

  for ($i = 1; @_[$i]; $i++)
  {
    # Compare against all elements in destination array.

    $found = "";
    for $elem (@$arr)
    {
      if ($elem eq @_[$i]) { $found = $elem; last; }
    }

    if ($found eq "") { push(@$arr, @_[$i]); }
  }
}


sub is_line_comment_start
{
  if (@_[0] =~ /^\#/) { return(1); }
  return(0);
}


# --- IP calculation --- #

# Both functions take two arguments: IP and netmask.


sub ip_calc_network
{
  my @ip_reg1;
  my @ip_reg2;

  @ip_reg1 = (@_[0] =~ /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/);
  @ip_reg2 = (@_[1] =~ /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/);
  
  @ip_reg1[0] = (@ip_reg1[0] * 1) & (@ip_reg2[0] * 1);
  @ip_reg1[1] = (@ip_reg1[1] * 1) & (@ip_reg2[1] * 1);
  @ip_reg1[2] = (@ip_reg1[2] * 1) & (@ip_reg2[2] * 1);
  @ip_reg1[3] = (@ip_reg1[3] * 1) & (@ip_reg2[3] * 1);
  
  return(join('.', @ip_reg1));
}


sub ip_calc_broadcast
{
  my @ip_reg1;
  my @ip_reg2;

  @ip_reg1 = (@_[0] =~ /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/);
  @ip_reg2 = (@_[1] =~ /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/);
  
  @ip_reg1 = ($cf_hostip =~ /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/);

  @ip_reg1[0] = (@ip_reg1[0] * 1) | (~(@ip_reg2[0] * 1) & 255);
  @ip_reg1[1] = (@ip_reg1[1] * 1) | (~(@ip_reg2[1] * 1) & 255);
  @ip_reg1[2] = (@ip_reg1[2] * 1) | (~(@ip_reg2[2] * 1) & 255);
  @ip_reg1[3] = (@ip_reg1[3] * 1) | (~(@ip_reg2[3] * 1) & 255);

  return(join('.', @ip_reg1));
}


# --- File operations --- #

@builtin_paths = ( "/sbin", "/usr/sbin", "/usr/local/sbin", "/bin", "/usr/bin",
                   "/usr/local/bin" );

sub locate_tool
{
  my $found = "";
  my @user_paths;

  # Extract user paths to try.

  @user_paths = ($ENV{PATH} =~ /([^:]+):/mg);

  # Try user paths.

  for $path (@user_paths)
  {
    if (-x "$path/@_[0]") { $found = "$path/@_[0]"; last; }
  }

  # Try builtin paths.

  for $path (@builtin_paths)
  {
    if (-x "$path/@_[0]") { $found = "$path/@_[0]"; last; }
  }
  
  return($found);
}


sub open_read_from_names
{
  my $FILE;
  my $fname = "";

  for $name (@_)
  {
    if (open(FILE, "$prefix/$name")) { $fname = $name; last; }
  }

  if ($verbose)
  {
    (my $fullname = "$prefix/$fname") =~ tr/\//\//s;  # '//' -> '/'
    if ($fname ne "") { print STDERR "Reading options from \"$fullname\".\n"; }
    else { print STDERR "Could not read \[@_\].\n"; }
  }

  return($FILE);
}


sub open_write_from_names
{
  my $FILE;
  my $name;
  my $fullname;

  # Find out where it lives.

  for $elem (@_) { if (stat($elem) ne "") { $name = $elem; last; } }

  if ($name eq "")
  {
    # If we couldn't locate the file, and have no prefix, give up.

    # If we have a prefix, but couldn't locate the file relative to '/',
    # take the first name in the array and let that be created in $prefix.

    if ($prefix eq "")
    {
      if ($verbose) { print STDERR "No file to replace: \[@_\].\n"; }
      return(0);
    }
    else
    {
      $name = @_[0];
      if ($verbose)
      {
        (my $fullname = "$prefix/$name") =~ tr/\//\//s;
        print STDERR "Could not find \[@_\]. Writing to \"$fullname\".\n";
      }
    }
  }
  elsif ($verbose)
  {
    (my $fullname = "$prefix/$name") =~ tr/\//\//s;
    print STDERR "Found \"$name\". Writing to \"$fullname\".\n";
  }

  ($name = "$prefix/$name") =~ tr/\//\//s;  # '//' -> '/'
  create_path($name);

  # Make a backup if the file already exists - if the user specified a prefix,
  # it might not.

  if (stat($name))
  {
    # NOTE: Might not work everywhere. Might be unsafe if the user is allowed
    # to specify a $name list somehow, in the future.

    system("cp $name $name.confsave >/dev/null 2>/dev/null");
  }

  # Truncate and return filehandle.

  if (!open(FILE, ">$name") && $verbose)
  {
    print STDERR "Error: Failed to write to \"$name\". Are you root?\n";
  }

  return($FILE);
}


sub open_filter_write_from_names
{
  my $INFILE;
  my $OUTFILE;
  my $name;

  # Find out where it lives.

  for $elem (@_) { if (stat($elem) ne "") { $name = $elem; last; } }

  if ($name eq "")
  {
    # If we couldn't locate the file, and have no prefix, give up.

    # If we have a prefix, but couldn't locate the file relative to '/',
    # take the first name in the array and let that be created in $prefix.

    if ($prefix eq "")
    {
      if ($verbose) { print STDERR "No file to patch: \[@_\].\n"; }
      return(0, 0);
    }
    else
    {
      $name = @_[0];
      if ($verbose)
      {
        (my $fullname = "$prefix/$name") =~ tr/\//\//s;
        print STDERR "Could not find \[@_\]. Patching \"$fullname\".\n";
      }
    }
  }
  elsif ($verbose)
  {
    (my $fullname = "$prefix/$name") =~ tr/\//\//s;
    print STDERR "Found \"$name\". Patching \"$fullname\".\n";
  }

  ($name = "$prefix/$name") =~ tr/\//\//s;  # '//' -> '/'
  create_path($name);

  # Make a backup if the file already exists - if the user specified a prefix,
  # it might not.

  if (stat($name))
  {
    # NOTE: Might not work everywhere. Might be unsafe if the user is allowed
    # to specify a $name list somehow, in the future.

    system("cp $name $name.confsave >/dev/null 2>/dev/null");
  }

  # Return filehandles. Backup file is used as filter input. It might be
  # invalid, in which case the caller should just write to OUTFILE without
  # bothering with INFILE filtering.

  open(INFILE, "$name.confsave");

  if (!open(OUTFILE, ">$name") && $verbose)
  {
    print STDERR "Error: Failed to write to \"$name\". Are you root?\n";
  }

  return($INFILE, $OUTFILE);
}


sub create_path
{
  my $path;

  $path = @_[0];
  my @pelem = split(/\//, $path);  # 'a/b/c/d/' -> 'a', 'b', 'c', 'd', ''

  for ($path = ""; @pelem; shift @pelem)
  {
    if (@pelem[1] ne "")
    {
      $path = "$path@pelem[0]";
      mkdir($path, 0770);
      $path = "$path/";
    }
  }
}


# --- Configuration file manipulation --- #


# Red Hat style /etc/sysconfig/network-scripts/ifcfg-*
#
# <filtered lines>
# IPADDR=<ip>
# NETMASK=<ip mask>
# NETWORK=<network ip>
# BROADCAST=<broadcast ip>
# BOOTPROTO=<bootp|dhcp|none>
# ONBOOT=<boolean>
# <filtered lines>
#
# Determines the configuration of a specific network interface. First
# argument must be the name of the interface.
#
# Exists: Red Hat [5|6].x
#
# Absent:

sub read_sysconfig_network_scripts_ifcfg
{
  my $FILE;

  # Find the file.

  $FILE = open_read_from_names("/etc/sysconfig/network-scripts/ifcfg-@_[0]");
  if (not FILE) { return; }

  # Parse the file.

  while (<FILE>)
  {
    @line = split(/[ \n\r\t\"\'=]+/, $_);
    if (@line[0] eq "") { shift(@line); }  # Leading whitespace. He.

    if (@line[0] eq "IPADDR" && not is_line_comment_start(@line[1]))
    { $cf_hostip = @line[1]; }
    elsif (@line[0] eq "NETMASK" && not is_line_comment_start(@line[1]))
    { $cf_netmask = @line[1]; }
  }

  close(FILE);
}


# Red Hat style primary interface reader.
#
# Tries to figure out what the "primary" interface is, and calls
# read_sysconfig_network_scripts_ifcfg on that interface.
#
# Must run after get_immediate and read_sysconfig_network, which will
# (hopefully) provide information to identify the primary device.

sub read_primary_interface
{
  # If the interface was specified, we use that.

  if ($cf_interface ne "") { }

  # If the known-interfaces list contains only one interface, we use that.
  # This is actually not too uncommon, after weeding lo and dummy.

  elsif ($#cf_interface_list == 0) { $cf_interface = @cf_interface_list[0]; }
  
  # If we have a gateway, try to find an interface with a matching subnet, by
  # going through the interface configurations. This will fail if a gateway
  # has been configured without any interfaces, or if the gateway is on a
  # foreign, bridged subnet. Both are pretty rare conditions.

  elsif ($cf_gateway ne "")
  {
    for $elem (@cf_interface_list)
    {
      read_sysconfig_network_scripts_ifcfg($elem);
      if ($cf_netmask eq "") { next; }

      if (ip_calc_network($cf_gateway, $cf_netmask) eq ip_calc_network($cf_hostip, $cf_netmask))
      {
        $cf_interface = $elem;
        last;
      }

      $cf_hostip = "";
      $cf_netmask = "";
      $cf_method = "";
      $cf_onboot = 0;
    }
  }

  # Last ditch. Pick an interface from the list according to some built-in
  # rules. ethN on Linux and hmeN or Solaris.

  else
  {
    for $elem (@cf_interface_list)
    {
      if (($elem =~ /eth.*/) || ($elem =~ /hme.*/))
      {
        $cf_interface = $elem;
        last;
      }
    }
  }

  if ($cf_interface ne "") { read_sysconfig_network_scripts_ifcfg($cf_interface); }
}


# Red Hat style /etc/sysconfig/network
#
# <filtered lines>
# NETWORKING=<boolean>
# FORWARD_IPV4=<boolean>
# GATEWAY=<ip>
# GATEWAYDEV=<interface>
# <filtered lines>
#
# Determines the primary network configuration. BEWARE: This is actually a
# sourced shell script. We rely on some lenience from the user (and the distro)
# to be able to parse it correctly.
#
# Exists: Red Hat [5|6].x, Caldera 2.4, TurboLinux 6.0, Mandrake 7.0
#
# Absent: SuSE 6.3, SunOS 5.7

sub read_sysconfig_network
{
  my $FILE;

  # Find the file.

  $FILE = open_read_from_names(@sysconfig_network_names);
  if (not FILE) { return; }  # We didn't find it.

  # Parse the file.

  while (<FILE>)
  {
    @line = split(/[ \n\r\t\"\'=]+/, $_);
    if (@line[0] eq "") { shift(@line); }  # Leading whitespace. He.

    if (@line[0] eq "GATEWAY" && not is_line_comment_start(@line[1]))
    { $cf_gateway = @line[1]; }
    elsif (@line[0] eq "GATEWAYDEV" && not is_line_comment_start(@line[1]))
    { $cf_interface = @line[1]; }
  }

  close(FILE);
}


# SuSE style /etc/rc.config
#
# <filtered lines>
# FQHOSTNAME="<fully qualified hostname>"
# SEARCHLIST="<space separated list of searchdomains>"
# NAMESERVER="<space separated list of nameservers>"
# <filtered lines>
#
# Determines the local hostname.domain, searchdomains and nameservers.
# BEWARE: This is actually a sourced shell script. We rely on some lenience
# from the user (and the distro) to be able to parse it correctly. The file
# is read by SuSE configuration tools and translated to NET-3 config files
# at strategic times.
#
# Exists: SuSE 6.3
#
# Absent: Red Hat 6.x, Caldera 2.4, TurboLinux 6.0, Mandrake 7.0, SunOS 5.7

sub read_rc_config
{
  my $FILE;

  # Find the file.

  $FILE = open_read_from_names(@rc_config_names);
  if (not FILE) { return; }  # We didn't find it.

  # Parse the file.

  while (<FILE>)
  {
    @line = split(/[ \n\r\t\"\'=]+/, $_);  # Handles quoted arguments.
    if (@line[0] eq "") { shift(@line); }  # Leading whitespace. He.

    if (@line[0] eq "NETDEV_0" && not is_line_comment_start(@line[1]))
    {
      $cf_interface = @line[1];
    }
    elsif (@line[0] eq "IPADDR_0")
    {
      $cf_hostip = @line[1];
    }
    elsif (@line[0] eq "IFCONFIG_0")
    {
      shift @line;

      while (@line)
      {
        if (is_line_comment_start(@line[0])) { last; }
	
	if (@line[0] eq "broadcast")
	{
	  # Calculate this ourselves.

	  shift @line;
	  shift @line;
	}
	elsif (@line[0] eq "netmask")
	{
	  $cf_netmask = @line[1];
	  shift @line;
	  shift @line;
	}
	elsif (@line[0] eq "bootp")
	{
	  last;
	}
	elsif (@line[0] =~ /dhcp.*/)
	{
	  last;
	}
        elsif (@line[0] ne "") { $cf_hostip = @line[0]; shift @line; }
	else { shift @line; }
      }
    }
  }

  close(FILE);
}


# Samba /etc/smb.conf
#
# <filtered lines>
# workgroup = <workgroup>
# server string = <description>
# <filtered lines>
#
# Exists: (Wherever Samba is installed)
#
# Absent: (Wherever Samba is not installed)

sub read_smb_conf
{
  my $FILE;
  my $section = "";
  my $path = "", $enabled = 1, $public = 0, $browseable = 0, $comment = "",
     $writeable = 0, $printable = 0;

  # Find the file.

  $FILE = open_read_from_names(@smb_conf_names);
  if (not FILE) { return; }  # We didn't find it.

  # Parse the file.

  while (<FILE>)
  {
    @line = split(/[ \n\r\t=]+/, $_);
    if (@line[0] eq "") { shift(@line); }  # Leading whitespace. He.

    if (join(' ', @line) =~ /^\[.*\]/)
    {
      # New section. If last section was a share, store it in global
      # records, then flush locals for next instance.

      if (($path ne "") && !$printable)
      {
        push @cf_exports_list, "smb";        # Type
        push @cf_exports_list, $path;        # Path
        push @cf_exports_list, $section;     # Name
        push @cf_exports_list, $comment;     # Comment
        push @cf_exports_list, $enabled;     # Enabled
        push @cf_exports_list, $browseable;  # Browseable
        push @cf_exports_list, $public;      # Public
        push @cf_exports_list, $writeable;   # Writeable
      }

      $path = ""; $comment = ""; $enabled = 1; $public = 0; $browseable = 0;
      $writeable = 0; $printable = 0;

      ($section) = (join(' ', @line) =~ /^\[(.*)\]/);
    }
    elsif (@line[0] eq "workgroup" && not is_line_comment_start(@line[1]))
    {
      $cf_workgroup = @line[1];
    }
    elsif (@line[0] eq "path" && not is_line_comment_start(@line[1]))
    {
      $path = @line[1];
    }
    elsif (@line[0] eq "comment" && not is_line_comment_start(@line[1]))
    {
      shift @line;
      $comment = join(' ', @line);
    }
    elsif (@line[0] eq "available" && not is_line_comment_start(@line[1]))
    {
      $enabled = read_boolean(@line[1]);
    }
    elsif (@line[0] =~ /^browse?able/ && not is_line_comment_start(@line[1]))
    {
      $browseable = read_boolean(@line[1]);
    }
    elsif (@line[0] eq "public" && not is_line_comment_start(@line[1]))
    {
      $public = read_boolean(@line[1]);
    }
    elsif (@line[0] eq "guest" && @line[1] eq "ok" &&
           not is_line_comment_start(@line[2]))
    {
      $public = read_boolean(@line[2]);
    }
    elsif (@line[0] =~ /write?able/ && not is_line_comment_start(@line[1]))
    {
      $writeable = read_boolean(@line[1]);
    }
    elsif (@line[0] eq "printable" && not is_line_comment_start(@line[1]))
    {
      $printable = read_boolean(@line[1]);
    }
  }

  # Push the last share found, if any.

  if (($path ne "") && !$printable)
  {
    push @cf_exports_list, "smb";        # Type
    push @cf_exports_list, $path;        # Path
    push @cf_exports_list, $section;     # Name
    push @cf_exports_list, $comment;     # Comment
    push @cf_exports_list, $enabled;     # Enabled
    push @cf_exports_list, $browseable;  # Browseable
    push @cf_exports_list, $public;      # Public
    push @cf_exports_list, $writeable;   # Writeable
  }

  close(FILE);
}


sub write_smb_conf
{
  my $INFILE, $OUTFILE;
  my $section = "", $printable = 0, $wrote_security = 0;
  my @buf = ();

  ($INFILE, $OUTFILE) = open_filter_write_from_names(@smb_conf_names);
  if (not OUTFILE) { return; }  # No point if we can't write.

  while (<INFILE>)
  {
    @line = split(/[ \n\r\t=]+/, $_);
    if (@line[0] eq "") { shift(@line); }  # Leading whitespace. He.

    if (join(' ', @line) =~ /^\[.*\]/)
    {
      # New section. If last section was a printable, leave it alone
      # (output it as-is).

      if ($printable || $section =~ /^global/i || $section =~ /^homes/i)
      {
        print OUTFILE join('', @buf);
        $printable = 0;
      }
      
      if ($section =~ /^global/i && !$wrote_security)
      {
        print OUTFILE "   security = share\n";
      }

      ($section) = (join(' ', @line) =~ /^\[(.*)\]/);
      @buf = ();
      push @buf, $_;
    }
    elsif (@line[0] eq "printable" && not is_line_comment_start(@line[1]))
    {
      $printable = read_boolean(@line[1]);
      push @buf, $_;
    }
    elsif (@line[0] eq "security" && not is_line_comment_start(@line[1]) &&
           $section =~ /^global/i)
    {
      push @buf, "   security = share\n";
      $wrote_security = 1;
    }
    else
    {
      push @buf, $_;
    }
  }
  
  # Now, print our exports at the end.
  
  my @shares = @cf_exports_list;
  
  while (@shares)
  {
    if (@shares[0] ne "")
    {
      if (@shares[0] eq "smb")
      {
        print OUTFILE "\n[@shares[2]]\n",
                      "   path = @shares[1]\n",
                      "   available = ", print_boolean_yesno(@shares[4]), "\n",
                      "   browseable = ", print_boolean_yesno(@shares[5]), "\n",
                      "   writable = ", print_boolean_yesno(@shares[7]), "\n",
                      "   public = ", print_boolean_yesno(@shares[6]), "\n";

        if (@shares[3] ne "") { print OUTFILE "   comment = @shares[3]\n"; }

        shift @shares; shift @shares; shift @shares; shift @shares;
        shift @shares; shift @shares; shift @shares; shift @shares;
      }
      elsif (@shares[0] eq "nfs")
      { shift @shares; shift @shares; shift @shares; }
    }
  }
  
  close(INFILE);
  close(OUTFILE);
}


# /etc/fstab
#
# <device> <mount point> <filesystem> <option,option,...> <dump> <fsck>
# <device> <mount point> smbfs        defaults            0      0
# <device> <mount point> nfs          defaults            0      0
# <device> <mount point> <filesystem> <option,option,...> <dump> <fsck>
#
# Exists: (Presumably everywhere)
#
# Absent: (Presumably nowhere)

sub read_fstab
{
  my $FILE;

  # Find the file.

  $FILE = open_read_from_names(@fstab_names);
  if (not FILE) { return; }  # We didn't find it.

  # Parse the file.

  while (<FILE>)
  {
    my $host, $path, $type;

    @line = split(/[ \n\r\t]+/, $_);

    if (@line[0] eq "") { shift @line; }
    if (@line[0] eq "") { next; }
    if (is_line_comment_start(@line[0])) { next; }
    ($device, $dir, $fs, $options) = @line;

    $host = ""; $path = "";
    ($password) = ($options =~ /password=([^ \t,]*)/);
    ($user) = ($user =~ /username=([^ \t,]*)/);
    if ($dir eq "none") { $dir = ""; }

    if ($fs eq "smbfs")
    {
      ($host) = ($device =~ /[\/\\]*([^\/\\]+)/);
      ($path) = ($device =~ /[\/\\]*[^\/\\]+(.*)/);
      $path =~ tr/\\/\//;
      $type = "smb";
    }
    elsif ($fs eq "nfs")
    {
      ($host) = ($device =~ /(.*):/);
      ($path) = ($device =~ /.*:(.*)/);
      $type = "nfs";
    }

    # (Find and update) or (add) our internal mount record.

    if ($host ne "" && $path ne "")
    {
      $found = 0;
      for ($i = 0; @cf_shares_list[$i] ne ""; )
      {
        if ((@cf_shares_list[$i] =~ /^$host$/i) == 1 &&
            (@cf_shares_list[$i + 1] =~ /^$path$/i) == 1 &&
            (@cf_shares_list[$i + 5] eq $type))
        {
          # Found. Flag it as mounted and set extra mount parameters.

          if (!($options =~ /noauto/)) { @cf_shares_list[$i + 3] = 1; }  # Mounted
          @cf_shares_list[$i + 10] = 1;  # Listed
          @cf_shares_list[$i + 6] = $user;
          @cf_shares_list[$i + 7] = $password;
          @cf_shares_list[$i + 8] = $dir;
          $found = 1; last;
        }

        $i = $i + 11;  # Host, path, comment, mounted, detected, type, user,
                       # password, point, printed, listed.
      }
      
      if (!$found)
      {
        push(@cf_shares_list, $host);      # Host
        push(@cf_shares_list, $path);      # Path
        push(@cf_shares_list, "");         # Comment
        if (!($options =~ /noauto/)) { push(@cf_shares_list, 1); }  # Mounted
        else { push(@cf_shares_list, 0); }                          # Mounted
        push(@cf_shares_list, 0);          # Detected
        push(@cf_shares_list, $type);      # Type
        push(@cf_shares_list, $user);      # User
        push(@cf_shares_list, $password);  # Password
        push(@cf_shares_list, $dir);       # Point
        push(@cf_shares_list, 0);          # Printed
        push(@cf_shares_list, 1);          # Listed
      }
    }
  }

  close(FILE);
}


sub write_fstab
{
  my $INFILE, $OUTFILE;
  
  ($INFILE, $OUTFILE) = open_filter_write_from_names(@fstab_names);
  if (not OUTFILE) { return; }  # No point if we can't write.

  while (<INFILE>)
  {
    my $host, $path, $type;

    @line = split(/[ \n\r\t]+/, $_);

    if (@line[0] eq "") { shift @line; }
    if (@line[0] eq "") { print OUTFILE; next; }
    if (is_line_comment_start(@line[0])) { print OUTFILE; next; }
    ($device, $dir, $fs, $options) = @line;

    $host = ""; $path = "";
    ($password) = ($options =~ /password=([^ \t,]*)/);
    ($user) = ($user =~ /username=([^ \t,]*)/);

    if ($fs eq "smbfs")
    {
      ($host) = ($device =~ /[\/\\]*([^\/\\]+)/);
      ($path) = ($device =~ /[\/\\]*[^\/\\]+(.*)/);
      $path =~ tr/\\/\//;
      $type = "smb";
    }
    elsif ($fs eq "nfs")
    {
      ($host) = ($device =~ /(.*):/);
      ($path) = ($device =~ /.*:(.*)/);
      $type = "nfs";
    }
    else
    {
      print OUTFILE; next;
    }

    # Try to find a corresponding internal mount record and insert it here.

    if ($host ne "" && $path ne "")
    {
      $found = 0;
    
      for ($i = 0; @cf_shares_list[$i] ne ""; )
      {
        if ((@cf_shares_list[$i] =~ /^$host$/i) == 1 &&
            (@cf_shares_list[$i + 1] =~ /^$path$/i) == 1 &&
            (@cf_shares_list[$i + 5] eq $type))
        {
          # Found. Write it out.
          
          if (!(@cf_shares_list[$i + 10]))
          {
            # Stay unlisted.
          }
          elsif ($type eq "smb")
          {
            # FIXME: The fmask here needs to be user-controllable through
            # a multiple-choice interface. It's too permissive right now.

            print OUTFILE "//@cf_shares_list[$i]@cf_shares_list[$i + 1] ";

            if (@cf_shares_list[$i + 8] ne "") { print OUTFILE "@cf_shares_list[$i + 8]"; }
            else { print OUTFILE "none"; }

            print OUTFILE " smbfs username=@cf_shares_list[$i + 6],",
                          "password=@cf_shares_list[$i + 7],fmask=0777";
            if (!(@cf_shares_list[$i + 3])) { print OUTFILE ",noauto"; }
            print OUTFILE " 0 0\n";
          }
          elsif ($type eq "nfs")
          {
            print OUTFILE "@cf_shares_list[$i]:@cf_shares_list[$i + 1] ";

            if (@cf_shares_list[$i + 8] ne "") { print OUTFILE "@cf_shares_list[$i + 8]"; }
            else { print OUTFILE "none"; }
            
            print OUTFILE " nfs ";

            if (!(@cf_shares_list[$i + 3])) { print OUTFILE "noauto"; }
            else { print OUTFILE "defaults"; }
            print OUTFILE " 0 0\n";
          }
          else
          {
            # Unsupported share type. This is actually caught earlier.
          }

          $found = 1;
          @cf_shares_list[$i + 9] = 1;  # Printed
        }

        $i = $i + 11;  # Host, path, comment, mounted, detected, type, user,
                       # password, point, printed, listed.
      }

      if (!$found) { print OUTFILE; }
    }
  }

  for ($i = 0; @cf_shares_list[$i] ne ""; )
  {
    if (!(@cf_shares_list[$i + 9]))
    {
      # Not already printed. Do it now.

      if (!(@cf_shares_list[$i + 10]))
      {
        # Stay unlisted.
      }
      elsif (@cf_shares_list[$i + 5] eq "smb")
      {
        # FIXME: The fmask here needs to be user-controllable through
        # a multiple-choice interface. It's too permissive right now.

        print OUTFILE "//@cf_shares_list[$i]@cf_shares_list[$i + 1] ";

        if (@cf_shares_list[$i + 8] ne "") { print OUTFILE "@cf_shares_list[$i + 8]"; }
        else { print OUTFILE "none"; }

        print OUTFILE " smbfs ",
                      "username=@cf_shares_list[$i + 6],",
                      "password=@cf_shares_list[$i + 7],fmask=0777";
        if (!(@cf_shares_list[$i + 3])) { print OUTFILE ",noauto"; }
        print OUTFILE " 0 0\n";
      }
      elsif (@cf_shares_list[$i + 5] eq "nfs")
      {
        print OUTFILE "@cf_shares_list[$i]:@cf_shares_list[$i + 1] ";

        if (@cf_shares_list[$i + 8] ne "") { print OUTFILE "@cf_shares_list[$i + 8]"; }
        else { print OUTFILE "none"; }

        print OUTFILE " nfs ";

        if (!(@cf_shares_list[$i + 3])) { print OUTFILE "noauto"; }
        else { print OUTFILE "defaults"; }
        print OUTFILE " 0 0\n";
      }
      else
      {
        # Unsupported share type. This is actually caught earlier.
      }

      @cf_shares_list[$i + 9] = 1;  # Printed
    }

    $i = $i + 11;  # Host, path, comment, mounted, detected, type, user,
                   # password, point, printed, listed.
  }

  close(INFILE);
  close(OUTFILE);
}


# /etc/exports
#
# <path> <client spec>(<option>,<option>,...) <client spec>(...) ...
# <path> <client spec>(<option>,<option>,...) <client spec>(...) ...
# ...
#
# Exists: (Presumably everywhere)
#
# Absent: (Presumably nowhere)

sub read_exports
{
  my $FILE;

  # Find the file.

  $FILE = open_read_from_names(@exports_names);
  if (not FILE) { return; }  # We didn't find it.

  # Parse the file.

  while (<FILE>)
  {
    my $host, $clients = [];

    @line = split(/[ \n\r\t]+/, $_);

    if (@line[0] eq "") { shift @line; }
    if (@line[0] eq "") { next; }
    if (is_line_comment_start(@line[0])) { next; }

    $path = @line[0]; shift @line;
    push @cf_exports_list, "nfs";  # Type
    push @cf_exports_list, $path;  # Path

    for $client (@line)
    {
      ($spec, $options) = ($client =~ /^([^\(]+)\(([^\)]+)/);
      push @$clients, $spec;                        # Spec
      if ($options =~ /rw/) { push @$clients, 1; }  # Writeable
      else                  { push @$clients, 0; }  # Writeable
    }

    push @cf_exports_list, $clients;  # Client patterns and options
  }

  close(FILE);
}


sub write_exports
{
  my $FILE;

  # Find the file.

  $FILE = open_write_from_names(@exports_names);
  if (not FILE) { return; }

  # We rewrite everything, as we have complete command of the things to go
  # in this file.

  my @shares = @cf_exports_list;

  while (@shares)
  {
    if (@shares[0] ne "")
    {
      if (@shares[0] eq "smb")
      {
        shift @shares; shift @shares; shift @shares; shift @shares;
        shift @shares; shift @shares; shift @shares; shift @shares;
      }
      elsif (@shares[0] eq "nfs")
      {
        print FILE "@shares[1]";  # Path

        my $clients = @shares[2];
        while (@$clients)
        {
          if (@$clients[0] ne "")
          {
            print FILE " @$clients[0]";               # Pattern
            if (@$clients[1]) { print FILE "(rw)"; }  # Writeable
          }
          shift @$clients; shift @$clients;
        }

        print FILE "\n";
        shift @shares; shift @shares; shift @shares;
      }
    }
  }
  
  close(FILE);
}


# --- XML parsing --- #


# Scan XML from standard input to an internal tree.

sub xml_parse
{
  # Scan XML to tree.

  $tree = xml_scan;

  # Walk the tree recursively and extract configuration parameters.
  # This is the top level - find and enter the toplevel tag.

  while (@$tree)
  {
    if (@$tree[0] eq "shares") { xml_parse_toplevel(@$tree[1]); }

    shift @$tree;
    shift @$tree;
  }

  return($tree);
}


sub xml_parse_toplevel
{
  my $tree = @_[0];

  shift @$tree;  # Skip attributes.

  while (@$tree)
  {
    if (@$tree[0] eq "import") { xml_parse_import(@$tree[1]); }
    elsif (@$tree[0] eq "export") { xml_parse_export(@$tree[1]); }

    shift @$tree;
    shift @$tree;
  }
}

sub xml_parse_import
{
  my $tree = @_[0];
  my $type = "", $host = "", $path = "", $comment = "", $user = "",
     $password = "", $mounted = 0, $detected = 0, $point = "", $listed = 0;

  $type = @$tree[0]->{type};
  shift @$tree;
  
  while (@$tree)
  {
    if (@$tree[0] eq "host")        { $host = xml_get_word(@$tree[1]); }
    elsif (@$tree[0] eq "path")     { $path = xml_get_word(@$tree[1]); }
    elsif (@$tree[0] eq "user")     { $user = xml_get_text(@$tree[1]); }
    elsif (@$tree[0] eq "password") { $password = xml_get_text(@$tree[1]); }
    elsif (@$tree[0] eq "comment")  { $comment = xml_get_text(@$tree[1]); }
    elsif (@$tree[0] eq "point")    { $point = xml_get_word(@$tree[1]); }
    elsif (@$tree[0] eq "mounted")  { $mounted = xml_parse_mounted(@$tree[1]); }
    elsif (@$tree[0] eq "detected") { $detected = xml_parse_detected(@$tree[1]); }
    elsif (@$tree[0] eq "listed")   { $listed = xml_parse_listed(@$tree[1]); }

    shift @$tree;
    shift @$tree;
  }

  push(@cf_shares_list, $host);      # Host
  push(@cf_shares_list, $path);      # Path
  push(@cf_shares_list, $comment);   # Comment
  push(@cf_shares_list, $mounted);   # Mounted
  push(@cf_shares_list, $detected);  # Detected
  push(@cf_shares_list, $type);      # Type
  push(@cf_shares_list, $user);      # User
  push(@cf_shares_list, $password);  # Password
  push(@cf_shares_list, $point);     # Point
  push(@cf_shares_list, 0);          # Printed
  push(@cf_shares_list, $listed);    # Listed
}

sub xml_parse_mounted
{
  my $tree = @_[0];

  # Check attribute; 'yes', 'true', 'no', 'false'.

  return(read_boolean(@$tree[0]->{state}));
}


sub xml_parse_detected
{
  my $tree = @_[0];

  # Check attribute; 'yes', 'true', 'no', 'false'.

  return(read_boolean(@$tree[0]->{state}));
}


sub xml_parse_listed
{
  my $tree = @_[0];

  # Check attribute; 'yes', 'true', 'no', 'false'.

  return(read_boolean(@$tree[0]->{state}));
}


sub xml_parse_export
{
  my $tree = @_[0];
  my $type = "";

  $type = @$tree[0]->{type};
  shift @$tree;
  
  if ($type eq "nfs")
  {
    my $path = "", $clients = [];
    
    while (@$tree)
    {
      if (@$tree[0] eq "path")          { $path = xml_get_word(@$tree[1]); }
      elsif (@$tree[0] eq "allow")      { push(@$clients, xml_parse_allow(@$tree[1])); }

      shift @$tree;
      shift @$tree;
    }
    
    if ($path ne "")
    {
      push @cf_exports_list, "nfs";     # Type
      push @cf_exports_list, $path;     # Path
      push @cf_exports_list, $clients;  # Clients
    }
  }
  elsif ($type eq "smb")
  {
    my $name = "", $path = "", $comment = "", $enabled = 0, $browseable = 0,
       $public = 0, $writeable = 0;

    while (@$tree)
    {
      if (@$tree[0] eq "name")          { $name = xml_get_word(@$tree[1]); }
      elsif (@$tree[0] eq "path")       { $path = xml_get_word(@$tree[1]); }
      elsif (@$tree[0] eq "comment")    { $comment = xml_get_text(@$tree[1]); }
      elsif (@$tree[0] eq "enabled")    { $enabled = xml_parse_enabled(@$tree[1]); }
      elsif (@$tree[0] eq "browse")     { $browseable = xml_parse_browseable(@$tree[1]); }
      elsif (@$tree[0] eq "public")     { $public = xml_parse_public(@$tree[1]); }
      elsif (@$tree[0] eq "write")      { $writeable = xml_parse_writeable(@$tree[1]); }

      shift @$tree;
      shift @$tree;
    }

    if ($path ne "")
    {
      push @cf_exports_list, "smb";        # Type
      push @cf_exports_list, $path;        # Path
      push @cf_exports_list, $name;        # Name
      push @cf_exports_list, $comment;     # Comment
      push @cf_exports_list, $enabled;     # Enabled
      push @cf_exports_list, $browseable;  # Browseable
      push @cf_exports_list, $public;      # Public
      push @cf_exports_list, $writeable;   # Writeable
    }
  }
  else
  {
    # Unsupported share type.
    
    return;
  }
}


sub xml_parse_allow
{
  my $tree = @_[0];
  my $pattern = "", $write = 0;
  my @list;

  shift @$tree;  # No attributes.

  while (@$tree)
  {
    if (@$tree[0] eq "pattern")       { $pattern = xml_get_word(@$tree[1]); }
    elsif (@$tree[0] eq "write")      { $write = xml_parse_writeable(@$tree[1]); }

    shift @$tree;
    shift @$tree;
  }

  push @list, $pattern;
  push @list, $write;
  return @list;
}


sub xml_parse_enabled
{
  my $tree = @_[0];

  # Check attribute; 'yes', 'true', 'no', 'false'.

  return(read_boolean(@$tree[0]->{state}));
}


sub xml_parse_browseable
{
  my $tree = @_[0];

  # Check attribute; 'yes', 'true', 'no', 'false'.

  return(read_boolean(@$tree[0]->{state}));
}


sub xml_parse_public
{
  my $tree = @_[0];

  # Check attribute; 'yes', 'true', 'no', 'false'.

  return(read_boolean(@$tree[0]->{state}));
}


sub xml_parse_writeable
{
  my $tree = @_[0];

  # Check attribute; 'yes', 'true', 'no', 'false'.

  return(read_boolean(@$tree[0]->{state}));
}


# Compresses node into a word and returns it.

sub xml_get_word
{
  my $tree = @_[0];

  shift @$tree;  # Skip attributes.

  while (@$tree)
  {
    if (@$tree[0] == 0)
    {
      my $retval;

      ($retval = @$tree[1]) =~ tr/ \n\r\t\f//d;
      $retval = xml_entities_to_plain(\$retval);
      return($retval);
    }

    shift @$tree;
    shift @$tree;
  }

  return("");
}


# Replaces misc. whitespace with spaces and returns text.

sub xml_get_text
{
  my $tree = @_[0];

  shift @$tree;  # Skip attributes.

  while (@$tree)
  {
    if (@$tree[0] = 0)
    {
      ($retval = @$tree[1]) =~ tr/\n\r\t\f/    /;
      $retval = xml_entities_to_plain(\$retval);
      return($retval);
    }

    shift @$tree;
    shift @$tree;
  }
}


# --- XML printing --- #


sub xml_print
{
  print "<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>\n";
  print "<!DOCTYPE shares []>\n\n";
  print "<shares>\n";
  enter;

  vspace;
  indent; print "<!-- Configuration starts here -->\n";
  vspace;
  indent; print "<!-- Imports, listed and potentials -->\n";
  vspace;

  my @shares = @cf_shares_list;

  while (@shares)
  {
    if (@shares[0] ne "")
    {
      vspace;
      indent; print "<import type='@shares[5]'>\n";
      enter;

      @shares[0] = xml_plain_to_entities(\@shares[0]);
      @shares[1] = xml_plain_to_entities(\@shares[1]);
      @shares[2] = xml_plain_to_entities(\@shares[2]);
      @shares[6] = xml_plain_to_entities(\@shares[6]);
      @shares[7] = xml_plain_to_entities(\@shares[7]);

      indent; print "<host>@shares[0]</host>\n";
      indent; print "<path>@shares[1]</path>\n";
      if (@shares[6] ne "") { indent; print "<user>@shares[6]</user>\n"; }
      if (@shares[7] ne "") { indent; print "<password>@shares[7]</password>\n"; }
      if (@shares[2] ne "") { indent; print "<comment>@shares[2]</comment>\n"; }
      if (@shares[8] ne "") { indent; print "<point>@shares[8]</point>\n"; }

      indent;

      print "<mounted state='";
      print print_boolean_truefalse(@shares[3]);
      print "'/>";

      print "<listed state='";
      print print_boolean_truefalse(@shares[10]);
      print "'/>";

      print "<detected state='";
      print print_boolean_truefalse(@shares[4]);
      print "'/>\n";

      leave;
      indent; print "</import>\n";
    }
    
    shift @shares; shift @shares; shift @shares; shift @shares; shift @shares;
    shift @shares; shift @shares; shift @shares; shift @shares; shift @shares;
    shift @shares;
  }

  vspace;
  indent; print "<!-- Exports -->\n";
  vspace;
  
  my @shares = @cf_exports_list;
  
  while (@shares)
  {
    if (@shares[0] ne "")
    {
      vspace;
      indent; print "<export type='@shares[0]'>\n";
      enter;

      indent; print "<path>@shares[1]</path>\n";

      if (@shares[0] eq "smb")
      {
        indent; print "<name>@shares[2]</name>\n";
        if (@shares[3] ne "") { indent; print "<comment>@shares[3]</comment>\n"; }

        indent;
        print "<enabled state='", print_boolean_truefalse(@shares[4]), "'/>";
        print "<browse state='", print_boolean_truefalse(@shares[5]), "'/>";
        print "<public state='", print_boolean_truefalse(@shares[6]), "'/>\n";
        indent;
        print "<write state='", print_boolean_truefalse(@shares[7]), "'/>\n";

        shift @shares; shift @shares; shift @shares; shift @shares;
        shift @shares; shift @shares; shift @shares; shift @shares;
      }
      elsif (@shares[0] eq "nfs")
      {
        my $clients = @shares[2];
        while (@$clients)
        {
          if (@$clients[0] ne "")
          {
            indent; print "<allow><pattern>@$clients[0]</pattern><write state='";
            print print_boolean_truefalse(@$clients[1]);
            print "'/></allow>\n";
          }
          shift @$clients; shift @$clients;
        }

        shift @shares; shift @shares; shift @shares;
      }

      leave;
      indent; print "</export>\n";
    }
    
  }
  
  vspace;
  indent; print "<!-- End of configuration -->\n";
  vspace;

  leave;
  print "</shares>\n";
}


# --- Get (read) config --- #


sub get_interfaces
{
  my $if_cmd;
  my $iftext;
  my @list;

  # Get a list of all interfaces, both configured and unconfigured.
  # Should work on both GNU and Solaris.

  $if_cmd = locate_tool("ifconfig");
  $iftext = `$if_cmd -a 2>/dev/null`;

  @list = ($iftext =~ /^([a-z0-9]+)[ :\t].*/mg);

  if (not @list)
  {
    if ($verbose) { print STDERR "Warning: Couldn't find any network devices.\n"; }
    return(0);
  }
  
  # Remove loopback and dummy interfaces from the list.
  
  for $elem (@list)
  {
    if (!($elem =~ /^(lo)|(dummy).*/)) { push(@cf_interface_list, $elem); }
  }
}


sub get_host_mounts
{
  my $ping_tool, $showmount_tool, $nmblookup_tool, $smbclient_tool;
  my @hosts;
  my $i, $j;

  $ping_tool = locate_tool("ping");
  $showmount_tool = locate_tool("showmount");
  $nmblookup_tool = locate_tool("nmblookup");
  $smbclient_tool = locate_tool("smbclient");

  $broadcast_ip = ip_calc_broadcast($cf_hostip, $cf_netmask);

  # Map subnet.

  open(PING_HD, "$ping_tool -b -c 2 -n $broadcast_ip 2>/dev/null |");
  while (<PING_HD>)
  {
    if (/bytes from/)
    {
      $ip = join('.', ($_ =~ /from ([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/));
      push_unique(\@hosts, $ip);
    }
  }
  close(PING_HD);
  
  if ($verbose) { print STDERR "Subnet ping found ", $#hosts + 1, " hosts.\n"; }
  print_progress;

  # List NFS shares.

  $i = 0; $j = 0;
  for $host (@hosts)
  {
    if ($host eq $cf_hostip) { next; }
    open(MOUNTS_HD, "$showmount_tool --directories --no-headers $host 2>/dev/null |");
    while (<MOUNTS_HD>)
    {
      push(@cf_shares_list, $host);                          # Host
      push(@cf_shares_list, ($_ =~ /[ \t]*([^ \t\n\r]+)/));  # Path
      push(@cf_shares_list, "");                             # Comment
      push(@cf_shares_list, 0);                              # Mounted
      push(@cf_shares_list, 1);                              # Detected
      push(@cf_shares_list, "nfs");                          # Type
      push(@cf_shares_list, "");                             # User
      push(@cf_shares_list, "");                             # Password
      push(@cf_shares_list, "");                             # Mount point
      push(@cf_shares_list, 0);                              # Flag: Printed.
      push(@cf_shares_list, 0);                              # Listed.
      
      $j++;
    }
    close(MOUNTS_HD);

    $i++;
  }

  if ($verbose) { print STDERR "Found $j NFS exports on $i hosts.\n"; }
  print_progress;

  # List SMB shares if applicable.

  if ($cf_workgroup ne "")
  {
    my $smb_master_ip, $smb_master_name;
    my @smb_hosts;
    
    if ($verbose) { print STDERR "Doing SMB detection in workgroup $cf_workgroup.\n"; }

    # Find the workgroup master.
  
    open(FD, "$nmblookup_tool -M -S $cf_workgroup |");
    while (<FD>)
    {
      if (/^[a-zA-Z0-9.]+ $cf_workgroup</)
      {
        ($smb_master_ip) = ($_ =~ /(^[a-zA-Z0-9.]+)/);
      }
      elsif (/^[ \t]+[A-Za-z0-9]+[ \t]+</)
      {
        ($smb_master_name) = ($_ =~ /^[ \t]+([A-Za-z0-9]+)/);
        last;
      }
    }
    close(FD);

    if ($verbose)
    {
      if ($smb_master_name ne "") { print STDERR "Workgroup master is $smb_master_name ($smb_master_ip).\n"; }
      else { print STDERR "No workgroup master found.\n"; }
    }

    print_progress;

    # List computers.

    open(FD, "$smbclient_tool -N -U % -L $smb_master_name -I $smb_master_ip |");
    while (<FD>) { if (/^[ \t]+Server[ \t]+Comment/) { last; } }

    while (<FD>)
    {
      if ($_ eq "" || $_ eq "\n") { last; }
      elsif (/^[ \t]+[^ \t-]+/)
      {
        push_unique(\@smb_hosts, ($_ =~ /^[ \t]+([^ \t-]+)/));
      }
    }
    close(FD);

    if ($verbose)
    {
      if ($#smb_hosts + 1) { print STDERR "Master reported ", $#smb_hosts + 1, " hosts in workgroup.\n"; }
      else { print STDERR "No hosts reported by master - asking others.\n"; }
    }

    if (!@smb_hosts)
    {
      # The master browser didn't list any hosts for some reason.
      # This happens fairly often (but randomly) on my network, so we work
      # around it by asking some other hosts to make sure.

      for $host (@hosts)
      {
        if ($host eq $smb_master_ip) { next; }  # Already asked the fucker.

        # Typically only Unix machines (samba) will understand these requests,
        # since they have service entries for their own IPs, whereas Windows
        # boxen don't.
        
        if ($verbose) { print STDERR "Asking $host for host list"; }

        open(FD, "$smbclient_tool -N -U % -L $host -I $host |");
        while (<FD>) { if (/^[ \t]+Server[ \t]+Comment/) { last; } }
        
        while (<FD>)
        {
          if ($_ eq "" || $_ eq "\n") { last; }
          elsif (/^[ \t]+[^ \t-]+/)
          {
            push_unique(\@smb_hosts, ($_ =~ /^[ \t]+([^ \t-]+)/));
          }
        }
        close(FD);

        if (@smb_hosts)
        {
          if ($verbose) { print STDERR " - got ", $#smb_hosts + 1, " hosts.\n"; }
          last;
        }
        elsif ($verbose) { print STDERR " - failed.\n"; }
      }
    }

    # List shares on each computer.

    $i = 0; $j = 0;
    while (@smb_hosts)
    {
      open(FD, "$smbclient_tool -N -U % -L @smb_hosts[0] |");
      while (<FD>) { if (/^[ \t]+Sharename[ \t]+Type[ \t]+Comment/) { last; } }
      while (<FD>)
      {
        if ($_ eq "" || $_ eq "\n") { last; }
        elsif (/^[ \t]+[^ \t-]+[ \t]+Disk/)
        {
          ($path) = ($_ =~ /^[ \t]+([^ \t-]+)/);  # Path
          $path = "/\L$path";
          @smb_hosts[0] = "\L@smb_hosts[0]";

          push(@cf_shares_list, @smb_hosts[0]);                # Host
          push(@cf_shares_list, $path);                        # Path
          push(@cf_shares_list, ($_ =~ /^[ \t]+[^ \t-]+[ \t]+Disk[ \t]+(.*)$/));  # Comment
          push(@cf_shares_list, 0);                            # Mounted
          push(@cf_shares_list, 1);                            # Detected
          push(@cf_shares_list, "smb");                        # Type
          push(@cf_shares_list, "");                           # User
          push(@cf_shares_list, "");                           # Password
          push(@cf_shares_list, "");                           # Mount point
          push(@cf_shares_list, 0);                            # Flag: Printed
          push(@cf_shares_list, 0);                            # Listed
          
          $j++;
        }
      }
      close(FD);

      shift @smb_hosts;
      $i++;
    }
    
    if ($verbose) { print STDERR "Found $j SMB exports on $i hosts.\n"; }
    print_progress;
  }
  elsif ($verbose) { print STDERR "No workgroup configured - SMB scan skipped.\n"; }
}


sub get
{
  if ($progress) { $| = 1; print $progress_max . "\n"; }

  if ($verbose) { print STDERR "Getting system configuration, generating XML output.\n"; }
  if ($verbose) { print STDERR "Finding interfaces.\n"; }

  get_interfaces; print_progress;          # Needed for primary interface detection.
  read_rc_config;                          # Ditto.
  read_sysconfig_network;                  # Ditto.
  read_primary_interface;                  # IP subnet information.
  read_smb_conf; print_progress;           # SMB workgroup.
  get_host_mounts; print_progress;
  read_fstab;
  read_exports; print_progress;

  if ($verbose) { print STDERR "Printing XML.\n"; }
  if ($progress) { print "\n"; }
  xml_print;
}


# --- Set (write) config --- #


sub set_immediate
{
  my $exportfs_tool;
  my $mount_tool;
  my $umount_tool;

  $exportfs_tool = locate_tool("exportfs");
  $mount_tool = locate_tool("mount");
  $umount_tool = locate_tool("umount");

  # Update exports.

  if (-f "/etc/rc.d/init.d/smb")
  {
    if ($verbose) { print STDERR "Warning: SMB configuration reload failed.\n"; }
    if (system "/etc/rc.d/init.d/smb reload >/dev/null 2>/dev/null")
    {
      if ($verbose) { print STDERR "Warning: SMB restart failed.\n"; }
    }
    elsif ($verbose)
    {
      print STDERR "SMB restarted with new configuration.\n";
    }
  }
  elsif ($verbose)
  {
    print STDERR "Warning: Could not find a way to restart SMB services.\n";
  }

  if ($exportfs_tool eq "")
  {
    if ($verbose) { print STDERR "Warning: Could not reload NFS export tables.\n"; }
  }
  else
  {
    system "$exportfs_tool -a >/dev/null 2>/dev/null";
    if ($verbose) { print STDERR "NFS export tables reloaded.\n"; }
  }

  # Update imports.

  if (($mount_tool ne "") && ($umount_tool ne ""))
  {
    my @shares = @cf_shares_list;

    while (@shares)
    {
      if (@shares[0] ne "" && @shares[8] ne "")
      {
        if (@shares[3])
        {
          if ($verbose) { print STDERR "Mounting @shares[8].\n"; }
          system "$mount_tool @shares[8] >/dev/null 2>/dev/null";
        }
        else
        {
          if ($verbose) { print STDERR "Unmounting @shares[8].\n"; }
          system "$umount_tool @shares[8] >/dev/null 2>/dev/null";
        }
      }

      shift @shares; shift @shares; shift @shares; shift @shares; shift @shares;
      shift @shares; shift @shares; shift @shares; shift @shares; shift @shares;
      shift @shares;
    }
  }
  else
  {
    if ($verbose) { print STDERR "Warning: Could not find mount tools. No mounting done.\n"; }
  }
  
}


sub set
{
  if ($verbose) { print STDERR "Setting system configuration from XML input.\n"; }

  if ($verbose) { print STDERR "Parsing XML.\n"; }
  xml_parse;

  write_fstab;
  write_exports;
  write_smb_conf;

  if ($do_immediate)
  {
    if ($verbose) { print STDERR "Changing running configuration via local utilities.\n"; }
    set_immediate;
  }
}


# --- Filter config: XML in, XML out --- #


sub filter
{
  xml_parse;
  xml_print;
}


# --- Main --- #

$operation = "";  # Major operation user wants to perform. [get | set | filter]


sub set_operation
{
  if ($operation ne "")
  {
    print STDERR "Error: You may specify only one major operation.\n\n";
    print STDERR $Usage;
    exit(1);
  }

  $operation = @_[0];
}


# Process options.

while (@ARGV)
{
  if    (@ARGV[0] eq "--get"    || @ARGV[0] eq "-g") { set_operation("get"); }
  elsif (@ARGV[0] eq "--set"    || @ARGV[0] eq "-s") { set_operation("set"); }
  elsif (@ARGV[0] eq "--filter" || @ARGV[0] eq "-f") { set_operation("filter"); }
  elsif (@ARGV[0] eq "--help"   || @ARGV[0] eq "-h") { print $Usage; exit(0); }
  elsif (@ARGV[0] eq "--version")                    { print "$version\n"; exit(0); }
  elsif (@ARGV[0] eq "--prefix" || @ARGV[0] eq "-p")
  {
    if ($prefix ne "")
    {
      print STDERR "Error: You may specify --prefix only once.\n\n";
      print STDERR $Usage; exit(1);
    }

    $prefix = @ARGV[1];

    if ($prefix eq "")
    {
      print STDERR "Error: You must specify an argument to the --prefix option.\n\n";
      print STDERR $Usage; exit(1);
    }

    shift @ARGV;  # For the argument.
  }
  elsif (@ARGV[0] eq "--disable-immediate")           { $do_immediate = 0; }
  elsif (@ARGV[0] eq "--verbose" || @ARGV[0] eq "-v") { $verbose = 1; }
  elsif (@ARGV[0] eq "--progress")                    { $progress = 1; }
  else
  {
    print STDERR "Error: Unrecognized option '@ARGV[0]'.\n\n";
    print STDERR $Usage; exit(1);
  }

  shift @ARGV;
}


# Do our thing.

if    ($operation eq "get")    { get; }
elsif ($operation eq "set")    { set; }
elsif ($operation eq "filter") { filter; }
else
{
  print STDERR "Error: No operation specified.\n\n";
  print STDERR $Usage; exit(1);
}

