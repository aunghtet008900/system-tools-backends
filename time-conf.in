#!/usr/bin/env perl
#-*-perl-*-

# Time configurator. Designed to be architecture- and distribution independent.
#
# Copyright (C) 2000 Helix Code, Inc.
#
# Authors: Hans Petter Jansson <hpj@helixcode.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Best viewed with 100 columns of width.

# Configuration files affected:
#
# /etc/ntp.conf
# /etc/ntp/step-tickers
# /etc/localtime

# Running programs affected/used:
#
# date



require "___scriptsdir___/be.pl";



# --- Usage text --- #

my $Usage =<<"End_of_Usage;";
Usage: time-conf <--get | --set | --filter | --help>
                 [--prefix <location>] [--disable-immediate]
                 [--verbose] [--progress]

       Major operations (specify one of these):

       -g --get      Prints the current time configuration to standard
                     output, as as standalone XML document. The parameters
                     are read from the host\'s low-level configuration.

       -s --set      Updates the system time configuration from a standalone
                     XML document read from standard input. The format is
                     the same as for the document generated with --get.

       -f --filter   Reads XML configuration from standard input, parses it,
                     and writes the configurator\'s impression of it back to
                     standard output. Good for debugging and parsing tests.

       -h --help     Prints this page to standard output. That\'s all.

          --version  Prints version information to standard output.

       Modifiers (specify any combination of these):

       -p --prefix <location>  Specifies a directory prefix where the
                     configuration is looked for or stored. When storing
                     (with --set), directories and files may be created.

          --disable-immediate  With --set, prevents the configurator from
                     running any commands that make immediate changes to
                     the system configuration. Use with --prefix to make a
                     dry run that won\'t affect your configuration.

                     With --get, suppresses running of non-vital external
                     programs that might take a long time to finish.

       -v --verbose  Turns on diagnostic messages to standard error.

          --progress Prints progress information suitable for interactive
                     frontends to standard output. The progress information
                     is printed before any XML, and consists of a decimal
                     number saying how many dots to expect, followed by a
                     newline, and a running line of dots as the operation
                     progresses, followed by a newline after the last dot.
                     The dots generated can be more or less than the
                     number indicated on the first line.

End_of_Usage;

$version = "0.1.0";

$progress_max = 3;


# --- System config file locations --- #

# We list each config file type with as many alternate locations as possible.
# They are tried in array order. First found = used.

@ntp_conf_names =         ( "/etc/ntp.conf" );
@ntp_step_tickers_names = ( "/etc/ntp/step-tickers" );


# --- Internal configuration variables --- #

# Configuration is parsed/read to, and printed/written from, these temporary variables.

$cf_year = 0;
$cf_month = 0;
$cf_mday = 0;
$cf_hour = 0;
$cf_minute = 0;
$cf_second = 0;

$cf_timezone = "";

$cf_sync_active = 0;
@cf_servers = ();


# --- Configuration file manipulation --- #

# xntpd style /etc/ntp.conf
#
# <filtered lines>
# server <server>
# <filtered lines>
#
# Exists: Red Hat 6.x
#
# Absent:

sub read_ntp_conf
{
  local *FILE;
  
  # Find the file.
  
  *FILE = be_open_read_from_names(@ntp_conf_names);
  if (not *FILE) { return; }
  
  # Parse the file.
  
  while (<FILE>)
  {
    @line = split(/[ \n\r\t]+/, $_);
    if ($line[0] eq "") { shift(@line); }  # Leading whitespace.
    
    if ($line[0] eq "server" && $line[1] ne "127.127.1.0")  # Disregard loopback.
    { be_push_unique(\@cf_servers, $line[1]); }
  }
}


sub write_ntp_conf
{
  local (*INFILE, *OUTFILE);
  my $wrote_servers = 0;

  # Find the file.

  (*INFILE, *OUTFILE) = be_open_filter_write_from_names(@ntp_conf_names);
  if (not *OUTFILE) { return; }  # No point if we can't write.

  # Write the file, preserving as much as possible from INFILE.

  while (<INFILE>)
  {
    @line = split(/[ \n\r\t]+/, $_);
    if ($line[0] eq "") { shift(@line); }  # Leading whitespace.

    if ($line[0] eq "server")
    {
      if ($line[1] eq "127.127.1.0") { print OUTFILE; }
      elsif (!$wrote_servers)
      {
        for $elem (@cf_servers) { print OUTFILE "server $elem\n"; }
        $wrote_servers = 1;
      }
    }
    else { print OUTFILE; }
  }
  
  if (!$wrote_servers)
  {
    for $elem (@cf_servers) { print OUTFILE "server $elem\n"; }
    $wrote_servers = 1;
  }
  
  close(OUTFILE);
  if (*INFILE) { close(INFILE); }
}


# Red Hat style /etc/ntp/step-tickers
#
# <server>
# <server>
# ...
#
# This file is used as source for servers from which to sync the system
# clock before xntpd is started. In Red Hat, this is done because xntpd
# refuses to sync the clock if it is too much off.
#
# Exists: Red Hat 6.x
#
# Absent:

sub write_ntp_step_tickers
{
  local *FILE;

  # Find the file (it might very well not exist beforehand).

  *FILE = be_open_write_from_names(@ntp_step_tickers_names);
  if (not *FILE) { return; }

  # Write the file.

  for $elem (@cf_servers) { print FILE "$elem\n"; }

  close(FILE);
}


# Red Hat (?) style /etc/localtime
#
# Copied from /usr/share/zoneinfo/Etc/<match>, if found.
# TODO: Otherwise, we generate it ourselves.
#
# Exists: Red Hat 6.x
#
# Absent:

sub write_localtime
{
  my ($tz, $name);
  my $zonebase = "/usr/share/zoneinfo/Etc/";

  # Dirty tricks.

  $tz = $cf_timezone;
  $tz =~ tr/+-0//d;
  $tz = $tz * 1;
  
  if (!$tz) { $tz = "${zonebase}GMT"; }
	elsif ($tz == 33) { $tz = "${zonebase}Iran"; }
	elsif ($tz == 43) { $tz = "${zonebase}Asia/Kabul"; }
	elsif ($tz == 53) { $tz = "${zonebase}Asia/Calcutta"; }
	elsif ($tz == 63) { $tz = "${zonebase}Asia/Bangkok"; }
	elsif ($tz == 93) { $tz = "${zonebase}Australia/Darwin"; }
	elsif ($tz == 345) { $tz = "${zonebase}America/Guyana"; }
  elsif ($cf_timezone =~ /\+.*/) { $tz = "${zonebase}GMT+$tz"; }
  else { $tz = "${zonebase}GMT-$tz"; }

  if (stat($tz) ne "")
  {
    # Badly needs fixing & porting.

    $name = "/etc/localtime";

    if ($be_verbose)
    {
      (my $fullname = "$prefix/$name") =~ tr/\//\//s;
      print STDERR "Writing timezone configuration to \"$fullname\".\n";
    }

    ($name = "$prefix/$name") =~ tr/\//\//s;  # '//' -> '/'
    be_create_path($name);

    # Make a backup if the file already exists - if the user specified a prefix,
    # it might not.

    if (stat($name))
    {
      # NOTE: Might not work everywhere. Might be unsafe if the user is allowed
      # to specify a $name list somehow, in the future.

      system("cp $name $name.confsave >/dev/null 2>/dev/null");
    }

    # Replace the timezone info file.

    unlink $name;
    system("cp $tz $name >/dev/null 2>/dev/null");
  }
  
  # TODO: We might not find a corresponding GMT[+|-] zone. If we don't,
  # we'll have to make our own.
}


# --- XML parsing --- #


# Scan XML from standard input to an internal tree.

sub xml_parse
{
  # Scan XML to tree.

  $tree = &be_xml_scan;

  # Walk the tree recursively and extract configuration parameters.
  # This is the top level - find and enter the "networking" tag.

  while (@$tree)
  {
    if (@$tree[0] eq "time") { xml_parse_time(@$tree[1]); }

    shift @$tree;
    shift @$tree;
  }

  return($tree);
}


# <networking>...</networking>

sub xml_parse_time
{
  my $tree = $_[0];

  shift @$tree;  # Skip attributes.

  while (@$tree)
  {
    if    (@$tree[0] eq "year")     { $cf_year = be_xml_get_word(@$tree[1]); }
    elsif (@$tree[0] eq "month")    { $cf_month = be_xml_get_word(@$tree[1]); }
    elsif (@$tree[0] eq "monthday") { $cf_mday = be_xml_get_word(@$tree[1]); }
    elsif (@$tree[0] eq "hour")     { $cf_hour = be_xml_get_word(@$tree[1]); }
    elsif (@$tree[0] eq "minute")   { $cf_minute = be_xml_get_word(@$tree[1]); }
    elsif (@$tree[0] eq "second")   { $cf_second = be_xml_get_word(@$tree[1]); }
    elsif (@$tree[0] eq "timezone") { $cf_timezone = be_xml_get_word(@$tree[1]); }
    elsif (@$tree[0] eq "synchronization") { xml_parse_synchronization(@$tree[1]); }

    shift @$tree;
    shift @$tree;
  }

  if ($cf_timezone =~ /^(\+|-)0+$/) { $cf_timezone = "0000"; }  # GMT, eh?
}


sub xml_parse_synchronization
{
  my $tree = $_[0];

  $cf_sync_active = be_read_boolean(@$tree[0]->{active});
  shift @$tree;

  while (@$tree)
  {
    if (@$tree[0] eq "server")  { push_unique(\@cf_servers, be_xml_get_word(@$tree[1])); }
    
    shift @$tree;
    shift @$tree;
  }
}


# --- XML printing --- #


sub xml_print
{
  print "<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>\n";
  print "<!DOCTYPE time []>\n\n";
  print "<time>\n";
  be_xml_enter ();

  be_xml_vspace ();
  be_xml_print ("<!-- Configuration starts here -->\n");
  be_xml_vspace ();

  be_xml_print ("<year>$cf_year</year>\n");
  be_xml_print ("<month>$cf_month</month>\n");
  be_xml_print ("<monthday>$cf_mday</monthday>\n");
  
  be_xml_vspace ();
  
  be_xml_print ("<hour>$cf_hour</hour>\n");
  be_xml_print ("<minute>$cf_minute</minute>\n");
  be_xml_print ("<second>$cf_second</second>\n");

  be_xml_vspace ();
  be_xml_print ("<timezone>$cf_timezone</timezone>\n");
  be_xml_vspace ();
  
  be_xml_vspace ();
  be_xml_print ("<synchronization active='", be_print_boolean_yesno($cf_sync_active), "'>\n");
  
  be_xml_enter ();
  
  for $server (@cf_servers)
  {
    be_xml_print ("<server>$server</server>\n");
  }
  
  be_xml_leave ();
  
  be_xml_print ("</synchronization>\n");
  be_xml_vspace ();
  
  be_xml_print ("<!-- End of configuration -->\n");
  be_xml_vspace ();

  be_xml_leave ();
  print "</time>\n";
}


# --- Get (read) config --- #


sub get_time
{
  my $datetext;
  
  $datetext = `date +%Y.%m.%d.%H:%M.%S.%z`;
  
  ($cf_year, $cf_month, $cf_mday, $cf_hour, $cf_minute, $cf_second, $cf_timezone) =
    ($datetext =~ /^([0-9]+).([0-9]+).([0-9]+).([0-9]+):([0-9]+).([0-9]+).([-+0-9]+)/);

  if ($cf_timezone =~ /\+.*/) { $cf_timezone =~ tr/+/-/; }
  else { $cf_timezone =~ tr/-/+/; }

  if ($cf_timezone =~ /^(\+|-)0+$/) { $cf_timezone = "0000"; }  # GMT, eh?

  # TODO: We should fall back to internal Perl functions here.
}


sub check_servers
{
  if (-f "/etc/rc.d/init.d/xntpd")
  {
    if (!system "/etc/rc.d/init.d/xntpd status >/dev/null 2>/dev/null")
    {
      $cf_sync_active = 1;
      if ($be_verbose) { print STDERR "Found XNTPD enabled.\n"; }
    }
    elsif ($be_verbose)
    {
      $cf_sync_active = 0;
      print STDERR "Found XNTPD disabled.\n";
    }
  }
  elsif ($be_verbose)
  {
    print STDERR "Warning: Could not find a way to check XNTPD status.\n";
  }
}


sub get
{
  if ($be_progress) { $| = 1; print $progress_max . "\n"; }

  if ($be_verbose) { print STDERR "Getting system configuration, generating XML output.\n"; }
  if ($be_verbose) { print STDERR "Getting time, date and timezone.\n"; }

  read_ntp_conf (); be_print_progress ();
  get_time (); be_print_progress ();
  check_servers (); be_print_progress ();

  if ($be_verbose) { print STDERR "Printing XML.\n"; }
  if ($be_progress) { print "\n"; }
  xml_print ();
}


# --- Set (write) config --- #


sub set_time
{
  system sprintf("date %02d%02d%02d%02d%04d.%02d >/dev/null 2>/dev/null",
                 $cf_month, $cf_mday, $cf_hour, $cf_minute, $cf_year, $cf_second);
}


sub restart_servers
{
  if (-f "/etc/rc.d/init.d/xntpd")
  {
    if ($cf_sync_active)
    {
      if (system "/etc/rc.d/init.d/xntpd restart >/dev/null 2>/dev/null")
      {
        if ($be_verbose) { print STDERR "Warning: XNTPD restart failed.\n"; }
      }
      elsif ($be_verbose)
      {
        print STDERR "XNTPD restarted with new configuration.\n";
      }
    }
    else
    {
      system "/etc/rc.d/init.d/xntpd stop >/dev/null 2>/dev/null";
      if ($be_verbose) { print STDERR "XNTPD stopped.\n"; }
    }
  }
  elsif ($be_verbose)
  {
    print STDERR "Warning: Could not find a way to restart XNTPD service.\n";
  }
}


sub set
{
  if ($be_verbose) { print STDERR "Setting system configuration from XML input.\n"; }

  if ($be_verbose) { print STDERR "Parsing XML.\n"; }
  xml_parse ();

  write_ntp_conf ();
  write_ntp_step_tickers ();
  write_localtime ();

  if ($be_do_immediate)
  {
    if ($be_verbose) { print STDERR "Changing running configuration via local utilities.\n"; }
    set_time;
    restart_servers;
  }
}


# --- Filter config: XML in, XML out --- #


sub filter
{
  xml_parse ();
  xml_print ();
}


# --- Main --- #

# Process options.

while (@ARGV)
{
  if    ($ARGV[0] eq "--get"    || $ARGV[0] eq "-g") { be_set_operation("get"); }
  elsif ($ARGV[0] eq "--set"    || $ARGV[0] eq "-s") { be_set_operation("set"); }
  elsif ($ARGV[0] eq "--filter" || $ARGV[0] eq "-f") { be_set_operation("filter"); }
  elsif ($ARGV[0] eq "--help"   || $ARGV[0] eq "-h") { print $Usage; exit(0); }
  elsif ($ARGV[0] eq "--version")                    { print "$version\n"; exit(0); }
  elsif ($ARGV[0] eq "--prefix" || $ARGV[0] eq "-p")
  {
    if ($be_prefix ne "")
    {
      print STDERR "Error: You may specify --prefix only once.\n\n";
      print STDERR $Usage; exit(1);
    }

    $be_prefix = $ARGV[1];

    if ($be_prefix eq "")
    {
      print STDERR "Error: You must specify an argument to the --prefix option.\n\n";
      print STDERR $Usage; exit(1);
    }

    shift @ARGV;  # For the argument.
  }
  elsif ($ARGV[0] eq "--disable-immediate")           { $be_do_immediate = 0; }
  elsif ($ARGV[0] eq "--verbose" || $ARGV[0] eq "-v") { $be_verbose = 1; }
  elsif ($ARGV[0] eq "--progress")                    { $be_progress = 1; }
  else
  {
    print STDERR "Error: Unrecognized option '$ARGV[0]'.\n\n";
    print STDERR $Usage; exit(1);
  }

  shift @ARGV;
}


# Do our thing.

if    ($be_operation eq "get")    { get; }
elsif ($be_operation eq "set")    { set; }
elsif ($be_operation eq "filter") { filter; }
else
{
  print STDERR "Error: No operation specified.\n\n";
  print STDERR $Usage; exit(1);
}
