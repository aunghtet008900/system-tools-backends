#!/usr/bin/env perl
#-*-perl-*-
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: f; c-basic-offset: 2 -*-

# Network configurator. Designed to be architecture and distribution independent.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Hans Petter Jansson <hpj@ximian.com>
#          Michael Vogt <mvo@debian.org> (Debian Support)
#          Arturo Espinosa <arturo@ximian.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Best viewed with 100 columns of width.

# Configuration files affected:
#
# /etc/resolv.conf
# /etc/host.conf
# /etc/hosts
# /etc/sysconfig/network
# /etc/rc.config
# /etc/smb.conf

# Running programs affected:
#
# smbd
# nmbd
# ifconfig: check current interfaces and activate/deactivate.



require "___scriptsdir___/be.pl";
require "___scriptsdir___/network.pl";


# --- Tool information --- #

$name = "network";
$version = "0.1.0";

$description =<<"end_of_description;";
       Configures all network parameters and interfaces.
end_of_description;

$progress_max = 10;


# Find the tools

$tool_ifconfig = &be_locate_tool ("ifconfig");
$tool_ifup = &be_locate_tool ("ifup");

# --- Configuration file manipulation --- #

# --- Name resolution utilities --- #


# &be_ensure_local_host_entry (<hostname>)
#
# Given a hostname, add the hostname as an alias for the loopback IP, in the
# /etc/hosts database. This is required for tools like nmblookup to work on
# a computer with no reverse name or DNS. The name is added as the first alias,
# which usually means it'll be returned by a lookup on the loopback IP.

sub be_ensure_local_host_entry
{
  my $local_ip = "127.0.0.1";
  my $local_hostname = @_[0];
  my ($ifh, $ofh);
  local (*INFILE, *OUTFILE);
  my $written = 0;

  if ($local_hostname eq "") { return; }

  # Find the file.

  ($ifh, $ofh) = &be_open_filter_write_from_names(@hosts_names);
  if (!$ofh) { return; }  # We didn't find it.
  *INFILE = $ifh; *OUTFILE = $ofh;

  # Write the file, preserving as much as possible from INFILE.

  while (<INFILE>)
  {
    @line = split(/[ \n\r\t]+/, $_);
    if ($line[0] eq "") { shift @line; }  # Leading whitespace. He.

    if ($line[0] ne "" && (not &be_ignore_line($line[0])) &&
#       ($line[0] =~ /[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/) &&
        $line[0] eq $local_ip)
    {
      # Found $local_ip. Add $local_hostname to beginning of list,
      # and remove any other occurrences.

      shift @line;

      printf OUTFILE ("%-16s %s", $local_ip, $local_hostname);
      for $alias (@line)
      {
        if ($alias ne $local_hostname) { print OUTFILE " $alias"; }
      }
      print OUTFILE "\n";

      $written = 1;
    }
    else { print OUTFILE; }
  }

  # If the IP wasn't present, add the entry at the end.

  if (!$written) { printf OUTFILE ("%-16s %s\n", $local_ip, $local_hostname); }
  close INFILE;
  close OUTFILE;
}


# --- XML parsing ---

# Scan XML from standard input to an internal tree.

sub xml_parse
{
  my $tree, %hash;
  # Scan XML to tree.

  $tree = &be_xml_scan;

  # Walk the tree recursively and extract configuration parameters.
  # This is the top level - find and enter the "network" tag.

  while (@$tree)
  {
    if ($$tree[0] eq "network") { &xml_parse_network ($$tree[1], \%hash); }

    shift @$tree;
    shift @$tree;
  }

  return(\%hash);
}

# <network>...</network>

sub xml_parse_network
{
  my $tree = $_[0];
  my $hash = $_[1];
  my (@searchdomain, @nameserver, @order, %statichost, %interface);

  shift @$tree;  # Skip attributes.

  while (@$tree)
  {
       if ($$tree[0] eq "auto")            { $$hash{"auto"} = &be_xml_get_text ($$tree[1]); }
    elsif ($$tree[0] eq "forward")         { $$hash{"forward"} = &be_xml_get_text ($$tree[1]); }
    elsif ($$tree[0] eq "hostname")        { $$hash{"hostname"} = &be_xml_get_word ($$tree[1]); }
    elsif ($$tree[0] eq "gateway")         { $$hash{"gateway"} = &be_xml_get_word ($$tree[1]); }
    elsif ($$tree[0] eq "gateway_dev")     { $$hash{"gateway_dev"} = &be_xml_get_word ($$tree[1]); }
    elsif ($$tree[0] eq "domain")          { $$hash{"domain"} = &be_xml_get_word ($$tree[1]); }
    elsif ($$tree[0] eq "nameserver")      { push (@nameserver, &be_xml_get_word ($$tree[1])); }
    elsif ($$tree[0] eq "searchdomain")    { push (@searchdomain, &be_xml_get_word ($$tree[1])); }
    elsif ($$tree[0] eq "domainname")      { $$hash{"domainname"} = &be_xml_get_word ($$tree[1]); }
    elsif ($$tree[0] eq "order")           { push (@order, &be_xml_get_word ($$tree[1])); }
    elsif ($$tree[0] eq "hostmatch")       { $$hash{"hostmatch"} = &be_xml_get_text ($$tree[1]); }
    elsif ($$tree[0] eq "statichost")      { &xml_parse_statichost ($$tree[1], \%statichost); }
    elsif ($$tree[0] eq "workgroup")       { $$hash{"workgroup"} = &be_xml_get_word ($$tree[1]); }
    elsif ($$tree[0] eq "description")     { $$hash{"description"} = &be_xml_get_text ($$tree[1]); }
    elsif ($$tree[0] eq "winsserver")      { $$hash{"winsserver"} = &be_xml_get_word ($$tree[1]); }
    elsif ($$tree[0] eq "interface")       { &xml_parse_interface ($$tree[1], \%interface); }

    shift @$tree;
    shift @$tree;
  }

  $$hash{"order"} = \@order unless $#order < 0;
  $$hash{"searchdomain"} = \@searchdomain unless $#searchdomain < 0;
  $$hash{"nameserver"} = \@nameserver unless $#nameserver < 0;
  $$hash{"statichost"} = \%statichost unless scalar keys %statichost == 0;
  $$hash{"interface"} = \%interface unless scalar keys %interface == 0;
}

# <network><statichost>...</statichost></network>

sub xml_parse_statichost
{
  my $tree = $_[0];
  my $statichost = $_[1];
  my $ip;
  my @alias;

  shift @$tree;

  while (@$tree)
  {
    if    ($$tree[0] eq "ip")    { $ip = &be_xml_get_word($$tree[1]); }
    elsif ($$tree[0] eq "alias") { push(@alias, &be_xml_get_word($$tree[1])); }

    shift @$tree;
    shift @$tree;
  }

  if ($ip =~ /[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/)
  {
    $$statichost{$ip} = \@alias;
  }
}

# <interface>...</interface>

sub xml_parse_interface
{
  my $tree = $_[0];
  my $interface = $_[1];
  my %hash;
  my $dev;

  shift @$tree;
  
  while (@$tree)
  {
    $hash{$$tree[0]} = &be_xml_get_word ($$tree[1]);

    shift @$tree;
    shift @$tree;
  }

  $dev = $hash{"dev"};
  $$interface{$dev} = \%hash;
}


# --- XML printing --- #

sub quote
{
  my $ret = $_[0];
  my $i;
 
  for ($i = 1; @be_xml_entities[$i] ne undef; $i += 2)
  {
    $ret =~ s/$be_xml_entities[$i]/$be_xml_entities[$i - 1]/g;
  }

  return $ret;
}

sub unquote
{
  my $ret = $_[0];
  my $i;
 
  for ($i = 0; @be_xml_entities[$i] ne undef; $i += 2)
  {
    $ret =~ s/$be_xml_entities[$i]/$be_xml_entities[$i + 1]/g;
  }

  return $ret;
}

sub xml_print_scalars
{
  my ($h, @scalar_keys) = @_;
  my $i, $val;

  while ($i = shift @scalar_keys)
  {
    $val = &quote ($$h{$i});
    &be_xml_print ("<$i>$val</$i>\n") if exists $$h{$i};
  }
}

sub xml_print_arrays
{
  my ($h, @array_keys) = @_;
  my $i, $j, $val;
  
  foreach $i (@array_keys)
  {
    if (exists $$h{$i})
    {
	 &be_xml_vspace ();
	 foreach $j (@{$$h{$i}})
	 {
	   $val = &quote ($j);
	   &be_xml_print ("<$i>$val</$i>\n");
	 }
    }
  }
}

sub xml_print_statichost
{
  my ($h) = $_[0];
  my $statichost, $i, $j, $val;
  
  &be_xml_vspace ();
  foreach $i (keys %{$$h{"statichost"}})
  {
    $statichost = $ {$$h{"statichost"}}{$i};
    &be_xml_print ("<statichost>\n");
    &be_xml_enter ();
    $val = &quote ($i);
    &be_xml_print ("<ip>$val</ip>\n");
    foreach $j (@$statichost)
    {
	 $val = &quote ($j);
	 &be_xml_print ("<alias>$val</alias>\n");
    }
    &be_xml_leave ();
    &be_xml_print ("</statichost>\n");
  }
}

sub xml_print_interfaces
{
  my ($h) = $_[0];
  my $interface, $i, $j, $val;
  
  foreach $i (keys %{$$h{"interface"}})
  { 
    $interface = $ {$$h{"interface"}}{$i};
    &be_xml_vspace ();
    &be_xml_print ("<interface>\n");
    &be_xml_enter ();
    
    foreach $j (keys (%$interface))
    {
	 $val = &quote ($$interface{$j});
      &be_xml_print ("<$j>$val</$j>\n");
    }
    
    &be_xml_leave ();
    &be_xml_print ("</interface>\n");
  } 
}

sub xml_print
{
  my $h = $_[0];
  my @scalar_keys =
	 (auto, forward, hostname, gateway, gateway_dev, domain, domainname,
	  hostmatch, workgroup, description, winsserver);
  my @array_keys =
	 (nameserver, searchdomain, order);
  my @hash_keys =
	 (statichost);

  print "<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>\n";
  print "<!DOCTYPE network []>\n\n";
  print "<network>\n";
  &be_xml_vspace ();
  &be_xml_enter ();

  &be_xml_vspace ();
  &be_xml_print ("<!-- Configuration starts here -->\n");
  &be_xml_vspace ();

  # Hostname, domain, search domains, nameservers.

  &xml_print_scalars ($h, @scalar_keys);
  &xml_print_arrays ($h, @array_keys);
  &xml_print_statichost ($h);
  &xml_print_interfaces ($h);
  
  &be_xml_vspace ();
  &be_xml_print ("<!-- End of configuration -->\n");
  &be_xml_vspace ();

  &be_xml_leave ();
  &be_xml_print ("</network>\n");
}


# Top-level actions.


sub get
{
  my $hash;

  &be_begin ();
  
  # network interface stuff
  $hash = &xst_network_conf_get ();

  &be_end();
  &xml_print ($hash);
}


# --- Set (write) config --- #


sub set_interface_up
{
  my $dev = $_[0];

  # RedHat

  system ("$tool_ifup $dev");
}

sub set_interface_down
{
  my $dev = $_[0];

  system ("$tool_ifconfig $dev down");
}

sub set_active_interfaces
{
  my (%ifaces, %interface, $elem);
  
  open IFCONFIG, "ifconfig -au | sed 's/:* .*//;/^\$/D' |" ||
	 open IFCONFIG, "ifconfig | sed 's/:* .*//;/^\$/D' |";
  # another possibility, instead of sed: awk '/^[a-z]/{print $1}'

  while (<IFCONFIG>)
  {
    chomp;
    $ifaces{$_} = 1;
  }

  close IFCONFIG;

  foreach $elem (keys (%{$cf_nw_interfaces}))
  {
    %interface = %{$ { $cf_nw_interfaces}{$elem}};
    if ($ifaces{$elem} && ! $$interface{"enabled"})
    {
	 &set_interface_down ($elem);
	 next;
    }

    if (!$ifaces{$elem} && $$interface{"enabled"})
    {
	 &set_interface_up ($elem);
    }
  }
}

sub set_immediate
{
  # Set hostname via utility, in case the config files aren't enough.

  if ($cf_hostname ne "")
  {
    if (&be_run("hostname $cf_hostname >/dev/null 2>/dev/null"))
    {
      &be_report_warning(3, "Failed to set runtime hostname");
    }
    else
    {
      &be_report_info(1, "Runtime hostname set");
    }
  }
  else
  {
    &be_report_warning(4, "No hostname specified; runtime hostname not set");
  }

  # Reload SMB configuration.
  
  &be_service_restart(80, "-D", "samba", "smb", "smbd");

  # Activate or deactivate network interfaces

  &set_active_interfaces ();
}


# sub &set_local_host_entry
# {
#   # Temporary solution to find IP address. Ideally we want to define the
#   # hostname for all IPs we have.
# 
#   my $ip = `ifconfig eth0 2>/dev/null`;
#   if ($ip eq "") { $ip = `ifconfig ppp0 2>/dev/null`; }
# 
#   $ip =~ /^.*addr:([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/m;
#   $ip = $1;
# 
#   if ($ip eq "")
#   {
#     &be_report_warning(01, "Couldn't find a configured network device");
#     return(0);
#   }
# 
#   &be_ensure_local_host_entry ($ip, $cf_hostname);
# }


sub set
{
  my $hash;
  
  &be_begin ();
  $hash = &xml_parse ();

  &xst_network_conf_set ($hash);
#  &be_ensure_local_host_entry ($$hash{"hostname"});

  # network interface configuring
 # &set_interfaces (); &be_progress (90);

#  if ($be_do_immediate)
#  {
#    &set_immediate;
#  }

  &be_end ();
}


# --- Filter config: XML in, XML out --- #


sub filter
{
  my $hash;
  
  &be_begin ();
  $hash = &xml_parse ();
  &be_end ();
  &xml_print ($hash);
}


# --- Main --- #

&be_init ($name, $version, $description, @ARGV);

# Do our thing.

if    ($be_operation eq "get")    { &get; }
elsif ($be_operation eq "set")    { &set; }
elsif ($be_operation eq "filter") { &filter; }
