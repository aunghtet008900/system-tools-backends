#!/usr/bin/env perl
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-

# Common stuff for the ximian-setup-tools backends.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Hans Petter Jansson <hpj@ximian.com>
#          Arturo Espinosa <arturo@ximian.com>
#          Michael Vogt <mvo@debian.org> - Debian 2.[2|3] support.
#          David Lee Ludwig <davidl@wpi.edu> - Debian 2.[2|3] support.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.


require "___scriptsdir___/general.pl";
require "___scriptsdir___/file.pl";
require "___scriptsdir___/parse.pl";
require "___scriptsdir___/replace.pl";
require "___scriptsdir___/service.pl";


# This code is not under the portable table style because it is supposed to
# depend on wvdial.
sub xst_network_dialing_get
{
  my %vars =
      (
       "Modem" => "device",
       "Baud" => "speed",
       "Init1" => "init1",
       "Init2" => "init2",
       "Phone" => "phone",
       "Username" => "login",
       "Password" => "password",
       "Dial Command" => "dialcmd",
       "SetVolume" => "setvol",
       "Stupid mode" => "stupid",
       "Inherits" => "inherits"
       );
  my %title2type =
      (
       "Dialer (.*)" => "dialer",
       "Modem(.*)" => "modem"
       );
  
  my ($file) = @_;
  my (%ret, @sections);
  my ($i, $j, $name, $val);

  &xst_report_enter ();
  &xst_file_run ("wvdialconf $xst_prefix/$file") if (!-e "$xst_prefix/$file");
  &xst_report ("network_dialing_get");
  
  @sections = &xst_parse_ini_sections ($file);
  foreach $i (@sections)
  {
    my %hash;
    
    $hash{"type"} = "unknown";
    foreach $j (keys %title2type)
    {
      if ($i =~ /$j/)
      {
        $hash{"name"} = $1;
        $hash{"type"} = $title2type{$j};
      }
    }
    
    $ret{$hash{"name"}} = \%hash;
    
    foreach $j (keys %vars)
    {
      $val = &xst_parse_ini ($file, $i, $j);
      $hash{$vars{$j}} = $val if ($val ne undef);
    }
  }
  
  &xst_report_leave ();
  return \%ret;
}

sub xst_network_active_interfaces_get
{
  local *IFCONFIG;
  my $dev;
  my $interface;
  my $tool_ifconfig;
  my @ret = ();

  &xst_report_enter ();
  &xst_report ("network_iface_active_get");
  $tool_ifconfig = &xst_file_locate_tool ("ifconfig");

  open IFCONFIG, "/bin/sh -c \"$tool_ifconfig | sed 's/:\\? .*//;/^\$/D'\" |";
  
  while (<IFCONFIG>)
  {
    chomp;
    push @ret, $_;
  }

  close IFCONFIG;

  &xst_report_leave ();
  return @ret;
}
  
sub xst_network_interface_active
{
  my ($search_iface, $proc) = @_;
  my @ifaces;

  &xst_report_enter ();
  &xst_report ("network_iface_is_active", $search_iface);
  
  @ifaces = &$proc ();
  while ($ifaces[0])
  {
    return 1 if (shift (@ifaces) eq $search_iface);
  }

  &xst_report_leave ();
  return 0;
}

sub xst_network_sysconfig_ifaces_get_existing
{
  local *IFACE_DIR;
  my (@ret, $i, $name);
  
  if (opendir IFACE_DIR, "$xst_prefix/etc/sysconfig/network-scripts")
  {
    foreach $i (readdir (IFACE_DIR))
    {
      if ($i =~ /ifcfg-[a-z0-9]+$/)
      {
        $name = $i;
        $name =~ s/ifcfg-//;
        push @ret, $name;
      }
    }

    closedir (IFACE_DIR);
  }

  return @ret;
}

sub xst_network_debian_ifaces_get_existing
{
  my (@ret, @stanzas, $stanza);
  
  @stanzas = &xst_parse_interfaces_stanzas ("$xst_prefix/etc/network/interfaces");

  foreach $stanza (@stanzas)
  {
    if ($$stanza[1] eq "inet")
    {
      push @ret, $$stanza[0];
    }
  }

  return @ret;
}

sub xst_network_interfaces_get
{
  my (%dist_attrib, %hash, %fn, @ifaces, $iface);
  my ($dist, $value, $file, $proc);
  my ($i, $j);

  %dist_attrib = &xst_network_get_interfaces_parse_table ();
  %fn = %{$dist_attrib{"fn"}};
  $proc = $dist_attrib{"ifaces_get"};
  @ifaces = &$proc ();
  $key = 0;
  
  foreach $i (@ifaces)
  {
    foreach $j (keys (%fn))
    {
      $value = $fn{$j};
      $value =~ s/\#iface\#/$i/;
      $ {$dist_attrib{"fn"}}{$j} = $value;
    }

    $iface = &xst_parse_from_table ($dist_attrib{"fn"},
                                    $dist_attrib{"table"});
    $$iface{"file"} = $i;
    $hash{$i} = $iface;
  }

  return \%hash;
}

sub xst_network_conf_get
{
  my %dist_attrib;
  my $hash;

  %dist_attrib = &xst_network_get_parse_table ();

  $hash = &xst_parse_from_table ($dist_attrib{"fn"},
                                 $dist_attrib{"table"});
  return $hash;
}

sub xst_network_deb22_get_file
{
  my $dev = $_[0];
  
  return $dev;
}

sub xst_network_rh62_get_file
{
  my $dev = $_[0];
  my $pre;
  my $i;

  $pre = "$xst_prefix/etc/sysconfig/network-scripts/ifcfg-";
  
  return $dev if ! -e "$pre$dev";
  
  $dev =~ s/[0-9]*$//;

  $i = 0;
  $i ++ while (-e "$pre$dev$i");
  
  return "$dev$i";
}

sub xst_network_get_file
{
  my $dev = $_[0];
  my $proc;

  my %dist_map =
	 (
	  "redhat-6.0"   => \&xst_network_rh62_get_file,
	  "redhat-6.1"   => \&xst_network_rh62_get_file,
	  "redhat-6.2"   => \&xst_network_rh62_get_file,
	  "redhat-7.0"   => \&xst_network_rh62_get_file,
	  "mandrake-7.2" => \&xst_network_rh62_get_file,
    "debian-2.2"   => \&xst_network_deb22_get_file
	  );

  $proc = $dist_map{$xst_dist};

  return &$proc ($dev) if $proc;

  # FIXME: should make us bail.
  return undef;
}

sub xst_network_run_hostname
{
  my $hostname = $_[0];

  &xst_report_enter ();
  &xst_report ("network_hostname_set");
  &xst_file_run ("hostname $hostname");
  &xst_report_leave ();
}

sub xst_network_dialing_set
{
  my %vars =
	 (
	  "device" => "Modem",
	  "speed" => "Baud",
	  "init1" => "Init1",
	  "init2" => "Init2",
	  "phone" => "Phone",
	  "login" => "Username",
	  "password" => "Password",
	  "dialcmd" => "Dial Command",
	  "setvol" => "SetVolume",
	  "stupid" => "Stupid mode",
	  "inherits"=>"Inherits"
	  );
  my %type2title =
	 (
	  "dialer" => "Dialer #i#",
	  "modem" => "Modem #i#",
	  "unknown" => "#i#"
	  );
  my ($file, $values_hash) = @_;
  my (%hash, $section);
  my $ret;
  my ($i, $j);

  &xst_report_enter ();
  &xst_report ("network_dialing_set");

  foreach $i (keys %$values_hash)
  {
    %hash = %{$$values_hash{$i}};

    $section = $type2title{$hash{"type"}};
    $section =~ s/\#i\#/$i/;
    delete $hash{"type"};
    delete $hash{"name"};

    foreach $j (keys %hash)
    {
      $ret = -1 if &xst_replace_ini ($file, $section, $vars{$j}, $hash{$j});
    }
  }

  &xst_report_leave ();
  return $ret;
}

sub xst_network_rh62_interface_activate_by_dev
{
  my ($dev, $enabled) = @_;

  if ($enabled)
  {
    &xst_debug_print_string ("\n\nifup $dev\n\n");
    return -1 if &xst_file_run ("ifup $dev &");
  }
  else
  {
    &xst_debug_print_string ("\n\nifdown $dev\n\n");
    return -1 if &xst_file_run ("ifdown $dev &");
  }

  return 0;
}

sub xst_network_rh62_interface_activate
{
  my ($hash, $old_hash, $enabled) = @_;
  my $dev;

  if ($enabled)
  {
    if (!exists $$hash{"file"})
    {
      $dev = $$hash{"dev"};
    }
    else
    {
      $dev = $$hash{"file"} if (!$old_hash || !$$old_hash{"enabled"});
    }
  }
  else
  {
    $dev = $$hash{"file"} if ($old_hash && $$old_hash{"enabled"});
  }

  if ($dev)
  {
    &xst_report_enter ();
    &xst_report ("network_iface_activate", $dev) if $enabled;
    &xst_report ("network_iface_deactivate", $dev) if !$enabled;
    &xst_network_rh62_interface_activate_by_dev ($dev, $enabled);
    &xst_report_leave ();
  }
}

sub xst_network_remove_pap_entry
{
  my ($file, $login) = @_;
  my ($i, $buff);

  &xst_report_enter ();
  &xst_report ("network_remove_pap", $file, $login);
  
  $buff = &xst_file_buffer_load ($file);

  foreach $i (@$buff)
  {
    $i = "" if ($i =~ /^[ \t]*$login[ \t]/);
  }

  &xst_file_buffer_clean ($buff);
  &xst_report_leave ();
  return &xst_file_buffer_save ($buff, $file);
}

sub xst_network_rh62_interface_delete
{
  my $old_hash = $_[0];
  my $dev = $$old_hash{"file"};
  my $file = "$xst_prefix/etc/sysconfig/network-scripts/ifcfg-$dev";
  my $login;

  &xst_network_rh62_interface_activate_by_dev ($dev, 0);

  $login = $old_hash{"login"};
  if ($login ne "")
  {
    &xst_network_remove_pap_entry ("/etc/ppp/pap-secrets", $login);
    &xst_network_remove_pap_entry ("/etc/ppp/chap-secrets", $login);
  }

  unlink ($file);
}

sub xst_network_deb22_interface_delete
{
  my $old_hash = $_[0];
  my $dev = $$old_hash{"dev"};

  &xst_replace_interfaces_stanza_delete ("$xst_prefix/etc/network/interfaces", $dev);
  
  $login = $old_hash{"login"};
  if ($login ne "")
  {
    &xst_network_remove_pap_entry ("/etc/ppp/pap-secrets", $login);
    &xst_network_remove_pap_entry ("/etc/ppp/chap-secrets", $login);
  }
}

sub xst_network_interfaces_down_changed
{
  my ($proc_iface_set, $old_hash, $values_hash) = @_;

  @ifaces = &xst_network_active_interfaces_get ();
  foreach $i (@ifaces)
  {
    if (!&xst_util_struct_eq ($$values_hash{$i}, $$old_hash{$i}))
    {
      &$proc_iface_set ($$values_hash{$i}, $$old_hash{$i}, 0);
    }
  }
}

sub xst_network_interface_set
{
  my ($dev, $values_hash, $old_hash) = @_;
  my (%dist_attrib, %fn);
  my ($proc, $i, $res);
  
  &xst_report_enter ();
  &xst_report ("network_iface_set", $dev);
  %dist_attrib = &xst_network_get_interface_replace_table ();
  $proc = $dist_attrib{"iface_set"};
  %fn = %{$dist_attrib{"fn"}};
  
  foreach $i (keys (%fn))
  {
    $value = $fn{$i};
    $value =~ s/\#iface\#/$dev/;
    $ {$dist_attrib{"fn"}}{$i} = $value;
  }
  
  $res = &xst_replace_from_table ($dist_attrib{"fn"}, $dist_attrib{"table"},
                                  $values_hash, $old_hash);
  
  # if success saving the settings for the interface, set up immediatly.
  &$proc ($values_hash, $old_hash, $$values_hash{"enabled"}) if !$res;

  &xst_report_leave ();

  return $res;
}

sub xst_network_interfaces_set
{
  my ($old_hash, $values_hash) = @_; 
  my (%dist_attrib, @ifaces, %fn);
  my ($value, $proc);
  my ($i, $j);
  my ($tmp, $res);

  &xst_report_enter ();
  &xst_report ("network_ifaces_set");
  
  %dist_attrib = &xst_network_get_interface_replace_table ();
  $old_hash = $$old_hash{"interface"};

  $proc = $dist_attrib{"iface_set"};
  &xst_network_interfaces_down_changed ($proc, $old_hash, $values_hash);

  # Delete all old interfaces that are not in the hash.
  $proc = $dist_attrib{"iface_delete"};
  foreach $i (keys %$old_hash)
  {
    &$proc ($$old_hash{$i}) if !exists ($$values_hash{$i}) && exists ($$old_hash{$i});
  }

  foreach $i (keys %$values_hash)
  {
    $tmp = &xst_network_interface_set ($i, $$values_hash{$i}, $$old_hash{$i});
    $res = $tmp if !$res;
  }

  &xst_report_leave ();
  return $res;
}

sub xst_network_conf_set
{
  my $values_hash = $_[0];
  my $old_hash;
  my %dist_attrib;
  
  &xst_network_ensure_loopback ($values_hash);

  $old_hash = &xst_network_conf_get ();
  %dist_attrib = &xst_network_get_replace_table ();
  $res = &xst_replace_from_table ($dist_attrib{"fn"}, $dist_attrib{"table"},
                                  $values_hash, $old_hash);
  return $res;
}

sub xst_network_get_pap_passwd
{
  my ($file, $login) = @_;
  my @arr;

  &xst_report_enter ();
  &xst_report ("network_get_pap_passwd", $login, $file);
  $arr = &xst_parse_split_first_array ($file, $login, "[ \t]+", "[ \t]+");
  &xst_report_leave ();
  
  return $$arr[1];
}

sub xst_network_get_ppp_options_re
{
  my ($file, $re) = @_;
  my ($fd, @res);

  &xst_report_enter ();
  &xst_report ("network_get_ppp_option", &xst_replace_regexp_to_separator ($re), $file);
  $fd = &xst_file_open_read_from_names ("$file");
  &xst_report_leave ();
  return undef if !$fd;

  while (($_ = &xst_parse_chomp_line_hash_comment ($fd)) != -1)
  {
    $_ = $$_;

    @res = /$re/;
    return $res[0] if $res[0];
  }

  return undef;
}

sub xst_network_set_ppp_options_re
{
  my ($file, $re, $value) = @_;
  my ($buff, $line, $replaced, $ret);

  &xst_report_enter ();
  &xst_report ("network_set_ppp_option", &xst_replace_regexp_to_separator ($re), $file);
  
  $buff = &xst_file_buffer_load ($file);

  foreach $line (@$buff)
  {
    if ($line =~ /$re/)
    {
      $line = "$value\n";
      $replaced = 1;
    }
  }

  push @$buff, "$value\n" if !$replaced;
  
  &xst_file_buffer_clean ($buff);
  $ret = &xst_file_buffer_save ($buff, $file);
  &xst_report_leave ();
  return $ret;
}

sub xst_network_set_ppp_options_connect
{
  my ($file, $value) = @_;
  my $ret;

  &xst_report_enter ();
  &xst_report ("network_set_ppp_connect", $file);
  $ret = &xst_network_set_ppp_options_re ($file, "^connect", "connect \"/usr/bin/wvdial --chat $value\"");
  &xst_report_leave ();
  return $ret;
}

sub xst_network_get_ppp_options_unsup
{
  my ($file) = @_;
  my ($fd, $line, $res, $re);
  my @known_options = ("usepeerdns", "mtu", "mru", "user", "/dev/[^ \t]+", "[0-9]+",
                       "defaultroute", "debug", "persist", "escape", "crtscts", "connect",
                       "remotename", "hide-password", "noauth", "noipdefault", "ipparam");

  $res = "";
  &xst_report_enter ();
  &xst_report ("network_get_ppp_unsup", $file);
  $fd = &xst_file_open_read_from_names ("$file");
  &xst_report_leave ();
  return undef if !$fd;

  GET_LINE: while (($line = &xst_parse_chomp_line_hash_comment ($fd)) != -1)
  {
    $_ = $$line;
    next if /^$/;

    foreach $re (@known_options)
    {
      next GET_LINE if /^$re/;
    }

    $res .= "$_ ";
  }

  chop $res;

  return $res;
}

sub xst_network_set_ppp_options_unsup
{
  my ($file, $value) = @_;
  my ($buff, $line, $re, $ret);
  my @known_options = ("usepeerdns", "mtu", "mru", "user", "/dev/[^ \t]+", "[0-9]+",
                       "defaultroute", "debug", "persist", "escape", "crtscts", "connect",
                       "remotename", "hide-password", "noauth", "noipdefault", "ipparam");
  
  # The options in the last row are those that are on by default in pppd and we don't handle,
  # so we ignore them, as they are set implicitly if not specified.

  &xst_report_enter ();
  &xst_report ("network_set_ppp_unsup", $file);
  $buff = &xst_file_buffer_load ($file);

  GET_LINE: foreach $line (@$buff)
  {
    foreach $re (@known_options)
    {
      next GET_LINE if $line =~ /^$re/;
    }
    $line = "";
  }
  
  push @$buff, $value . "\n";
  
  &xst_file_buffer_clean ($buff);
  $ret = &xst_file_buffer_save ($buff, $file);
  &xst_report_leave ();
  return $ret;
}

sub xst_network_rh62_parse_bootproto
{
  my $ret;
  my %rh62_to_proto_name =
	 (
	  "bootp" => "bootp",
	  "dhcp"  => "dhcp",
	  "none"  => "none"
	  );

  $ret = &xst_parse_sh (@_);

  return $rh62_to_proto_name{$ret};
}

sub xst_network_rh62_replace_bootproto
{
  my ($file, $key, $value) = @_;
  my %proto_name_to_rh62 =
	 (
	  "bootp"    => "bootp",
	  "dhcp"     => "dhcp",
	  "none"     => "none"
	  );

  return &xst_replace_sh ($file, $key, $proto_name_to_rh62{$value});
}

sub xst_network_deb22_parse_bootproto
{
  my ($file, $iface) = @_;
  my (@stanzas, $stanza, $method, $bootproto);
  my %debian_to_proto_name =
      (
       "bootp"    => "bootp",
       "dhcp"     => "dhcp",
       "loopback" => "none",
       "ppp"      => "none",
       "static"   => "none"
       );

  &xst_report_enter ();
  @stanzas = &xst_parse_interfaces_stanzas ($file);

  foreach $stanza (@stanzas)
  {
    if (($$stanza[0] eq $iface) && ($$stanza[1] eq "inet"))
    {
      $method = $$stanza[2];
      last;
    }
  }

  if (exists $debian_to_proto_name {$method})
  {
    $bootproto = $debian_to_proto_name {$method};
  }
  else
  {
    $bootproto = "none";
    &xst_report ("network_bootproto_unsup", $method, $iface);
  }

  &xst_report_leave ();
  return $bootproto;
}

sub xst_network_deb22_replace_bootproto
{
  my ($file, $iface, $value) = @_;
  my (@stanzas, $stanza, $method, $bootproto);
  my %proto_name_to_debian =
      (
       "bootp"    => "bootp",
       "dhcp"     => "dhcp",
       "loopback" => "loopback",
       "ppp"      => "ppp",
       "none"     => "static"
       );

  my %dev_to_method = 
      (
       "lo" => "loopback",
       "ppp" => "ppp"
       );

  foreach $i (keys %dev_to_method)
  {
    $value = $dev_to_method{$i} if $iface =~ /^$i/;
  }

  return &xst_replace_interface_stanza_value ($file, $iface, 2, $proto_name_to_debian{$value});
}

sub xst_network_debian_parse_remote_address
{
  my ($file, $iface) = @_;
  my ($str, @tuples, $tuple, @res);

  &xst_report_enter ();
  &xst_report ("network_get_remote", $iface);
  
  @tuples = &xst_parse_interfaces_option_tuple ($file, $iface, "up", 1);

  &xst_report_leave ();
  
  foreach $tuple (@tuples)
  {
    @res = $$tuple[1] =~ /[ \t]+pointopoint[ \t]+([^ \t]+)/;
    return $res[0] if $res[0];
  }

  return undef;
}

sub xst_network_debian_replace_remote_address
{
  my ($file, $iface, $value) = @_;
  my ($ifconfig, $ret);
  
  &xst_report_enter ();
  &xst_report ("network_set_remote", $iface);
  
  $ifconfig = &xst_file_locate_tool ("ifconfig");

  $ret = &xst_replace_interfaces_option_str ($file, $iface, "up", "$ifconfig $iface pointopoint $value");
  &xst_report_leave ();
  return $ret;
}

sub xst_network_ensure_loopback_interface
{
  my ($interface) = @_;
  my $dev;
  my %dist_map =
	 (
	  "redhat-6.0"   => "lo",
	  "redhat-6.1"   => "lo",
	  "redhat-6.2"   => "lo",
	  "redhat-7.0"   => "lo",
	  "mandrake-7.2" => "lo",
	  "debian-2.2"   => "lo"
	  );

  $dev = $dist_map {$xst_dist};

  if (!exists $$interface{$dev})
  {
    my %iface = (
                 "auto" => 1,
                 "user" => 0,
                 "dev" => "lo",
                 "address" => "127.0.0.1",
                 "netmask" => "255.0.0.0",
                 "broadcast" => "127.255.255.255",
                 "network" => "127.0.0.0",
                 "bootproto" => "none",
                 "enabled" => 1
                 );

    $$interface{$dev} = \%iface;
    &xst_network_interface_set ($dev, \%iface);
  }
  elsif (! $ {$$interface{$dev}}{"enabled"})
  {
    $ {$$interface{$dev}}{"enabled"} = 1;
    &xst_network_interface_set ($dev, $$interface{$dev});
  }
}

sub xst_network_statichost_add_alias
{
  my ($localhost, $alias) = @_;
  my $i;

  foreach $i (@$localhost)
  {
    return if ($i eq $alias);
  }
  
  push @$localhost, $alias;
}
  
sub xst_network_ensure_loopback_statichost
{
  my ($statichost, $hostname, $lo_ip) = @_;
  my $i;

  if (exists $$statichost{$lo_ip})
  {
    my $localhost = $$statichost{$lo_ip};
    &xst_network_statichost_add_alias ($localhost, $hostname);
    &xst_network_statichost_add_alias ($localhost, "localhost");
    &xst_network_statichost_add_alias ($localhost, "localhost.localdomain");
  }
  else
  {
    $$statichost{$lo_ip} = [ ("localhost", "localhost.localdomain", $hostname) ];
  }
}

# lo_ip is the ip for localhost (commonly 127.0.0.1).
sub xst_network_ensure_loopback
{
  my $values_hash = $_[0];
  my $lo_ip = "127.0.0.1";
  my $interface = $$values_hash{"interface"};
  my $hostname = $$values_hash{"hostname"};
  my $statichost = $$values_hash{"statichost"};

  &xst_report_enter ();
  &xst_report ("network_ensure_lo");

  &xst_network_ensure_loopback_statichost ($statichost, $hostname, $lo_ip);
  &xst_network_ensure_loopback_interface ($interface, $lo_ip);

  &xst_report_leave ();
}

sub xst_network_get_parse_table
{
  my %dist_map =
	 (
	  "redhat-6.0"   => "redhat-6.2",
	  "redhat-6.1"   => "redhat-6.2",
	  "redhat-6.2"   => "redhat-6.2",
	  "redhat-7.0"   => "redhat-6.2",
	  "mandrake-7.2" => "redhat-6.2",
    "debian-2.2"   => "debian-2.2"
	  );

  my %dist_tables =
	 (
	  "redhat-6.2" =>
	  {
	    fn =>
	    {
		 SYSCONFIG_NW => "/etc/sysconfig/network",
		 RESOLV_CONF  => "/etc/resolv.conf",
		 HOST_CONF    => "/etc/host.conf",
		 HOSTS        => "/etc/hosts",
		 SMB_CONF     => "/etc/smb.conf",
		 WVDIAL       => "/etc/wvdial.conf" },
	    table =>
		   [
		    [ "forward",       \&xst_parse_sh_bool,           SYSCONFIG_NW, FORWARD_IPV4 ],
		    [ "hostname",      \&xst_parse_sh,                SYSCONFIG_NW, HOSTNAME ],
		    [ "domain",        \&xst_parse_sh,                SYSCONFIG_NW, DOMAIN ],
		    [ "nameserver",    \&xst_parse_split_all,         RESOLV_CONF,  "nameserver", "[ \t]+" ],
		    [ "searchdomain",  \&xst_parse_split_first_array, RESOLV_CONF,  "search", "[ \t]+", "[ \t]+" ],
		    [ "domainname",    \&xst_parse_split_first_str,   RESOLV_CONF,  "domain", "[ \t]+" ],
		    [ "order",         \&xst_parse_split_first_array, HOST_CONF,    "order", "[ \t]+", "," ],
		    [ "hostmatch",     \&xst_parse_split_first_bool,  HOST_CONF,    "multi", "[ \t]+" ],
		    [ "statichost",    \&xst_parse_split_hash,        HOSTS,        "[ \t]+", "[ \t]+" ],
		    [ "workgroup",     \&xst_parse_ini,               SMB_CONF,     "global", "workgroup" ],     
		    [ "description",   \&xst_parse_ini,               SMB_CONF,     "global", "server string" ],    
		    [ "winsserver",    \&xst_parse_ini,               SMB_CONF,     "global", "wins server" ],
		    [ "winsuse",       \&xst_parse_ini_bool,          SMB_CONF,     "global", "wins support" ],
        [ "smbuse",        \&xst_service_sysv_get_status, "smb" ],
        [ "smbinstalled",  \&xst_service_sysv_installed,  "smb" ],
		    [ "dialing",       \&xst_network_dialing_get,     WVDIAL ],
		    [ "interface",     \&xst_network_interfaces_get ]
		    ]
			 },

    
	  "debian-2.2" =>
	  {
	    fn =>
	    {
        OPTIONS     => "/etc/network/options",
        RESOLV_CONF => "/etc/resolv.conf",
        HOST_CONF   => "/etc/host.conf",
        HOSTS       => "/etc/hosts",
        HOSTNAME    => "/etc/hostname",
        SMB_CONF    => "/etc/samba/smb.conf",
        WVDIAL      => "/etc/wvdial.conf" },
	    table =>
          [
           [ "forward",       \&xst_parse_sh_bool,           OPTIONS, "ip_forward" ],
           [ "hostname",      \&xst_parse_line_first,        HOSTNAME ],
           [ "domain",				\&xst_parse_split_first_str,   RESOLV_CONF,  "domain", "[ \t]+" ],
           [ "nameserver",    \&xst_parse_split_all,         RESOLV_CONF,  "nameserver", "[ \t]+" ],
           [ "searchdomain",  \&xst_parse_split_first_array, RESOLV_CONF,  "search", "[ \t]+", "[ \t]+" ],
           [ "domainname",    \&xst_parse_split_first_str,   RESOLV_CONF,  "domain", "[ \t]+" ],
           [ "order",         \&xst_parse_split_first_array, HOST_CONF,    "order", "[ \t]+", "," ],
           [ "hostmatch",     \&xst_parse_split_first_bool,  HOST_CONF,    "multi", "[ \t]+" ],
           [ "statichost",    \&xst_parse_split_hash,        HOSTS,        "[ \t]+", "[ \t]+" ],
           [ "workgroup",     \&xst_parse_ini,               SMB_CONF,     "global", "workgroup" ],     
           [ "description",   \&xst_parse_ini,               SMB_CONF,     "global", "server string" ],    
           [ "winsserver",    \&xst_parse_ini,               SMB_CONF,     "global", "wins server" ],
           [ "winsuse",       \&xst_parse_ini_bool,          SMB_CONF,     "global", "wins support" ],
           [ "smbuse",        \&xst_service_sysv_get_status, "smb" ],
           [ "smbinstalled",  \&xst_service_sysv_installed,  "smb" ],
           [ "dialing",       \&xst_network_dialing_get,     WVDIAL ],
           [ "interface",     \&xst_network_interfaces_get ]
           ]
             }
	  );
  
  my $dist = $dist_map{$xst_dist};
  return %{$dist_tables{$dist}} if $dist;

  # FIXME: This is a fatal error, and should make us bail.
  return undef;
}

sub xst_network_get_interfaces_parse_table
{
  my %dist_map =
	 (
	  "redhat-6.0"   => "redhat-6.2",
	  "redhat-6.1"   => "redhat-6.2",
	  "redhat-6.2"   => "redhat-6.2",
	  "redhat-7.0"   => "redhat-6.2",
	  "mandrake-7.2" => "redhat-6.2",
    "debian-2.2"   => "debian-2.2"
	  );
  
  my %dist_tables =
	 (
	  "redhat-6.2" =>
	  {
	    ifaces_get => \&xst_network_sysconfig_ifaces_get_existing,
	    fn =>
	    {
        IFCFG => "/etc/sysconfig/network-scripts/ifcfg-#iface#",
        CHAT  => "/etc/sysconfig/network-scripts/chat-#iface#",
        IFACE => "#iface#",
        PAP   => "/etc/ppp/pap-secrets",
        CHAP  => "/etc/ppp/chap-secrets" },
	    table =>
          [
           [ "bootproto",          \&xst_network_rh62_parse_bootproto, IFCFG, BOOTPROTO ],
           [ "auto",               \&xst_parse_sh_bool, IFCFG, ONBOOT ],
           [ "user",               \&xst_parse_sh_bool, IFCFG, USERCTL ],
           [ "name",               \&xst_parse_sh,      IFCFG, NAME ],
           [ "dev",                \&xst_parse_sh,      IFCFG, DEVICE ],
           [ "address",            \&xst_parse_sh,      IFCFG, IPADDR ],
           [ "netmask",            \&xst_parse_sh,      IFCFG, NETMASK ],
           [ "broadcast",          \&xst_parse_sh,      IFCFG, BROADCAST ],
           [ "network",            \&xst_parse_sh,      IFCFG, NETWORK ],
           [ "gateway",            \&xst_parse_sh,      IFCFG, GATEWAY ],
           [ "peerdns",            \&xst_parse_sh_bool, IFCFG, PEERDNS ],
           [ "dns1",               \&xst_parse_sh,      IFCFG, DNS1 ],
           [ "dns2",               \&xst_parse_sh,      IFCFG, DNS2 ],
           [ "mtu",                \&xst_parse_sh,      IFCFG, MTU ],
           [ "mru",                \&xst_parse_sh,      IFCFG, MRU ],
           [ "remote_address",     \&xst_parse_sh,      IFCFG, REMIP ],
           [ "login",              \&xst_parse_sh,      IFCFG, PAPNAME ],
           [ "password",           \&xst_network_get_pap_passwd, PAP, "%login%" ],
           [ "password",           \&xst_network_get_pap_passwd, CHAP, "%login%" ],
           [ "serial_port",        \&xst_parse_sh,      IFCFG, MODEMPORT ],
           [ "serial_speed",       \&xst_parse_sh,      IFCFG, LINESPEED ],
           [ "ppp_options",        \&xst_parse_sh,      IFCFG, PPPOPTIONS ],
           [ "wvsection",          \&xst_parse_sh,      IFCFG, WVDIALSECT ],
           [ "set_default_gw",     \&xst_parse_sh_bool, IFCFG, DEFROUTE ],
           [ "debug",              \&xst_parse_sh_bool, IFCFG, DEBUG ],
           [ "persist",            \&xst_parse_sh_bool, IFCFG, PERSIST ],
           [ "serial_escapechars", \&xst_parse_sh_bool, IFCFG, ESCAPECHARS ],
           [ "serial_hwctl",       \&xst_parse_sh_bool, IFCFG, HARDFLOWCTL ],
           [ "phone_number",       \&xst_parse_chat,    CHAT, "^atd[^0-9]*([0-9, -]+)" ],
           [ "enabled",            \&xst_network_interface_active, IFACE, \&xst_network_active_interfaces_get ]
           ]
             },

    
	  "debian-2.2" =>
	  {
	    ifaces_get => \&xst_network_debian_ifaces_get_existing,
	    fn =>
	    {
        INTERFACES  => "/etc/network/interfaces",
        IFACE       => "#iface#",
        CHAT        => "/etc/chatscripts/%wvsection%",
        PPP_OPTIONS => "/etc/ppp/peers/%wvsection%",
        PAP         => "/etc/ppp/pap-secrets",
        CHAP        => "/etc/ppp/chap-secrets" },
	    table =>
          [
           [ "user",               \&xst_parse_trivial,                  0 ], # not supported.
           [ "dev",                \&xst_parse_trivial,                  IFACE ],
           [ "bootproto",          \&xst_network_deb22_parse_bootproto,  [INTERFACES, IFACE]],
           [ "auto",               \&xst_parse_interfaces_option_kw_not, [INTERFACES, IFACE], "noauto" ],
           [ "name",               \&xst_parse_interfaces_option_str,    [INTERFACES, IFACE], "name" ],
           [ "address",            \&xst_parse_interfaces_option_str,    [INTERFACES, IFACE], "address" ],
           [ "netmask",            \&xst_parse_interfaces_option_str,    [INTERFACES, IFACE], "netmask" ],
           [ "broadcast",          \&xst_parse_interfaces_option_str,    [INTERFACES, IFACE], "broadcast" ],
           [ "network",            \&xst_parse_interfaces_option_str,    [INTERFACES, IFACE], "network" ],
           [ "gateway",            \&xst_parse_interfaces_option_str,    [INTERFACES, IFACE], "gateway" ],
           [ "wvsection",          \&xst_parse_interfaces_option_str,    [INTERFACES, IFACE], "provider" ],
           [ "peerdns",            \&xst_parse_kw,                       PPP_OPTIONS, "usepeerdns" ],
           [ "dns1",               \&xst_parse_trivial,                  "" ], # not supported.
           [ "dns2",               \&xst_parse_trivial,                  "" ], # not supported.
           [ "mtu",                \&xst_parse_split_first_str,          PPP_OPTIONS, "mtu", "[ \t]+" ],
           [ "mru",                \&xst_parse_split_first_str,          PPP_OPTIONS, "mru", "[ \t]+" ],
           [ "remote_address",     \&xst_network_debian_parse_remote_address, [INTERFACES, IFACE]],
           [ "login",              \&xst_parse_split_first_str,          PPP_OPTIONS, "user", "[ \t]+" ],
           [ "password",           \&xst_network_get_pap_passwd,         PAP, "%login%" ],
           [ "password",           \&xst_network_get_pap_passwd,         CHAP, "%login%" ],
           [ "serial_port",        \&xst_network_get_ppp_options_re,     PPP_OPTIONS, "^(/dev/[^ \t]+)" ],
           [ "serial_speed",       \&xst_network_get_ppp_options_re,     PPP_OPTIONS, "^([0-9]+)" ],
           [ "ppp_options",        \&xst_network_get_ppp_options_unsup,  PPP_OPTIONS ],
           [ "set_default_gw",     \&xst_parse_kw,                       PPP_OPTIONS, "defaultroute" ],
           [ "debug",              \&xst_parse_kw,                       PPP_OPTIONS, "debug" ],
           [ "persist",            \&xst_parse_kw,                       PPP_OPTIONS, "persist" ],
           [ "serial_escapechars", \&xst_parse_split_first_str,          PPP_OPTIONS, "escape", "[ \t]+" ],
           [ "serial_hwctl",       \&xst_parse_kw,                       PPP_OPTIONS, "crtscts" ],
           [ "phone_number",       \&xst_parse_chat,                     CHAT, "^atd[^0-9]*([0-9, -]+)" ],
           [ "enabled",            \&xst_network_interface_active,       IFACE,
                                                                       \&xst_network_active_interfaces_get ]
           ]
             }
	  );
  
  my $dist = $dist_map{$xst_dist};
  return %{$dist_tables{$dist}} if $dist;

  # FIXME: This is a fatal error, and should make us bail.
  return undef;
}

sub xst_network_get_replace_table
{
  my %dist_map =
	 (
	  "redhat-6.0"   => "redhat-6.2",
	  "redhat-6.1"   => "redhat-6.2",
	  "redhat-6.2"   => "redhat-6.2",
	  "redhat-7.0"   => "redhat-6.2",
	  "mandrake-7.2" => "redhat-6.2",
    "debian-2.2"   => "debian-2.2"
	  );

  my %dist_tables =
	 (
	  "redhat-6.2" =>
	  {
	    fn =>
	    {
        SYSCONFIG_NW => "/etc/sysconfig/network",
        RESOLV_CONF  => "/etc/resolv.conf",
        HOST_CONF    => "/etc/host.conf",
        HOSTS        => "/etc/hosts",
        SMB_CONF     => "/etc/smb.conf",
        WVDIAL       => "/etc/wvdial.conf" },
	    table =>
          [
           [ "auto",          \&xst_replace_sh_bool,          SYSCONFIG_NW, NETWORKING ],
           [ "forward",       \&xst_replace_sh_bool,          SYSCONFIG_NW, FORWARD_IPV4 ],
           [ "hostname",      \&xst_replace_sh,               SYSCONFIG_NW, HOSTNAME ],
           [ "hostname",      \&xst_network_run_hostname ],
           [ "gateway",       \&xst_replace_sh,               SYSCONFIG_NW, GATEWAY],
           [ "gateway_dev",   \&xst_replace_sh,               SYSCONFIG_NW, GATEWAYDEV],
           [ "domain",        \&xst_replace_sh,               SYSCONFIG_NW, DOMAIN],
           [ "nameserver",    \&xst_replace_join_all,         RESOLV_CONF,  "nameserver", "[ \t]+" ],
           [ "searchdomain",  \&xst_replace_join_first_array, RESOLV_CONF,  "search", "[ \t]+", "[ \t]+" ],
           [ "domainname",    \&xst_replace_join_first_str,   RESOLV_CONF,  "domain", "[ \t]+" ],
           [ "order",         \&xst_replace_join_first_array, HOST_CONF,    "order", "[ \t]+", "," ],
           [ "hostmatch",     \&xst_replace_join_first_bool,  HOST_CONF,    "multi", "[ \t]+", "on", "off" ],
           [ "statichost",    \&xst_replace_join_hash,        HOSTS,        "[ \t]+", "[ \t]+" ],
           [ "workgroup",     \&xst_replace_ini,              SMB_CONF,     "global", "workgroup" ],     
           [ "description",   \&xst_replace_ini,              SMB_CONF,     "global", "server string" ],
           [ "winsserver",    \&xst_replace_ini,              SMB_CONF,     "global", "wins server" ],
           [ "winsuse",       \&xst_replace_ini_bool,         SMB_CONF,     "global", "wins support" ],
           [ "smbuse",        \&xst_service_sysv_set_status,  91, "smb" ],
           [ "dialing",       \&xst_network_dialing_set,      WVDIAL ],
           [ "interface",     \&xst_network_interfaces_set,		OLD_HASH ]
           ]
             },

    
	  "debian-2.2" =>
	  {
	    fn =>
	    {
        OPTIONS     => "/etc/network/options",
        RESOLV_CONF => "/etc/resolv.conf",
        HOST_CONF   => "/etc/host.conf",
        HOSTS       => "/etc/hosts",
        HOSTNAME    => "/etc/hostname",
        SMB_CONF    => "/etc/samba/smb.conf",
        WVDIAL      => "/etc/wvdial.conf" },
	    table =>
          [
           [ "forward",       \&xst_replace_sh_bool,          OPTIONS,     "ip_forward" ],
           [ "hostname",      \&xst_replace_line_first,       HOSTNAME ],
           [ "hostname",      \&xst_network_run_hostname ],
           [ "domain",				\&xst_replace_join_first_str,   RESOLV_CONF, "domain", "[ \t]+" ],
           [ "nameserver",    \&xst_replace_join_all,         RESOLV_CONF, "nameserver", "[ \t]+" ],
           [ "searchdomain",  \&xst_replace_join_first_array, RESOLV_CONF, "search", "[ \t]+", "[ \t]+" ],
           [ "domainname",    \&xst_replace_join_first_str,   RESOLV_CONF, "domain", "[ \t]+" ],
           [ "order",         \&xst_replace_join_first_array, HOST_CONF,   "order", "[ \t]+", "," ],
           [ "hostmatch",     \&xst_replace_join_first_bool,  HOST_CONF,   "multi", "[ \t]+", "on", "off" ],
           [ "statichost",    \&xst_replace_join_hash,        HOSTS,       "[ \t]+", "[ \t]+" ],
           [ "workgroup",     \&xst_replace_ini,              SMB_CONF,    "global", "workgroup" ],     
           [ "description",   \&xst_replace_ini,              SMB_CONF,    "global", "server string" ],
           [ "winsserver",    \&xst_replace_ini,              SMB_CONF,    "global", "wins server" ],
           [ "winsuse",       \&xst_replace_ini_bool,         SMB_CONF,    "global", "wins support" ],
           [ "smbuse",        \&xst_service_sysv_set_status,  91, "smb" ],
           [ "dialing",       \&xst_network_dialing_set,      WVDIAL ],
           [ "interface",     \&xst_network_interfaces_set,		OLD_HASH ]
           ]
             }
	  );
  
  my $dist = $dist_map{$xst_dist};
  return %{$dist_tables{$dist}} if $dist;

  # FIXME: This is a fatal error, and should make us bail.
  return undef;
}

sub xst_network_get_interface_replace_table
{
  my %dist_map =
	 (
	  "redhat-6.0"   => "redhat-6.2",
	  "redhat-6.1"   => "redhat-6.2",
	  "redhat-6.2"   => "redhat-6.2",
	  "redhat-7.0"   => "redhat-6.2",
	  "mandrake-7.2" => "redhat-6.2",
    "debian-2.2"   => "debian-2.2"
	  );

  my %dist_tables =
	(
    "redhat-6.2" =>
	  {
      iface_set    => \&xst_network_rh62_interface_activate,
      iface_delete => \&xst_network_rh62_interface_delete,
      ifaces_get   => \&xst_network_sysconfig_ifaces_get_existing,
      fn =>
	    {
        IFCFG  => "/etc/sysconfig/network-scripts/ifcfg-#iface#",
        CHAT   => "/etc/sysconfig/network-scripts/chat-#iface#",
        IFACE  => "#iface#",
        WVDIAL => "/etc/wvdial.conf"
      },
      table =>
       [
        [ "bootproto",          \&xst_network_rh62_replace_bootproto, IFCFG, BOOTPROTO ],
        [ "auto",               \&xst_replace_sh_bool, IFCFG, ONBOOT ],
        [ "user",               \&xst_replace_sh_bool, IFCFG, USERCTL ],
        [ "name",               \&xst_replace_sh,      IFCFG, NAME ],
        [ "dev",                \&xst_replace_sh,      IFCFG, DEVICE ],
        [ "address",            \&xst_replace_sh,      IFCFG, IPADDR ],
        [ "netmask",            \&xst_replace_sh,      IFCFG, NETMASK ],
        [ "broadcast",          \&xst_replace_sh,      IFCFG, BROADCAST ],
        [ "network",            \&xst_replace_sh,      IFCFG, NETWORK ],
        [ "gateway",            \&xst_replace_sh,      IFCFG, GATEWAY ],
        [ "peerdns",            \&xst_replace_sh_bool, IFCFG, PEERDNS ],
        [ "dns1",               \&xst_replace_sh,      IFCFG, DNS1 ],
        [ "dns2",               \&xst_replace_sh,      IFCFG, DNS2 ],
        [ "mtu",                \&xst_replace_sh,      IFCFG, MTU ],
        [ "mru",                \&xst_replace_sh,      IFCFG, MRU ],
        [ "remote_address",     \&xst_replace_sh,      IFCFG, REMIP ],
        [ "login",              \&xst_replace_sh,      IFCFG, PAPNAME ],
        [ "serial_port",        \&xst_replace_sh,      IFCFG, MODEMPORT ],
        [ "serial_speed",       \&xst_replace_sh,      IFCFG, LINESPEED ],
        [ "ppp_options",        \&xst_replace_sh,      IFCFG, PPPOPTIONS ],
        [ "wvsection",          \&xst_replace_sh,      IFCFG, WVDIALSECT ],
        [ "set_default_gw",     \&xst_replace_sh_bool, IFCFG, DEFROUTE ],
        [ "debug",              \&xst_replace_sh_bool, IFCFG, DEBUG ],
        [ "persist",            \&xst_replace_sh_bool, IFCFG, PERSIST ],
        [ "serial_escapechars", \&xst_replace_sh_bool, IFCFG, ESCAPECHARS ],
        [ "serial_hwctl",       \&xst_replace_sh_bool, IFCFG, HARDFLOWCTL ],
        [ "phone_number",       \&xst_replace_chat,    CHAT,  "^atd[^0-9]*([0-9, -]+)" ]
      ]
    },
    "debian-2.2" =>
	  {
      iface_set    => \&xst_network_rh62_interface_activate, # They use the same ifup/ifdown cmds.
      iface_delete => \&xst_network_deb22_interface_delete,
      ifaces_get   => \&xst_network_debian_ifaces_get_existing,
	    fn =>
	    {
        INTERFACES  => "/etc/network/interfaces",
        IFACE       => "#iface#",
        CHAT        => "/etc/chatscripts/%wvsection%",
        PPP_OPTIONS => "/etc/ppp/peers/%wvsection%",
        PAP         => "/etc/ppp/pap-secrets",
        CHAP        => "/etc/ppp/chap-secrets" },
	    table =>
          [
# not sup  [ "user",               \&xst_parse_sh_bool, IFCFG, USERCTL ],
           [ "bootproto",          \&xst_network_deb22_replace_bootproto,  [INTERFACES, IFACE]],
           [ "Auto",               \&xst_replace_interfaces_option_kw_not, [INTERFACES, IFACE], "noauto" ],
           [ "name",               \&xst_replace_interfaces_option_str,    [INTERFACES, IFACE], "name" ],
           [ "address",            \&xst_replace_interfaces_option_str,    [INTERFACES, IFACE], "address" ],
           [ "netmask",            \&xst_replace_interfaces_option_str,    [INTERFACES, IFACE], "netmask" ],
           [ "broadcast",          \&xst_replace_interfaces_option_str,    [INTERFACES, IFACE], "broadcast" ],
           [ "network",            \&xst_replace_interfaces_option_str,    [INTERFACES, IFACE], "network" ],
           [ "gateway",            \&xst_replace_interfaces_option_str,    [INTERFACES, IFACE], "gateway" ],
           [ "wvsection",          \&xst_replace_interfaces_option_str,    [INTERFACES, IFACE], "provider" ],
           [ "peerdns",            \&xst_replace_kw,                       PPP_OPTIONS, "usepeerdns" ],
# not sup  [ "dns1",               \&xst_replace_sh,                       IFCFG,       DNS1 ],
# not sup  [ "dns2",               \&xst_replace_sh,                       IFCFG, DNS2 ],
           [ "mtu",                \&xst_replace_join_first_str,           PPP_OPTIONS, "mtu", "[ \t]+" ],
           [ "mru",                \&xst_replace_join_first_str,           PPP_OPTIONS, "mru", "[ \t]+" ],
           [ "remote_address",     \&xst_network_debian_replace_remote_address, [INTERFACES, IFACE]],
           [ "login",              \&xst_replace_join_first_str,           PPP_OPTIONS, "user", "[ \t]+" ],
           [ "serial_port",        \&xst_network_set_ppp_options_re,       PPP_OPTIONS, "^(/dev/[^ \t]+)" ],
           [ "serial_speed",       \&xst_network_set_ppp_options_re,       PPP_OPTIONS, "^([0-9]+)" ],
           [ "wvsection",          \&xst_network_set_ppp_options_connect,  PPP_OPTIONS ],
           [ "ppp_options",        \&xst_network_set_ppp_options_unsup,    PPP_OPTIONS ],
           [ "set_default_gw",     \&xst_replace_kw,                       PPP_OPTIONS, "defaultroute" ],
           [ "debug",              \&xst_replace_kw,                       PPP_OPTIONS, "debug" ],
           [ "persist",            \&xst_replace_kw,                       PPP_OPTIONS, "persist" ],
           [ "serial_escapechars", \&xst_replace_join_first_str,           PPP_OPTIONS, "escape", "[ \t]+" ],
           [ "serial_hwctl",       \&xst_replace_kw,                       PPP_OPTIONS, "crtscts" ],
           [ "phone_number",       \&xst_replace_chat,                     CHAT, "^atd[^0-9]*([0-9, -]+)" ],
           ]
             }
  );
  
  my $dist = $dist_map{$xst_dist};
  return %{$dist_tables{$dist}} if $dist;

  # FIXME: This is a fatal error, and should make us bail.
  return undef;
}

1;
