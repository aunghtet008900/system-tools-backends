#!/usr/bin/env perl
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-

# Determine the platform we're running on.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Arturo Espinosa <arturo@ximian.com>
#          Hans Petter Jansson <hpj@ximian.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.


# --- System guessing --- #


sub check_debian
{
  my $ver;

  open DEBIAN, "/etc/debian_version" or return 0;
  chomp ($ver = <DEBIAN>);
  close DEBIAN;
  $xst_dist = "debian-$ver";
  return 1;
}


sub check_redhat
{
  open RELEASE, "/etc/redhat-release" or return 0;
  while (<RELEASE>)
  {
    chomp;
    if (/^Red Hat Linux.*\s+([0-9.]+)\s+.*/)
    {
      $xst_dist = "redhat-$1";
      close RELEASE;
      return 1;
    }
  }
  close RELEASE;
  return 0;
}


sub check_caldera
{
  open INSTALLED, "/etc/.installed" or return 0;
  while (<INSTALLED>)
  {
    chomp;
    if (/^OpenLinux-(.*)-.*/)
    {
      $xst_dist = "caldera-$1";
      close INSTALLED;
      return 1;
    }
  }
  close INSTALLED;
  return 0;
}


sub check_suse
{
  open RELEASE, "/etc/SuSE-release" or return 0;
  while (<RELEASE>)
  {
    chomp;
    if (/^VERSION\s*=\s*(\S+)/)
    {
      $xst_dist = "suse-$1";
      close RELEASE;
      return 1;
    }
  }
  close RELEASE;
  return 0;
}


sub check_mandrake
{
  open MANDRAKE, "/etc/mandrake-release" or return 0;
  while (<MANDRAKE>)
  {
    chomp;
    if (/^Linux Mandrake release (\S+)/)
    {
      $xst_dist = "mandrake-$1";
      close MANDRAKE;
      return 1;
    }
  }
  close MANDRAKE;
  return 0;
}


sub check_turbolinux
{
  open RELEASE, "/etc/turbolinux-release" or return 0;
  while (<RELEASE>)
  {
    chomp;
    if (/release\s([0-9.]+)\s.*/)
    {
      $xst_dist = "turbolinux-$1";
      close RELEASE;
      return 1;
    }
  }
  close RELEASE;
  return 0;
}


sub check_linuxppc
{
  open RELEASE, "/etc/redhat-release" or return 0;
  while (<RELEASE>)
  {
    chomp;
    if (/^LinuxPPC\s+(\S+)/)
    {
      $xst_dist = "linuxppc-$1";
      close RELEASE;
      return 1;
    }
  }
  close RELEASE;
  return 0;
}


sub xst_platform_guess
{
  my $dir = "___scriptsdir___";
  
  if (! -f "$dir/system.guess")
  {
    system ("$dir/guess_system.sh 2> /dev/null > $dir/system.guess");

    # FIXME: is this check for success correct? Taken from perlfunc.
    # NOTE: Don't need this check anymore. The system checks below are enough.
    #
    # if ($? >> 8)
    # {
    #   &xst_report_warning ("Couldn't guess system.");
    #   return;
    # }
  }

  if (-f "$dir/system.guess")
  {
    open FILE, "$dir/system.guess";
  }
  else
  {
    open FILE, "$dir/guess_system.sh 2>/dev/null |";
  }

  chomp ($xst_system = <FILE>);
  close FILE;

  # if the system is linux, &set $xst_dist and $xst_dist_version
  if ($xst_system =~ /linux/)
  {
       &check_debian
    || &check_caldera
    || &check_suse
    || &check_mandrake 
    || &check_linuxppc 
    || &check_redhat         # Red Hat check must run after Mandrake
    || &check_turbolinux;
  }
}


# xst_platform_ensure_supported
#
# Takes a list of supported platforms and sees if the one detected is found in
# this list. If not, will report a list of supported platforms and fail.

sub xst_platform_ensure_supported
{
  my @supported = @_;

  for $platform (@supported)
  {
    if ($platform eq $xst_dist) { return; }
  }

  # Not supported. Now list the ones we do support, and die.

  for $platform (@supported)
  {
    &xst_report_info (96, "Supported: [$platform]");
  }

  if ($xst_dist)
  {
    &xst_report_fatal (98, "Your platform is not supported");
    if (!$xst_reporting && !$xst_verbose)
    {
      print STDERR "Fatal error: Your platform is not supported.\n";
    }
  }
  else
  {
    &xst_report_fatal (99, "Unable to determine host platform");
    if (!$xst_reporting && !$xst_verbose)
    {
      print STDERR "Fatal error: Unable to determine host platform.\n";
    }
  }

  &xst_end ();
  exit (2);
}

1;
