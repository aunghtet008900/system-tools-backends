#!/usr/bin/env perl
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-

# Determine the platform we're running on.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Arturo Espinosa <arturo@ximian.com>
#          Hans Petter Jansson <hpj@ximian.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.


# --- System guessing --- #


$SCRIPTSDIR = "___scriptsdir___";
if ($SCRIPTSDIR =~ /^___scriptsdir__[_]/)
{
    $SCRIPTSDIR = ".";
    $DOTIN = ".in";
}

require "$SCRIPTSDIR/parse.pl$DOTIN";
require "$SCRIPTSDIR/xml.pl$DOTIN";


$PLATFORM_INFO = {
  "debian-2.2"     => "Debian GNU/Linux 2.2 Potato",
  "debian-woody"   => "Debian GNU/Linux 3.0 Woody",
  "redhat-5.2"     => "Red Hat Linux 5.2 Apollo",
  "redhat-6.0"     => "Red Hat Linux 6.0 Hedwig",
  "redhat-6.1"     => "Red Hat Linux 6.1 Cartman",
  "redhat-6.2"     => "Red Hat Linux 6.2 Zoot",
  "redhat-7.0"     => "Red Hat Linux 7.0 Guinness",
  "redhat-7.1"     => "Red Hat Linux 7.1 Seawolf",
  "redhat-7.2"     => "Red Hat Linux 7.2 Enigma",
  "mandrake-7.1"   => "Linux Mandrake 7.1",
  "mandrake-7.2"   => "Linux Mandrake 7.2 Odyssey",
  "mandrake-8.0"   => "Linux Mandrake 8.0 Traktopel",
  "suse-7.0"       => "SuSE Linux 7.0",
  "turbolinux-7.0" => "Turbolinux 7.0"
    };
  
sub check_lsb
{
  my ($ver, $dist);

  # xst_prefix not required here: parse already does that for us.
  $dist = lc (&xst_parse_sh ("/etc/lsb-release", "DISTRIB_ID"));
  $ver = lc (&xst_parse_sh ("/etc/lsb-release", "DISTRIB_RELEASE"));

  return -1 if ($dist eq "") || ($ver eq "");
  return "$dist-$ver";
}

sub check_debian
{
  my ($ver, $i);
  my %vermap =
      ("3.0" => "woody");

  open DEBIAN, "$xst_prefix/etc/debian_version" or return -1;
  chomp ($ver = <DEBIAN>);
  close DEBIAN;

  $ver = $vermap{$ver} if exists $vermap{$ver};
  
  return "debian-$ver";
}


sub check_redhat
{
  open RELEASE, "$xst_prefix/etc/redhat-release" or return -1;
  while (<RELEASE>)
  {
    chomp;
    if (/^Red Hat Linux.*\s+([0-9.]+)\s+.*/)
    {
      close RELEASE;
      return "redhat-$1";
    }
  }
  close RELEASE;
  return -1;
}


sub check_caldera
{
  open INSTALLED, "$xst_prefix/etc/.installed" or return -1;
  while (<INSTALLED>)
  {
    chomp;
    if (/^OpenLinux-(.*)-.*/)
    {
      close INSTALLED;
      return "caldera-$1";
    }
  }
  close INSTALLED;
  return -1;
}


sub check_suse
{
  open RELEASE, "$xst_prefix/etc/SuSE-release" or return -1;
  while (<RELEASE>)
  {
    chomp;
    if (/^VERSION\s*=\s*(\S+)/)
    {
      close RELEASE;
      return "suse-$1";
    }
  }
  close RELEASE;
  return -1;
}


sub check_mandrake
{
  open MANDRAKE, "$xst_prefix/etc/mandrake-release" or return -1;
  while (<MANDRAKE>)
  {
    chomp;
    if (/^Linux Mandrake release (\S+)/)
    {
      close MANDRAKE;
      return "mandrake-$1";
    }
  }
  close MANDRAKE;
  return -1;
}


sub check_turbolinux
{
  open RELEASE, "$xst_prefix/etc/turbolinux-release" or return -1;
  while (<RELEASE>)
  {
    chomp;
    if (/^Turbolinux\s.*\s([0-9.]+)\s.*/)
    {
      close RELEASE;
      return "turbolinux-$1";
    }
  }
  close RELEASE;
  return -1;
}


sub check_linuxppc
{
  open RELEASE, "$xst_prefix/etc/redhat-release" or return -1;
  while (<RELEASE>)
  {
    chomp;
    if (/^LinuxPPC\s+(\S+)/)
    {
      close RELEASE;
      return "linuxppc-$1";
    }
  }
  close RELEASE;
  return -1;
}

sub check_freebsd
{
  my ($sysctl_cmd, @output);

  $sysctl_cmd = &xst_file_locate_tool ("sysctl");
  @output = (readpipe("$sysctl_cmd -n kern.version"));
  foreach (@output)
  {
    chomp;
    if (/^FreeBSD\s(\S+)\.\S+.*/)
    {
      return "freebsd-$1";
    }
  }
  return -1;
}

sub check_solaris
{
  my ($fd, $dist);

  #
  # The file /etc/release is present for solaris-2.6
  # solaris 2.5 does not have the file.  Solaris-7.0 and 8.0 have not
  # been checked
  #
  # uname output
  # Solaris 2.5: 5.5(.1)
  # Solaris 2.6: 5.6
  # Solaris 7:   unknown, assume 7.0
  # Solaris 8:   unknown, assume 8.0
  #
  $fd = &xst_file_run_pipe_read ("uname -r");
  return -1 if $fd eq undef;
  chomp ($dist = <$fd>);
  &xst_file_close ($fd);

  if ($dist =~ /^5\.(\d)/) { return "solaris-2.$1" }
  else { if ($dist =~ /^([78])\.\d/) { return "solaris-$1.0" } }
  return -1;
}

sub xst_platform_guess
{
  my ($tool) = @_;
  my $dir = "$SCRIPTSDIR";
  
  if (! -f "$dir/system.guess")
  {
    system ("$dir/guess_system.sh 2> /dev/null > $dir/system.guess");
  }

  if (-f "$dir/system.guess")
  {
    open FILE, "$dir/system.guess";
  }
  else
  {
    open FILE, "$dir/guess_system.sh 2>/dev/null |";
  }

  chomp ($$tool{"system"} = <FILE>);
  close FILE;

  # set $xst_dist and $xst_dist_version
  
  my %check = (
    # Red Hat check must run after Mandrake
    "linux" => [ \&check_lsb,      \&check_debian,   \&check_caldera, \&check_suse, 
                 \&check_mandrake, \&check_linuxppc, \&check_redhat,  \&check_turbolinux],
    # Isn't just "freebsd" enough?
    "freebsdelf" => [ \&check_freebsd ],
    "solaris"    => [ \&check_solaris ]
               );
  my $plat;

  # Fool-the-backend hack.
  if (exists $ENV{"XST_DIST"})
  {
    $$tool{"platform"} = $xst_dist = $ENV{"XST_DIST"};
    return;
  }

  foreach $plat (keys %check)
  {
    if ($$tool{"system"} =~ /$plat/)
    {
      my ($check, $dist);
      
      foreach $check (@{$check{$plat}})
      {
        $dist = &$check ();
        if ($dist != -1)
        {
          $$tool{"platform"} = $xst_dist = $dist;
          return;
        }
      }
    }
  }

  $$tool{"platform"} = $xst_dist = "unknown";
}


# xst_platform_ensure_supported
#
# Takes a list of supported platforms and sees if the one detected is found in
# this list. If not, will report a list of supported platforms and fail.

sub xst_platform_ensure_supported
{
  my ($tool, @supported) = @_;

  $$tool{"platforms"} = [ @supported ];

  foreach $platform (@supported)
  {
    if ($platform eq $$tool{"platform"})
    {
      &xst_report ("platform_success", $platform, $$PLATFORM_INFO{$platform});
      return;
    }
  }

  # Not supported.
  if (exists $$tool{"platform"})
  {
    &xst_report ("platform_unsup", $$tool{"platform"});
  }
  else
  {
    &xst_report ("platform_undet");
  }
}


# A directive handler that sets the currently selected platform.
sub xst_platform_set
{
  my ($tool, $platform) = @_;
  my ($p);

  foreach $p (@{ $$tool{"platforms"}})
  {
    if ($p eq $platform)
    {
      $$tool{"platform"} = $xst_dist = $platform;
      &xst_report ("platform_success", $platform, $$PLATFORM_INFO{$platform});
      &xst_report_end ();
      return;
    }
  }

  &xst_report ("platform_unsup", $platform);
  &xst_report_end ();
}

sub xst_platform_print_list
{
  my ($platforms) = @_;
  my ($platform, $name);

  &xst_xml_print_begin ("platforms");
  foreach $platform (sort @$platforms)
  {
    $name = $$PLATFORM_INFO{$platform};

    &xst_xml_container_enter ("platform");
    &xst_xml_print_line ("<key>$platform</key>");
    &xst_xml_print_line ("<name>$name</name>");
    &xst_xml_container_leave ();
  }
  &xst_xml_print_end ("platforms");
}

sub xst_platform_list
{
  my ($tool) = @_;

  &xst_report_end ();
  &xst_platform_print_list ($$tool{"platforms"});
}

1;
