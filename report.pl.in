#!/usr/bin/env perl
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: f; c-basic-offset: 2 -*-

# Functions for on-the-fly commentary on a tool's work.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Hans Petter Jansson <hpj@ximian.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.


require "___scriptsdir___/general.pl";


# --- Progress printing --- #


$xst_progress_current = 0;  # Compat with old $progress_max use.
$xst_progress_last_percentage = 0;


sub xst_progress
{
  $prc = @_[0];

  if ($prc < $xst_progress_last_percentage)
  {
    # Don't go backwards.
    $prc = $xst_progress_last_percentage;
  }

  if ($prc >= 100)
  {
    # Don't go above 99%.
    $prc = 99;
  }

  if ($xst_progress) { printf "%03d percent done.\n", $prc; }

  $xst_progress_last_percentage = $prc;
}


sub xst_progress_begin { &xst_progress (0); }


sub xst_progress_end { &xst_progress (99); }


sub xst_print_progress  # Compat with old $progress_max use.
{
  my $prc;

  $xst_progress_current++;
  &xst_progress (($xst_progress_current * 100) / $progress_max);
}


# --- Report printing --- #


sub xst_report
{
  if ($xst_reporting)
  {
    printf "%1d%02d %s.\n", @_[0], @_[1], @_[2];
  }
}


sub xst_report_begin
{
  &xst_report (1, 00, "Start of work report");
}


sub xst_report_end
{
  &xst_report (1, 01, "End of work report");
  if ($xst_reporting) { print "\n"; }
}


sub xst_report_info
{
  if ($xst_verbose)
  {
    printf STDERR "%s.\n", @_[1];
  }

  &xst_report (2, @_[0], @_[1]);
}


sub xst_report_warning
{
  if ($xst_verbose)
  {
    printf STDERR "Warning: %s.\n", @_[1];
  }

  &xst_report (3, @_[0], @_[1]);
}


sub xst_report_error
{
  if ($xst_verbose)
  {
    printf STDERR "Error: %s.\n", @_[1];
  }

  &xst_report (4, @_[0], @_[1]);
}


sub xst_report_fatal
{
  if ($xst_verbose)
  {
    printf STDERR "Fatal error: %s.\n", @_[1];
  }

  &xst_report (5, @_[0], @_[1]);
}

1;
