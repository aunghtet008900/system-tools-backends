#!/usr/bin/env perl
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-

# Functions for internet sharing setup.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Arturo Espinosa <arturo@ximian.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

require "___scriptsdir___/file.pl";
require "___scriptsdir___/service.pl";
require "___scriptsdir___/network.pl";


sub xst_ishare_get_linux22_forward_support_active
{
  my ($hash) = @_;
  my $forward_file = "/proc/sys/net/ipv4/ip_forward";
  my ($fd, $val);
  
  $fd = &xst_file_open_read_from_names ($forward_file);
  $val = <$fd>;
  chomp $val;
  $$hash{"active"} = ($val == 1)? 1: 0;
  &xst_file_close ($fd);
}
  

sub xst_ishare_get_linux22_forward_support
{
  my ($hash) = @_;
  my ($forward_file, $masq_file) =
      ("/proc/sys/net/ipv4/ip_forward", "/proc/sys/net/ipv4/ip_masq_debug");

  $$hash{"forwarding"}   = (-f $forward_file)? 1: 0;
  $$hash{"masquerading"} = (-f $masq_file)?    1: 0;
}


sub xst_ishare_fwrules_get_ipchains
{
  my ($ipchains_conf) = @_;
  my (%hash, $fd, $val);

  $hash{"tools"} = &xst_file_tool_installed ("ipchains");
  $$hash{"kerneltool"} = (-f "/proc/net/ip_fwchains")? 1: 0;

  if ($hash{"tools"})
  {
    $fd = &xst_file_open_read_from_names ($ipchains_conf);
    if ($fd ne undef)
    {
      $hash{"configured"} = 0;
      while ($val = <$fd>)
      {
        if ($val =~ /^-A forward.*MASQ$/)
        {
          $hash{"configured"} = 1;
          last;
        }
      }
      
      &xst_file_close ($fd);
    }
  }

  &xst_ishare_get_linux22_forward_support (\%hash);
  &xst_ishare_get_linux22_forward_support_active (\%hash) if ($hash{"configured"});

  return \%hash;
}


sub xst_ishare_ipchains_save
{
  my ($ipchains_conf, $interface, $values_hash) = @_;
  my ($fd, $dev, $landev, $landevs, $network, $netmask);
  my (@buff, $line);
  
  $fd = &xst_file_run_pipe_read ("ipchains-save");
  @buff = (<$fd>);
  &xst_file_close ($fd);

  foreach $line (@buff)
  {
    $line = "" if $line =~ /^-A forward.*MASQ$/;
  }

  $landevs = $$values_hash{"landev"};
  foreach $landev (@$landevs)
  {
    $dev = $$interface{$landev};
    $netmask = $$dev{"netmask"};
    $network = &xst_network_ipv4_calc_subnet ($$dev{"address"}, $netmask);
    push @buff, "-A forward -s $network/$netmask -d 0.0.0.0/0.0.0.0 -j MASQ\n";
  }

  &xst_file_buffer_clean (\@buff);
  &xst_file_buffer_save (\@buff, $ipchains_conf);
}


sub xst_ishare_fwrules_set_ipchains
{
  my ($ipchains_conf, $priority, $interface, $values_hash) = @_;

  if ($$values_hash{"overwrite"})
  {
    &xst_ishare_ipchains_save ($ipchains_conf, $interface, $values_hash);
  }
  
  &xst_service_sysv_set_status ($priority, "ipchains", $$values_hash{"active"});

  &xst_file_run ("echo " . $$values_hash{"active"} . " > /proc/sys/net/ipv4/ip_forward");
  &xst_replace_sh_bool ("/etc/sysconfig/network", "FORWARD_IPV4", $$values_hash{"active"});
}


sub xst_ishare_dhcp_isc_get
{
  my ($dhcpd_conf) = @_;
  my (%hash);

  $hash{"installed"}  = &xst_service_sysv_installed ("dhcpd");
  $hash{"configured"} = ((-f "/etc/dhcpd.conf")? 1: 0)         if $hash{"installed"};
  $hash{"active"}     = &xst_service_sysv_get_status ("dhcpd") if $hash{"configured"};
  $hash{"dev"}        = &xst_parse_split_first_array ("/etc/conf.linuxconf", "DHCP.interface",
                                                      "[ \t]+", "[ \t]+");
  
  return \%hash;
}


sub xst_ishare_dhcp_conf_add_interface
{
  my ($buff, $address, $netmask, $hwaddr) = @_;
  my ($network, $broadcast, $min, $max, $hostname);

  $hostname = &xst_file_run_backtick ("hostname");
  chomp $hostname;
  $hostname = "server" if $hostname eq "";

  $min = $network   = &xst_network_ipv4_calc_subnet ($address, $netmask);
  $max = $broadcast = &xst_network_ipv4_calc_bcast  ($address, $netmask);

  $max =~ s/([0-9]+)$//;
  $max .= $1 - 1;
                   
  $min =~ s/([0-9]+)$//;
  $min .= $1 + 1;
                   
  push @$buff, "subnet $network netmask $netmask {\n\n";
  push @$buff, "\toption routers       $address;\n";
  push @$buff, "\toption subnet-mask   $netmask;\n\n";
  push @$buff, "\trange  dynamic-bootp $min $max;\n\n";
  push @$buff, "\tdefault-lease-time 21600;\n";
  push @$buff, "\tmax-lease-time     43200;\n\n";
  push @$buff, "\thost $hostname {\n";
  push @$buff, "\t\thardware ethernet $hwaddr;\n";
  push @$buff, "\t\tfixed-address $address;\n";
  push @$buff, "\t}\n";
  push @$buff, "}\n\n";
}


sub xst_ishare_dhcp_isc_save
{
  my ($dhcpd_conf, $interface, $values_hash) = @_;
  my ($dev, $devs, $iface);
  my (@buff, $info);

  $info = &xst_network_active_interfaces_get_info ();
  $devs = $$values_hash{"dev"};
  
  foreach $dev (@$devs)
  {
    $iface = $$interface{$dev};

    &xst_ishare_dhcp_conf_add_interface (\@buff, $$iface{"address"}, $$iface{"netmask"},
                                         $ {$$info{$$iface{"dev"}}}{"hwaddr"});
  }

  &xst_file_buffer_clean (\@buff);
  &xst_file_buffer_save (\@buff, $dhcpd_conf);
}


sub xst_ishare_dhcp_isc_set
{
  my ($dhcpd_conf, $priority, $interface, $values_hash) = @_;

  if ($$values_hash{"overwrite"})
  {
    # This is compatible with linuxconf's format.
    &xst_replace_join_first_array ("/etc/conf.linuxconf", "DHCP.interface", " ", " ", $$values_hash{"dev"});

    &xst_ishare_dhcp_isc_save ($dhcpd_conf, $interface, $values_hash);
  }
  
  &xst_service_sysv_set_status ($priority, "dhcpd", $$values_hash{"active"});
}


sub xst_ishare_conf_get
{
  my %dist_attrib;
  my $hash;

  %dist_attrib = &xst_ishare_conf_get_parse_table ();

  $hash = &xst_parse_from_table ($dist_attrib{"fn"},
                                 $dist_attrib{"table"});
  return $hash;
}


sub xst_ishare_conf_set
{
  my ($values_hash) = @_;
  my (%dist_attrib, $old_hash);

  %dist_attrib = &xst_ishare_conf_get_replace_table ();

  $old_hash = &xst_network_conf_get ();
  $res = &xst_replace_from_table ($dist_attrib{"fn"}, $dist_attrib{"table"},
                                  $values_hash, $old_hash);

  &xst_service_sysv_set_status ($priority, "ipchains", $$values_hash{"active"});
  return $res;
}

sub xst_ishare_conf_get_parse_table
{
  my %dist_map =
  (
   "redhat-7.0"   => "mandrake-7.2",
   "redhat-7.1"   => "mandrake-7.2",
   "mandrake-7.2" => "mandrake-7.2",
   );

  my %dist_tables =
      (
       "mandrake-7.2" =>
       {
         fn =>
         {
           IPCHAINS_CONF => "/etc/sysconfig/ipchains",
           DHCPD_CONF    => "/etc/dhcpd.conf"
         },
         table =>
             [
              [ "interface", \&xst_network_interfaces_get ],
              [ "fwrules",   \&xst_ishare_fwrules_get_ipchains, IPCHAINS_CONF],
              [ "dhcp",      \&xst_ishare_dhcp_isc_get,       DHCPD_CONF],
              ]
                },
       );

  my $dist = $dist_map {$xst_dist};
  return %{$dist_tables{$dist}} if $dist;

  &xst_report ("platform_no_table", $xst_dist);
  return undef;
}

sub xst_ishare_conf_get_replace_table
{
  my %dist_map =
  (
   "redhat-7.0"   => "mandrake-7.2",
   "redhat-7.1"   => "mandrake-7.2",
   "mandrake-7.2" => "mandrake-7.2",
   );

  my %dist_tables =
      (
       "mandrake-7.2" =>
       {
         fn =>
         {
           IPCHAINS_CONF => "/etc/sysconfig/ipchains",
           DHCPD_CONF    => "/etc/dhcpd.conf"
         },
         table =>
             [
              [ "interface", \&xst_network_interfaces_set,      OLD_HASH ],
              [ "fwrules",   \&xst_ishare_fwrules_set_ipchains, IPCHAINS_CONF, 8,  "%interface%" ],
              [ "dhcp",      \&xst_ishare_dhcp_isc_set,         DHCPD_CONF,    65, "%interface%" ],
              ]
                },
       );

  my $dist = $dist_map {$xst_dist};
  return %{$dist_tables{$dist}} if $dist;

  &xst_report ("platform_no_table", $xst_dist);
  return undef;
}
