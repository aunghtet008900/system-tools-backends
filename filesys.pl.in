#!/usr/bin/env perl
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-

# Working with filesystems, both local and networked.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Hans Petter Jansson <hpj@ximian.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

require "___scriptsdir___/file.pl";
require "___scriptsdir___/parse.pl";
require "___scriptsdir___/xml.pl";


# --- Utilities --- #


sub xst_filesys_translate_ext2_device_to_label  # device
{
  my ($device) = @_;
  my $label;
  my $e2label_tool;
  local *E2LABEL_FD;

  $e2label_tool = &xst_file_locate_tool ("e2label");
  if ($e2label_tool eq "") { return undef; }

  open (E2LABEL_FD, "/bin/sh -c \"$e2label_tool $device\" 2>/dev/null |");
  $label = <E2LABEL_FD>;
  $label =~ tr/\n\r//d;
  close (E2LABEL_FD);

  if ($label eq "") { return undef; }
  return $label;
}


# --- filesys_info; information on a particular filesystem --- #


sub xst_filesys_info_new
{
  my $info = {};
  my $opthash = {};

  $$info{'options'} = $opthash;
  return ($info);
}

# Make a deep copy of a filesys_info struct.
#
# Returns a newly allocated filesys_info, identical to the argument.

sub xst_filesys_info_dup           # filesys_info
{
  my $orig = $_[0];
  my $dup = { };

  foreach (keys %$orig)
  {
    $$dup{$_} = $$orig{$_};
  }

  $$dup{'options'} = { };
  my $hash = $$orig{'options'};
  foreach (keys %$hash)
  {
    $dup->{'options'}{$_} = $orig->{'options'}{$_};
  }

  return $dup;
}

# Generic set function for filesys_info properties. We need this to
# delete keys if they don't have meaningful values, otherwise an empty
# value could override a perfectly good value in a merge.

sub xst_filesys_info_set           # filesys_info, key, value
{
  if ($_[2] eq "") { delete $_[0]->{$_[1]}; }
  else             { $_[0]->{$_[1]} = $_[2]; }
}

sub xst_filesys_info_get_device    # filesys_info
{
  return $_[0]->{'device'};
}

sub xst_filesys_info_set_device    # filesys_info, device
{
  &xst_filesys_info_set ($_[0], 'device', $_[1]);
}

sub xst_filesys_info_get_label     # filesys_info
{
  return $_[0]->{'label'};
}

sub xst_filesys_info_set_label     # filesys_info, label
{
  &xst_filesys_info_set ($_[0], 'label', $_[1]);
}

sub xst_filesys_info_get_uuid      # filesys_info
{
  return $_[0]->{'uuid'};
}

sub xst_filesys_info_set_uuid      # filesys_info, uuid
{
  &xst_filesys_info_set ($_[0], 'uuid', $_[1]);
}

sub xst_filesys_info_get_point     # filesys_info
{
  return $_[0]->{'point'};
}

sub xst_filesys_info_set_point     # filesys_info, point
{
  &xst_filesys_info_set ($_[0], 'point', $_[1]);
}

sub xst_filesys_info_get_fs        # filesys_info
{
  return $_[0]->{'fs'};
}

sub xst_filesys_info_set_fs        # filesys_info, fs
{
  &xst_filesys_info_set ($_[0], 'fs', $_[1]);
}

sub xst_filesys_info_get_dump      # filesys_info
{
  return $_[0]->{'dump'};
}

sub xst_filesys_info_set_dump      # filesys_info, dump
{
  &xst_filesys_info_set ($_[0], 'dump', $_[1]);
}

sub xst_filesys_info_get_priority  # filesys_info
{
  return $_[0]->{'priority'};
}

sub xst_filesys_info_set_priority  # filesys_info, priority
{
  &xst_filesys_info_set ($_[0], 'priority', $_[1]);
}

sub xst_filesys_info_get_option    # filesys_info, option
{
  return $_[0]->{'options'}{$_[1]};
}

# We can't delete keys with no values here, since most fs options don't
# have values (i.e. they key's presence constitutes a boolean).

sub xst_filesys_info_set_option    # filesys_info, option, value
{
  $_[0]->{'options'}{$_[1]} = $_[2];
}


# --- filesys_table; multiple instances of filesys_info --- #


sub xst_filesys_table_new
{
  my @array;
  return \@array;
}

# Make a deep copy of a filesys_table struct.
#
# Returns a newly allocated filesys_table, identical to the argument.

sub xst_filesys_table_dup          # filesys_table
{
  my $orig = $_[0];
  my $dup = &xst_filesys_table_new ();

  foreach (@$orig)
  {
    &xst_filesys_table_add ($dup, &xst_filesys_info_dup ($_));
  }

  return $dup;
}

# Add a filesys_info reference to a filesys_table. Note: This function
# does not check for uniqueness, which lets you add several references
# to the same filesys_info.

sub xst_filesys_table_add          # filesys_table, filesys_info
{
  my ($table, $info) = @_;

  push @$table, $info;
}

# Ensure that a filesys_info reference exists in a filesys_table. If it
# doesn't, it will be added. If it does, no action will be taken.

sub xst_filesys_table_ensure       # filesys_table, filesys_info
{
  my ($table, $info) = @_;

  foreach (@$table)
  {
    if ($_ eq $info)
    {
      return;
    }
  }

  xst_filesys_table_add ($table, $info);
}

# Remove a filesys_info reference from a filesys_table.

sub xst_filesys_table_remove       # filesys_table, filesys_info
{
  my ($table, $info) = @_;
  my $i;

  if ($info == undef) { return; }

  for ($i = 0; $i < @$table; $i++)
  {
    if (@$table [$i] eq $info)
    {
      @$table = (@$table [0 .. $i - 1], @$table [$i + 1 .. @$table - 1]);
      return;
    }
  }

  &xst_debug_print_line ("Entry to remove [" . $info . "] not found in filesys_table.");
}

# Find and return a reference to a filesys_info in a filesys_table
# based on keytype and key.
#
# keytype :- [device | label | uuid | point]

sub xst_filesys_table_find         # filesys_table, keytype, key
{
  my ($table, $keytype, $key) = @_;

  foreach (@$table)
  {
    if ($_->{$keytype} eq $key)
    {
      return $_;
    }
  }

  &xst_debug_print_line ("Entry [" . $keytype . " -> " . $key . "] not found in filesys_table.");
  return undef;
}

# Merges filesys tables A and B, resolving conflicts by giving priority to A.
# Any entries in A not in B are preserved. This can also be described as
# "salting" one table with another.
#
# Returns a newly allocated table C, which is a superset of A and B.

# UNFINISHED

sub xst_filesys_table_merge_superset  # filesys_table A, filesys_table B
{
  my ($intab_a, $intab_b) = @_;
  my $outtab;

  $outtab = &xst_filesys_table_dup ($intab_b);

  foreach (@$intab_a)
  {
    if ($_ eq "options") { next; }


  }
}

# Merges filesys tables A and B, resolving conflicts by giving priority to A.
# Any entries in A not in B are dropped.
#
# Returns a newly allocated table C, which is a subset of A and B.

# UNFINISHED

sub xst_filesys_table_merge_subset    # filesys_table A, filesys_table B
{
}


# --- Parsing --- #


# Get all instances from fstab-style file. Returns a filesys_table.
#
# This is not done in smaller, atomic funcs that get single options
# per disk device, due to the fact that a device is identified either
# by its label, uuid or device node, and a label can be made to look
# like a device node. For each device, we need to specify the kind of
# key(s) used, and making a special-format string for that (which could
# be passed to option readers) would be a bad hack.

sub xst_filesys_parse_fstab  # filename
{
  my ($file) = @_;
  my ($fd, $table);

  $fd = &xst_file_open_read_from_names ($file);
  return undef if !$fd;

  $table = &xst_filesys_table_new ();

  while (($_ = &xst_parse_chomp_line_hash_comment ($fd)) != -1)
  {
    # Each line is in the following format:
    # <device> <mount point> <filesystem> <options> <dump flag> <fsck priority>
    my @line = split /[ \t]+/, $$_;
    next if (@line < 6);
    my ($device, $point, $fs, $options, $dump, $fsck) = @line;

    my $fsi = &xst_filesys_info_new ();

    # <device> expands to "LABEL=<label>", "UUID=<uuid>" or "<device node>".
    if    ($device =~ /^LABEL=(.*)/i) { &xst_filesys_info_set_label  ($fsi, $1); }
    elsif ($device =~ /^UUID=(.*)/i)  { &xst_filesys_info_set_uuid   ($fsi, $1); }
    else
    {
      &xst_filesys_info_set_device ($fsi, $device);

      # We know only the device node. Try to get label too.
      if ($fs eq "ext2" || $fs eq "auto")
      {
        &xst_filesys_info_set_label ($fsi, &xst_filesys_translate_ext2_device_to_label ($device));
      }
    }

    # <options> expands to "<option>[,<option>[,...]]".
    my @optlist = split /[,]/, $options;

    foreach $option (@optlist)
    {
      # <option> expands to "<key>[=<value>]". <key> == "defaults" is ignored.
      my ($key, $value) = split /[=]/, $option;
      next if ($key eq "" || $key eq "defaults");

      &xst_filesys_info_set_option ($fsi, $key, $value);
    }

    # <mount point>, <fs>, <dump flag> and <fsck priority> are verbatim.
    &xst_filesys_info_set_point    ($fsi, $point);
    &xst_filesys_info_set_fs       ($fsi, $fs);
    &xst_filesys_info_set_dump     ($fsi, $dump);
    &xst_filesys_info_set_priority ($fsi, $fsck);

    # Link it in.
    &xst_filesys_table_add ($table, $fsi);
  }

  close $fd;
  return $table;
}

# Get all instances from mtab-style file. Returns a filesys_table.

sub xst_filesys_parse_mtab  # filename
{
  my ($file) = @_;
  my ($fd, $table);

  $fd = &xst_file_open_read_from_names ($file);
  return undef if !$fd;

  $table = &xst_filesys_table_new ();

  while (($_ = &xst_parse_chomp_line_hash_comment ($fd)) != -1)
  {
    # Columns are separated by one, and only one, space. The presence of one or
    # more blank values is indicated by a string of several spaces.
    my @line = split /[ ]/, $$_;

    # Each line is in the following format:
    # <device> <mount point> <filesystem> <options> <dump flag> <fsck priority>
    next if (@line < 6);
    my ($device, $point, $fs, $options, $dump, $fsck) = @line;

    my $fsi = &xst_filesys_info_new ();

    # <device> expands to "<device node>" (unlike fstab, which has dev|label|uuid).
    # <mount point>, <fs>, <dump flag> and <fsck priority> are verbatim.
    &xst_filesys_info_set_device   ($fsi, $device);
    &xst_filesys_info_set_point    ($fsi, $point);
    &xst_filesys_info_set_fs       ($fsi, $fs);
    &xst_filesys_info_set_dump     ($fsi, $dump);
    &xst_filesys_info_set_priority ($fsi, $fsck);

    # <options> expands to "<option>[,<option>[,...]]".
    my @optlist = split /[,]/, $options;

    foreach $option (@optlist)
    {
      # <option> expands to "<key>[=<value>]". <key> == "defaults" is ignored.
      my ($key, $value) = split /[=]/, $option;
      next if ($key eq "" || $key eq "defaults");

      &xst_filesys_info_set_option ($fsi, $key, $value);
    }

    # If we have an ext2 device, try to get its label. This is very useful
    # for matching/table merging.
    if ($fs eq "ext2")
    {
      &xst_filesys_info_set_label ($fsi, &xst_filesys_translate_ext2_device_to_label ($device));
    }

    # Link it in.
    &xst_filesys_table_add ($table, $fsi);
  }

  close $fd;
  return $table;
}
