#!/usr/bin/env perl
#-*-perl-*-

# Simple networking configurator. Designed to be architecture- and distribution independent.
#
# Copyright (C) 2000 Helix Code, Inc.
#
# Authors: Hans Petter Jansson <hpj@helixcode.com>
#          David Lee Ludwig <davidl@wpi.edu> - Debian 2.[2|3] support.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Best viewed with 100 columns of width.

# WARNING: Works with Red Hat (and probably most derivates) and SuSE.
# We're more than happy to receive patches for other distributions.

# Configuration files affected:
#
# /etc/sysconfig/network
# /etc/sysconfig/network-scripts/ifcfg-*
# /etc/rc.config
# /etc/network/interfaces
# /etc/network/options

# Running programs affected/used:
#
# ifup
# ifdown



require "/usr/share/helix-setup-tools/scripts/be.pl";



# --- Usage text --- #

my $Usage =<<"End_of_Usage;";
Usage: networking-conf <--get | --set | --filter | --help>
                       [--prefix <location>] [--disable-immediate]
                       [--verbose] [--progress]

       Major operations (specify one of these):

       -g --get      Prints the current networking configuration to
                     standard output, as as standalone XML document. The
                     configuration is read from the host\'s system config
                     files.

       -s --set      Updates the system networking configuration from
                     a standalone XML document read from standard input.
                     The format is the same as for the document generated
                     with --get.

       -f --filter   Reads XML configuration from standard input, parses it,
                     and writes the configurator\'s impression of it back to
                     standard output. Good for debugging and parsing tests.

       -h --help     Prints this page to standard output.

          --version  Prints version information to standard output.

       Modifiers (specify any combination of these):

       -p --prefix <location>  Specifies a directory prefix where the
                     configuration is looked for or stored. When storing
                     (with --set), directories and files may be created.

          --disable-immediate  With --set, prevents the configurator from
                     running any commands that make immediate changes to
                     the system configuration. Use with --prefix to make a
                     dry run that won\'t affect your configuration.

                     With --get, suppresses running of non-vital external
                     programs that might take a long time to finish.

       -v --verbose  Turns on diagnostic messages to standard error.

          --progress Prints progress information suitable for interactive
                     frontends to standard output. The progress information
                     is printed before any XML, and consists of a decimal
                     number saying how many dots to expect, followed by a
                     newline, and a running line of dots as the operation
                     progresses, followed by a newline after the last dot.
                     The dots generated can be more or less than the
                     number indicated on the first line.

End_of_Usage;

$version = "0.1.0";

$progress_max = 5;

# --- System config file locations --- #

# We list each config file type with as many alternate locations as possible.
# They are tried in array order. First found = used.

# Right now there's only one entry per array, as I couldn't find any
# typical deviations.

@sysconfig_network_names = ( "/etc/sysconfig/network" );
@rc_config_names =         ( "/etc/rc.config" );
@network_interfaces_names = ( "/etc/network/interfaces" );
@network_options_names = ( "/etc/network/options" );

# --- Internal configuration variables --- #

# Configuration is parsed/read to, and printed/written from, these temporary variables.

$cf_networking = 0;

$cf_interface = "";
$cf_interface_list = ();
$cf_hostip = "";
$cf_netmask = "";
$cf_gateway = "";
$cf_method = "static";
$cf_onboot = 1;
$cf_forward = 0;


# --- XML printing --- #


sub xml_print
{
  my $cfl_interface = be_xml_plain_to_entities(\$cf_interface);
  my $cfl_hostip = be_xml_plain_to_entities(\$cf_hostip);
  my $cfl_netmask = be_xml_plain_to_entities(\$cf_netmask);
  my $cfl_gateway = be_xml_plain_to_entities(\$cf_gateway);
  my $cfl_method = be_xml_plain_to_entities(\$cf_method);

  print "<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>\n";
  print "<!DOCTYPE networking []>\n\n";
  print "<networking>\n";
  be_xml_enter;

  be_xml_vspace;
  be_xml_indent; print "<!-- Configuration starts here -->\n";
  be_xml_vspace;

  # Hostname, domain, search domains, nameservers.

  be_xml_indent;
  if ($cf_onboot) { print "<enabled state='yes'/>\n"; }
  else            { print "<enabled state='no'/>\n"; }

  be_xml_vspace;

  if ($cfl_interface ne "") { be_xml_indent; print "<primaryinterface>$cfl_interface</primaryinterface>\n"; }
  if ($cfl_hostip ne "") { be_xml_indent; print "<hostip>$cfl_hostip</hostip>\n"; }
  if ($cfl_netmask ne "") { be_xml_indent; print "<netmask>$cfl_netmask</netmask>\n"; }
  if ($cfl_gateway ne "") { be_xml_indent; print "<gateway>$cfl_gateway</gateway>\n"; }
  be_xml_vspace;
  if ($cfl_method ne "") { be_xml_indent; print "<method>$cfl_method</method>\n"; }
  be_xml_vspace;

  be_xml_vspace;
  be_xml_indent; print "<!-- You shouldn't have to modify anything below this line -->\n";
  be_xml_vspace;

  be_xml_indent; 
  if ($cf_forward) { print "<forward state='yes'/>\n"; }
  else             { print "<forward state='no'/>\n"; }

  be_xml_vspace;
  be_xml_indent; print "<!-- You cannot modify anything below this line -->\n";
  be_xml_vspace;

  for $elem (@cf_interface_list)
  {
    $elem = be_xml_plain_to_entities(\$elem);
    if ($elem ne $cfl_interface)  # Hack: Don't list primary interface here.
    { be_xml_indent; print "<knowninterface>$elem</knowninterface>\n"; }
  }

  be_xml_vspace;
  be_xml_indent; print "<!-- End of configuration -->\n";
  be_xml_vspace;

  be_xml_leave;
  print "</networking>\n";
}


# --- Get (read) config --- #


sub get_immediate
{
  my $if_cmd;
  my $iftext;
  my @list;

  # Get a list of all interfaces, both configured and unconfigured.
  # Should work on both GNU and Solaris.

  $if_cmd = be_locate_tool("ifconfig");
  $iftext = `$if_cmd -a 2>/dev/null`;

  @list = ($iftext =~ /^([a-z0-9]+)[ :\t].*/mg);

  if (not @list)
  {
    if ($be_verbose) { print STDERR "Warning: Couldn't find any network devices.\n"; }
    return(0);
  }
  
  # Remove loopback and dummy interfaces from the list.
  
  for $elem (@list)
  {
    if (!($elem =~ /^(lo)|(dummy).*/)) { push(@cf_interface_list, $elem); }
  }
}


sub get
{
  if ($be_progress) { $| = 1; print $progress_max . "\n"; }

  if ($be_verbose) { print STDERR "Getting system configuration, generating XML output.\n"; }

  if ($be_verbose) { print STDERR "Finding interfaces.\n"; }
  get_immediate;

  read_rc_config; be_print_progress;
  read_sysconfig_network; be_print_progress;
  read_network_interfaces; be_print_progress;
  read_network_options; be_print_progress;
  read_primary_interface; be_print_progress;

  if ($be_verbose) { print STDERR "Printing XML.\n"; }
  if ($be_progress) { print "\n"; }
  xml_print;
}


# --- Set (write) config --- #


sub set_immediate
{
  my $ifup_cmd;
  my $ifdown_cmd;
  
  $ifup_cmd = be_locate_tool("ifup");
  $ifdown_cmd = be_locate_tool("ifdown");
  
  # Restart primary interface, so configuration can take effect.

  if ($ifup_cmd ne "" && $ifdown_cmd ne "")
  {
    # Found ifup and ifdown utilities.

    if ($cf_interface ne "")
    {
      if (!(system "$ifdown_cmd $cf_interface >/dev/null 2>/dev/null" &&
            system "$ifup_cmd $cf_interface >/dev/null 2>/dev/null"))
      {
        if ($be_verbose) { print STDERR "Warning: Could not configure interface. Are you root?\n"; }
      }
      elsif ($be_verbose)
      {
        print STDERR "Primary interface configured.\n";
      }
    }
    elsif ($be_verbose)
    {
      print STDERR "Warning: No primary interface given.\n";
    }
  }
  elsif ($be_verbose)
  {
    print STDERR "Warning: No interface control utilities found.\n";
  }
}


sub set
{
  if ($be_verbose) { print STDERR "Setting system configuration from XML input.\n"; }

  if ($be_verbose) { print STDERR "Parsing XML.\n"; }
  be_xml_parse;

  $cf_networking = 1;  # This should really be calculated from the old value
                       # and $cf_onboot. This hack will make it work, possibly
                       # with a few extra boot messages, if the user doesn't
                       # have a network.

  write_rc_config;
  write_sysconfig_network;
  write_network_interfaces;
  write_network_options;
  write_primary_interface;

  if ($be_do_immediate)
  {
    if ($be_verbose) { print STDERR "Changing running configuration via local utilities.\n"; }
    set_immediate;
  }
}


# --- Filter config: XML in, XML out --- #


sub filter
{
  be_xml_parse;
  xml_print;
}


# --- Main --- #

# Process options.

while (@ARGV)
{
  if    ($ARGV[0] eq "--get"    || $ARGV[0] eq "-g") { be_set_operation("get"); }
  elsif ($ARGV[0] eq "--set"    || $ARGV[0] eq "-s") { be_set_operation("set"); }
  elsif ($ARGV[0] eq "--filter" || $ARGV[0] eq "-f") { be_set_operation("filter"); }
  elsif ($ARGV[0] eq "--help"   || $ARGV[0] eq "-h") { print $Usage; exit(0); }
  elsif ($ARGV[0] eq "--version")                    { print "$version\n"; exit(0); }
  elsif ($ARGV[0] eq "--prefix" || $ARGV[0] eq "-p")
  {
    if ($be_prefix ne "")
    {
      print STDERR "Error: You may specify --prefix only once.\n\n";
      print STDERR $Usage; exit(1);
    }

    $be_prefix = $ARGV[1];

    if ($be_prefix eq "")
    {
      print STDERR "Error: You must specify an argument to the --prefix option.\n\n";
      print STDERR $Usage; exit(1);
    }

    shift @ARGV;  # For the argument.
  }
  elsif ($ARGV[0] eq "--disable-immediate")           { $be_do_immediate = 0; }
  elsif ($ARGV[0] eq "--verbose" || $ARGV[0] eq "-v") { $be_verbose = 1; }
  elsif ($ARGV[0] eq "--progress")                    { $be_progress = 1; }
  else
  {
    print STDERR "Error: Unrecognized option '$ARGV[0]'.\n\n";
    print STDERR $Usage; exit(1);
  }

  shift @ARGV;
}


# Do our thing.

if    ($be_operation eq "get")    { get; }
elsif ($be_operation eq "set")    { set; }
elsif ($be_operation eq "filter") { filter; }
else
{
  print STDERR "Error: No operation specified.\n\n";
  print STDERR $Usage; exit(1);
}

