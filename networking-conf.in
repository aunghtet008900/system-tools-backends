#!/usr/bin/env perl
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-

# Simple networking configurator. Designed to be architecture- and distribution independent.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Hans Petter Jansson <hpj@ximian.com>
#          David Lee Ludwig <davidl@wpi.edu> - Debian 2.[2|3] support.
#          Tambet Ingo <tambeti@sa.ee> Improved Debian support.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Best viewed with 100 columns of width.

# WARNING: Works with Red Hat (and probably most derivates) and SuSE.
# We're more than happy to receive patches for other distributions.

# Configuration files affected:
#
# /etc/sysconfig/network
# /etc/sysconfig/network-scripts/ifcfg-*
# /etc/rc.config
# /etc/network/interfaces
# /etc/network/options

# Running programs affected/used:
#
# ifup
# ifdown



require "___scriptsdir___/be.pl";


# --- Tool information --- #

$name = "networking";
$version = "0.1.0";

$description =<<"end_of_description;";
       Configures networking.
end_of_description;

$progress_max = 5;

# --- System config file locations --- #

# We list each config file type with as many alternate locations as possible.
# They are tried in array order. First found = used.

# Right now there's only one entry per array, as I couldn't find any
# typical deviations.

@sysconfig_network_names = ( "/etc/sysconfig/network" );
@rc_config_names =         ( "/etc/rc.config" );
@network_interfaces_names = ( "/etc/network/interfaces" );
@network_options_names = ( "/etc/network/options" );

# --- Internal configuration variables --- #

# Configuration is parsed/read to, and printed/written from, these temporary variables.

$cf_networking = 0;

$cf_interface = "";
$cf_interface_list = ();
$cf_hostip = "";
$cf_netmask = "";
$cf_gateway = "";
$cf_method = "static";
$cf_onboot = 1;
$cf_forward = 0;


# --- Configuration file manipulation --- #

# Debian 2.[2|3]+ style /etc/network/interfaces
#
# <&filtered lines>
# iface <interface> inet <static|dhcp|bootp|ppp>
#     address <ip>
#     netmask <ip mask>
#     gateway <gateway ip>
#     broadcast <broadcast ip>
#     network <network ip>
#     noauto (this is only used to not enable the interface on boot)
#     up <command to run when the interface is brought up>
#     down <command to run when the interface is brought down>
# <&filtered lines>
# (more interfaces may follow)
#
# A "#" character at the very beginning of a line causes that line to be
# treated as a comment.
# A "\" character at the very end of a line causes that line to continue onto
# the next line.
#
# &read_network_interfaces_into_hash will read the contents of
# /etc/network/interfaces into a hash table of references to hash tables.  For
# example:
#
# %ifaces = ("eth0" => {"method" => "dhcp"},
#            "eth1" => {"method" => "static",
#                       "address" => "192.168.0.42",
#                       "netmask" => "255.255.255.0"});
#
# The resulting hash table, %ifaces, is returned.
#
# NOTE: For more information on the format of /etc/network/interfaces, read
# the "interfaces" man page (section 5).  Also be sure to look at the example
# file in /usr/share/doc/netbase/examples/interfaces.  Both of these are
# included as part of the "netbase" package in Debian 2.[2|3].
#
# Exists: Debian 2.[2|3]
#
# Absent:

sub read_network_interfaces_into_hash
{
  local *FILE;
  my (%ifaces, $current_name, $current_iface);

  *FILE = &xst_open_read_from_names(@network_interfaces_names);
  if (not *FILE) { return; }

  # Build a list of all interfaces
  while (<FILE>)
  {
    # Split the current line into a list of tokens.
    @line = split(/[ \n\r\t]+/, $_);

    # Remove leading whitespace.
    if ($line[0] eq "") { shift(@line); }

    # Check to see if this line continues onto other lines.  If so, append
    # them
    while ($line[$#line] eq "\\")
    {
      # Remove the \ character.
      pop @line;

      # Read in the next line and split it into a list of tokens.
      @nextline = split(/[ \n\r\t]+/, <FILE>);

      # Remove any leading whitepage.
      if ($nextline[0] eq "") { shift(@nextline); }

      # Append @nextline to the end of @line
      push @line, @nextline;
    }

    # Make sure this line isn't a comment.
    if (&xst_ignore_line($line[0])) { next; }

    # Check if the line specifies a new interface.
    if ($line[0] eq "iface" && not &xst_ignore_line($line[1]))
    {
      # Make sure the device was detected via ifconfig (see "&get_immediate").
      # NOTE: This will weed out any loopback or dummy interfaces.
      if (not &xst_item_is_in_list($line[1], @cf_interface_list))
      {
        &xst_report_warning(01, "$line[1] isn't an available, " .
                              "configured interface");
        next;
      }

      # Make sure the interface is &set up for IPv4/internet networking
      if ($line[2] ne "inet") { next; }

      # Also make sure there is a &set configuration method.
      if ($line[3] eq "" || &xst_ignore_line($line[3]))
      {
        &xst_report_warning(02, "Warning: Interface $line[1] has no " .
                              "config method");
        next;
      }

      # Create a new hash table for this interface.
      my %iface_hash = ();

      # Set this interface to be the 'current' one.
      $current_name = $line[1];
      $current_iface = $ifaces{$current_name} = \%iface_hash;

      # Set the interface's method
      $$current_iface{"method"} = $line[3];
    }
    else  # Add an attribute to an already &set interface.
    {
      # Make sure an interface has been &set.
      if (not $current_iface) { next; }

      # Make sure the attribute has been properly &set
      # if (not $line[1]) { next; }

      # Set the attribute
      $$current_iface{$line[0]} = join(' ', $line[1]);
    }
  }

  # All done.  Clean up before returning.
  close($FILE);

  return %ifaces;
}


# Debian 2.[2|3]+ style /etc/network/interfaces
#
# (See '&read_network_interfaces_into_hash()' for information on
# /etc/network/interfaces as well as the structure of %ifaces.
#
# Takes network interface information and places them into the correct
# variables.
#
# Exists: Debian 2.[2|3]
#
# Absent:

sub read_network_interfaces
{
  my (%ifaces, $current_name, $current_iface);
  my $chosen_name;

  %ifaces = &read_network_interfaces_into_hash();

  # Now, a "primary" interface will be selected.  The selection order is as
  # follows:
  #
  # * If only one interface exists, use that one.
  # * If an interface has a preset gateway, use that one.
  # * The first interface with a dynamic configuration "method" (such as "dhcp",
  #   "bootp", "ppp", etc.) will be selected.
  # * If all else fails, pick the first interface.

  # See if only one interface exists.
  if (scalar(keys(%ifaces)) == 1)
  {
    $chosen_name = (keys(%ifaces))[0];

    &xst_report_info(2, "Only one interface, $chosen_name, exists.  It is being " .
                      "selected as the primary interface");
  }

  # For that matter, do any interfaces exist at all?
  elsif (scalar(keys(%ifaces)) == 0)
  {
    return;
  }

  else
  {
    # Look for an interface with a preset gateway.
    $chosen_name = &xst_get_key_for_subkeys(\%ifaces, ["gateway"]);

    # If need be, look for an interface with a dynamic configuration "method".
    if ($chosen_name eq "")
    {
      $chosen_name = &xst_get_key_for_subkey_and_subvalues(\%ifaces, "method", ["dhcp", "bootp", "ppp"]);
    }

    # If an interface hasn't been chosen, then just pick the first available one.
    if ($chosen_name eq "")
    {
      $chosen_name = (keys(%ifaces))[0];
    }
  }

  # Now that a "primary" interface has been chosen, &set the proper global
  # variables.
  %current_iface = %{$ifaces{$chosen_name}};

  $cf_interface = $chosen_name;
  $cf_hostip = $current_iface{"address"};
  $cf_netmask = $current_iface{"netmask"};
  $cf_gateway = $current_iface{"gateway"};
  $cf_method = $current_iface{"method"};
  if ( exists $current_iface{"noauto"} ) { $cf_onboot = 0; }
  else { $cf_onboot = 1; }
}


sub write_network_interfaces
{
  local *INFILE;
  local *OUTFILE;

  my $wrote_interface;
  my $wrote_hostip;
  my $wrote_netmask;
  my $wrote_gateway;
  my $wrote_onboot;
  my $wrote_network;
  my $wrote_broadcast;

  my $output_line;
  my @iface_lines;
  my @post_lines;
  my $use_post;

  my $cfl_network = "";
  my $cfl_broadcast = "";

  # Find and open the needed files.
  (*INFILE, *OUTFILE) = &xst_open_filter_write_from_names(@network_interfaces_names);
  if (not *OUTFILE) { return; }  # No point if we can't write.

  # Generate $cfl_network and $cfl_broadcast
  $cfl_network = &ip_calc_network($cf_hostip, $cf_netmask);
  $cfl_broadcast = &ip_calc_broadcast($cf_hostip, $cf_netmask);

  # Write the file, preserving as much as possible from INFILE.
  while (<INFILE>)
  {
    # Split the current line into a list of tokens.
    @line = split(/[ \n\r\t]+/, $_);

    # Remove leading whitespace.
    if ($line[0] eq "") { shift(@line); }

    # Check to see if this line continues onto other lines.  If so, append
    # them.
    while ($line[$#line] eq "\\")
    {
      # Remove the \ character.
      pop @line;

      # Read in the next line and split it into a list of tokens.
      @nextline = split(/[ \n\r\t]+/, <INFILE>);

      # Remove any leading whitepage.
      if ($nextline[0] eq "") { shift(@nextline); }

      # Append @nextline to the end of @line
      push @line, @nextline;
    }

    # Check if a new interface is being defined.  If so and it's the primary
    # interface (as defined in $cf_interface), then we can start writing to
    # OUTFILE.
    if ($line[0] eq "iface")
    {
      if ($line[1] eq $cf_interface)
      {
        $current_name = $line[1];
        print OUTFILE "iface $cf_interface inet $cf_method\n";
        $wrote_interface = 1;

        next;
      }
      elsif ($current_name ne "")
      {
        $current_name = "";

        # From now on, any lines read in from INFILE will be placed in a buffer
        # called @post_lines.  These will be written to OUTFILE at a later
        # time.
        $use_post = 1;
      }
    }

    # Check to see if we're parsing through the primary interface's predefined
    # section.  If so, push wanted lines into @iface_lines (these will
    # eventually be sent to OUTFILE.)
    if ($current_name ne "")
    {
      if ($line[0] eq "address")
      {
        if ($cf_hostip ne "")
        {
          push @iface_lines, "    address $cf_hostip\n";
        }
        $wrote_hostip = 1;
      }
      elsif ($line[0] eq "netmask")
      {
        if ($cf_netmask ne "")
        {
          push @iface_lines, "    netmask $cf_netmask\n";
        }
        $wrote_netmask = 1;
      }
      elsif ($line[0] eq "gateway")
      {
        if ($cf_gateway ne "")
        {
          push @iface_lines, "    gateway $cf_gateway\n";
        }
        $wrote_gateway = 1;
      }
      # elsif ($line[0] eq "onboot")
      elsif ($line[0] eq "noauto")
      {
        push @iface_lines, "    noauto\n";
        $wrote_onboot = 1;
      }
      elsif ($line[0] eq "network")
      {
        if ($cfl_network ne "")
        {
          push @iface_lines, "    network $cfl_network\n";
        }
        $wrote_network = 1;
      }
      elsif ($line[0] eq "broadcast")
      {
        if ($cfl_broadcast ne "")
        {
          push @iface_lines, "    broadcast $cfl_broadcast\n";
        }
        $wrote_broadcast = 1;
      }
      else
      {
        push @iface_lines, $_;
      }
    }
    else
    {
      if (not $use_post)
      {
        print OUTFILE;
      }
      else
      {
        push @post_lines, $_;
      }
    }
  }

  # Make sure that unwritten, non-empty variables are written to OUTFILE.
  if (not $wrote_interface)
  { print OUTFILE "iface $cf_interface inet $cf_method\n"; }

  if ((not $wrote_hostip) && ($cf_hostip ne ""))
  { print OUTFILE "    address $cf_hostip\n"; }

  if ((not $wrote_netmask) && ($cf_netmask ne ""))
  { print OUTFILE "    netmask $cf_netmask\n"; }

  if ((not $wrote_gateway) && ($cf_gateway ne ""))
  { print OUTFILE "    gateway $cf_gateway\n"; }

  if ((not $wrote_onboot) && ($cf_onboot eq 0))
  { print OUTFILE "    noauto\n"; }

  if ((not $wrote_network) && ($cfl_network ne ""))
  { print OUTFILE "    network $cfl_network\n"; }

  if ((not $wrote_broadcast) && ($cfl_broadcast ne ""))
  { print OUTFILE "    broadcast $cfl_broadcast\n"; }

  # Output all the rest of the lines which relate to the primary interface.
  if (($#iface_lines + 1) > 0)
  {
    foreach $output_line (@iface_lines)
    {
      # Make sure noauto &gets removed if $cf_onboot = TRUE.
      if (!(($output_line =~ /noauto/) && $cf_onboot eq 1))
      { print OUTFILE "$output_line"; }
    }
  }

  # Output any additional, preexisting interfaces.
  if (($#post_lines + 1) > 0)
  {
    foreach $output_line (@post_lines)
    {
      print OUTFILE "$output_line";
    }
  }

  # All done.  Clean up before returning.
  close(OUTFILE);
  if (*INFILE) { close(INFILE); }
}


# Debian 2.[2|3] style /etc/network/options
#
# <&filtered lines>
# ip_forward=<yes|no>
# spoofprotect=<yes|no>
# syncookies=<yes|no>
# <&filtered lines>
#
# Reads in relevant network options that aren't found in
# /etc/network/interfaces.  NOTE: None of these options are interface specific.
#
# Exists: Debian 2.[2|3]
#
# Absent:

sub read_network_options
{
  local *FILE;

  *FILE = &xst_open_read_from_names(@network_options_names);
  if (not *FILE) { return; }

  # Build a list of all interfaces
  while (<FILE>)
  {
    # Split the current line into a list of tokens.
    @line = split(/[ \n\r\t=]+/, $_);

    # Remove leading whitespace.
    if ($line[0] eq "") { shift(@line); }

    # Make sure this line isn't a comment;
    if (&xst_ignore_line($line[0])) { next; }

    # Set any relevant global configuration variables.
    if ($line[0] eq "ip_forward" && not &xst_ignore_line($line[1]))
    { $cf_forward = &xst_read_boolean($line[1]); }
  }

  # All done.  Clean up before returning.
  close(FILE);
}


sub write_network_options
{
  local *INFILE;
  local *OUTFILE;
  my $wrote_forward;

  (*INFILE, *OUTFILE) = &xst_open_filter_write_from_names(@network_options_names);
  if (not *OUTFILE) { return; }  # No point if we can't write.

  # Write the file, preserving as much as possible from INFILE.
  while (<INFILE>)
  {
    # Split the current line into a list of tokens.
    @line = split(/[ \n\r\t=]+/, $_);

    # Remove leading whitespace.
    if ($line[0] eq "") { shift(@line); }

    # Modify and write-out any known variables.
    if ($line[0] eq "ip_forward")
    {
      print OUTFILE "ip_forward=" . &xst_print_boolean_yesno($cf_forward) . "\n";
      $wrote_forward = 1;
    }
    else { print OUTFILE; }
  }

  # Make sure that unwritten, non-empty variables are written to OUTFILE.
  if (not $wrote_forward)
  { print OUTFILE "ip_forward=" . &xst_print_boolean_yesno($cf_forward) . "\n"; }

  # All done.  Clean up before returning.
  close (OUTFILE);
  if (*INFILE) { close(INFILE); }
}


# Red Hat style /etc/sysconfig/network-scripts/ifcfg-*
#
# <&filtered lines>
# IPADDR=<ip>
# NETMASK=<ip mask>
# NETWORK=<network ip>
# BROADCAST=<broadcast ip>
# BOOTPROTO=<bootp|dhcp|none>
# ONBOOT=<boolean>
# <&filtered lines>
#
# Determines the configuration of a specific network interface. First
# argument must be the name of the interface.
#
# Exists: Red Hat [5|6].x
#
# Absent:

sub read_sysconfig_network_scripts_ifcfg
{
  local *FILE;

  # Find the file.

  *FILE = &xst_open_read_from_names("/etc/sysconfig/network-scripts/ifcfg-$_[0]");
  if (not *FILE) { return; }

  # Parse the file.

  while (<FILE>)
  {
    @line = split(/[ \n\r\t\"\'=]+/, $_);
    if ($line[0] eq "") { shift(@line); }  # Leading whitespace. He.

    if ($line[0] eq "IPADDR" && not &xst_ignore_line($line[1]))
    { $cf_hostip = $line[1]; }
    elsif ($line[0] eq "NETMASK" && not &xst_ignore_line($line[1]))
    { $cf_netmask = $line[1]; }
    elsif ($line[0] eq "BOOTPROTO" && not &xst_ignore_line($line[1]))
    {
      if ($line[1] eq "bootp")   { $cf_method = "bootp"; }
      elsif ($line[1] eq "dhcp") { $cf_method = "dhcp"; }
      else                       { $cf_method = "static"; }
    }
    elsif ($line[0] eq "ONBOOT" && not &xst_ignore_line($line[1]))
    { $cf_onboot = &xst_read_boolean($line[1]); }
  }

  close(FILE);
}


sub write_sysconfig_network_scripts_ifcfg
{
  local *INFILE;
  local *OUTFILE;
  my $wrote_hostip = 0;
  my $wrote_netmask = 0;
  my $wrote_network = 0;
  my $wrote_broadcast = 0;
  my $wrote_method = 0;
  my $wrote_onboot = 0;
  my $cfl_network = "";
  my $cfl_broadcast = "";

  # Find the file.

  (*INFILE, *OUTFILE) = &xst_open_filter_write_from_names("/etc/sysconfig/network-scripts/ifcfg-$_[0]");
  if (not *OUTFILE) { return; }  # No point if we can't write.

  # Generate $cfl_network and $cfl_broadcast.

  $cfl_network = &ip_calc_network($cf_hostip, $cf_netmask);
  $cfl_broadcast = &ip_calc_broadcast($cf_hostip, $cf_netmask);

  # Write the file, preserving as much as possible from INFILE.

  while (<INFILE>)
  {
    @line = split(/[ \n\r\t\"\'=]+/, $_);
    if ($line[0] eq "") { shift(@line); }  # Leading whitespace. He.

    if ($line[0] eq "IPADDR")
    {
      print OUTFILE "IPADDR=$cf_hostip\n";
      $wrote_hostip = 1;
    }
    elsif ($line[0] eq "NETMASK")
    {
      print OUTFILE "NETMASK=$cf_netmask\n";
      $wrote_netmask = 1;
    }
    elsif ($line[0] eq "NETWORK")
    {
      print OUTFILE "NETWORK=$cfl_network\n";
      $wrote_network = 1;
    }
    elsif ($line[0] eq "BROADCAST")
    {
      print OUTFILE "BROADCAST=$cfl_broadcast\n";
      $wrote_broadcast = 1;
    }
    elsif ($line[0] eq "BOOTPROTO")
    {
      print OUTFILE "BOOTPROTO=$cf_method\n";
      $wrote_method = 1;
    }
    elsif ($line[0] eq "ONBOOT")
    {
      print OUTFILE join('', "ONBOOT=", &xst_print_boolean_yesno($cf_onboot), "\n");
      $wrote_onboot = 1;
    }
    else { print OUTFILE; }
  }

  if (not $wrote_hostip)    { print OUTFILE "IPADDR=$cf_hostip\n"; }
  if (not $wrote_netmask)   { print OUTFILE "NETMASK=$cf_netmask\n"; }
  if (not $wrote_network)   { print OUTFILE "NETWORK=$cfl_network\n"; }
  if (not $wrote_broadcast) { print OUTFILE "BROADCAST=$cfl_broadcast\n"; }
  if (not $wrote_method)    { print OUTFILE "BOOTPROTO=$cf_method\n"; }
  if (not $wrote_onboot)    { print OUTFILE join('', "ONBOOT=", &xst_print_boolean_yesno($cf_onboot), "\n"); }

  close(OUTFILE);
  if (*INFILE) { close(INFILE); }
}


# Red Hat style primary interface reader.
#
# Tries to figure out what the "primary" interface is, and calls
# &read_sysconfig_network_scripts_ifcfg on that interface.
#
# Must run after &get_immediate and &read_sysconfig_network, which will
# (hopefully) provide information to identify the primary device.

sub read_primary_interface
{
  # If the interface was specified, we use that.

  if ($cf_interface ne "") { }

  # If the known-interfaces list contains only one interface, we use that.
  # This is actually not too uncommon, after weeding lo and dummy.

  elsif ($#cf_interface_list == 0) { $cf_interface = $cf_interface_list[0]; }
  
  # If we have a gateway, try to find an interface with a matching subnet, by
  # going through the interface configurations. This will fail if a gateway
  # has been configured without any interfaces, or if the gateway is on a
  # foreign, bridged subnet. Both are pretty rare conditions.

  elsif ($cf_gateway ne "")
  {
    for $elem (@cf_interface_list)
    {
      &read_sysconfig_network_scripts_ifcfg($elem);
      if ($cf_netmask eq "") { next; }

      if (&ip_calc_network($cf_gateway, $cf_netmask) eq &ip_calc_network($cf_hostip, $cf_netmask))
      {
        $cf_interface = $elem;
	last;
      }

      $cf_hostip = "";
      $cf_netmask = "";
      $cf_method = "";
      $cf_onboot = 0;
    }
  }

  # Last ditch. Pick an interface from the list according to some built-in
  # rules.

  else
  {
    for $elem (@cf_interface_list)
    {
      if (($elem =~ /eth.*/) || ($elem =~ /hme.*/))
      {
        $cf_interface = $elem;
        last;
      }
    }
  }

  if ($cf_interface ne "") { &read_sysconfig_network_scripts_ifcfg($cf_interface); }
}


sub write_primary_interface
{
  # If the primary interface is not supplied, we can't assume anything,
  # so configuration is not written.

  if ($cf_interface ne "") { &write_sysconfig_network_scripts_ifcfg($cf_interface); }
  else { &xst_report_warning(04, "No primary interface specified - config unwritten"); }
}


# Red Hat style /etc/sysconfig/network
#
# <&filtered lines>
# NETWORKING=<boolean>
# FORWARD_IPV4=<boolean>
# GATEWAY=<ip>
# GATEWAYDEV=<interface>
# <&filtered lines>
#
# Determines the primary network configuration. BEWARE: This is actually a
# sourced shell script. We rely on some lenience from the user (and the distro)
# to be able to parse it correctly.
#
# Exists: Red Hat [5|6].x, Caldera 2.4, TurboLinux 6.0, Mandrake 7.0
#
# Absent: SuSE 6.3, SunOS 5.7

sub read_sysconfig_network
{
  local *FILE;

  # Find the file.

  *FILE = &xst_open_read_from_names(@sysconfig_network_names);
  if (not *FILE) { return; }  # We didn't find it.

  # Parse the file.

  while (<FILE>)
  {
    @line = split(/[ \n\r\t\"\'=]+/, $_);
    if ($line[0] eq "") { shift(@line); }  # Leading whitespace. He.

    if ($line[0] eq "NETWORKING" && not &xst_ignore_line($line[1]))
    { $cf_networking = &xst_read_boolean($line[1]); }
    elsif ($line[0] eq "FORWARD_IPV4" && not &xst_ignore_line($line[1]))
    { $cf_forward = &xst_read_boolean($line[1]); }
    elsif ($line[0] eq "GATEWAY" && not &xst_ignore_line($line[1]))
    { $cf_gateway = $line[1]; }
    elsif ($line[0] eq "GATEWAYDEV" && not &xst_ignore_line($line[1]))
    { $cf_interface = $line[1]; }
  }

  close(FILE);
}


sub write_sysconfig_network
{
  local *INFILE;
  local *OUTFILE;
  my $wrote_networking = 0;
  my $wrote_forward = 0;
  my $wrote_gateway = 0;
  my $wrote_interface = 0;

  # Find the file.

  (*INFILE, *OUTFILE) = &xst_open_filter_write_from_names(@sysconfig_network_names);
  if (not *OUTFILE) { return; }  # No point if we can't write.

  # Write the file, preserving as much as possible from INFILE.

  while (<INFILE>)
  {
    @line = split(/[ \n\r\t\"\'=]+/, $_);
    if ($line[0] eq "") { shift(@line); }  # Leading whitespace. He.

    if ($line[0] eq "NETWORKING")
    {
      print OUTFILE join('', "NETWORKING=", &xst_print_boolean_yesno($cf_networking), "\n");
      $wrote_networking = 1;
    }
    elsif ($line[0] eq "FORWARD_IPV4")
    {
      print OUTFILE join('', "FORWARD_IPV4=", &xst_print_boolean_truefalse($cf_forward), "\n");
      $wrote_forward = 1;
    }
    elsif ($line[0] eq "GATEWAY")
    {
      print OUTFILE "GATEWAY=$cf_gateway\n";
      $wrote_gateway = 1;
    }
    elsif ($line[0] eq "GATEWAYDEV")
    {
      print OUTFILE "GATEWAYDEV=$cf_interface\n";
      $wrote_interface = 1;
    }
    else { print OUTFILE; }
  }

  if (not $wrote_networking)
  { print OUTFILE join('', "NETWORKING=", &xst_print_boolean_yesno($cf_networking), "\n"); }
  if (not $wrote_forward)
  { print OUTFILE join('', "FORWARD_IPV4=", &xst_print_boolean_truefalse($cf_forward), "\n"); }
  if (not $wrote_gateway)
  { print OUTFILE "GATEWAY=$cf_gateway\n"; }
  if (not $wrote_interface)
  { print OUTFILE "GATEWAYDEV=$cf_interface\n"; }

  close(OUTFILE);
  if (*INFILE) { close(INFILE); }
}


# SuSE style /etc/rc.config
#
# <&filtered lines>
# NETDEV_0="<dev>"
# IPADDR_0="<ip>"
# IFCONFIG_0="<ip> broadcast <broadcast> netmask <netmask>"
# <&filtered lines>
#
# Determines the local hostname.domain, searchdomains and nameservers.
# BEWARE: This is actually a sourced shell script. We rely on some lenience
# from the user (and the distro) to be able to parse it correctly. The file
# is read by SuSE configuration tools and translated to NET-3 config files
# at strategic times.
#
# Exists: SuSE 6.3
#
# Absent: Red Hat 6.x, Caldera 2.4, TurboLinux 6.0, Mandrake 7.0, SunOS 5.7

sub read_rc_config
{
  local *FILE;

  # Find the file.

  *FILE = &xst_open_read_from_names(@rc_config_names);
  if (not *FILE) { return; }  # We didn't find it.

  # Parse the file.

  while (<FILE>)
  {
    @line = split(/[ \n\r\t\"\'=]+/, $_);  # Handles quoted arguments.
    if ($line[0] eq "") { shift(@line); }  # Leading whitespace. He.

    if ($line[0] eq "NETDEV_0" && not &xst_ignore_line($line[1]))
    {
      $cf_interface = $line[1];
    }
    elsif ($line[0] eq "IPADDR_0")
    {
      $cf_hostip = $line[1];
    }
    elsif ($line[0] eq "IFCONFIG_0")
    {
      shift @line;

      while (@line)
      {
        if (&xst_ignore_line($line[0])) { last; }
	
	if ($line[0] eq "broadcast")
	{
	  # Calculate this ourselves.

	  shift @line;
	  shift @line;
	}
	elsif ($line[0] eq "netmask")
	{
	  $cf_netmask = $line[1];
	  shift @line;
	  shift @line;
	}
	elsif ($line[0] eq "bootp")
	{
	  $cf_method = "bootp";
	  last;
	}
	elsif ($line[0] =~ /dhcp.*/)
	{
	  $cf_method = "dhcp";
	  last;
	}
        elsif ($line[0] ne "") { $cf_hostip = $line[0]; shift @line; }
	else { shift @line; }
      }
    }
  }

  close(FILE);
}


# SuSE /etc/rc.config likes all env arguments in double quotes. Since we're
# really nice guys, we conform to that.

sub write_rc_config
{
  local *INFILE;
  local *OUTFILE;
  my $wrote_ipaddr = 0;
  my $wrote_netdev = 0;
  my $wrote_ifconfig = 0;
  my $cfl_broadcast = "";

  # Find the file.

  (*INFILE, *OUTFILE) = &xst_open_filter_write_from_names(@rc_config_names);
  if (not *OUTFILE) { return; }  # No point if we can't write.

  # Generate broadcast address.
  
  $cfl_broadcast = &ip_calc_broadcast($cf_hostip, $cf_netmask);

  # Write the file, preserving as much as possible from INFILE.

  while (<INFILE>)
  {
    @line = split(/[ \n\r\t\"\'=]+/, $_);
    if ($line[0] eq "IPADDR_0")
    {
      print OUTFILE "IPADDR_0=\"$cf_hostip\"\n";
      $wrote_ipaddr = 1;
    }
    elsif ($line[0] eq "NETDEV_0")
    {
      print OUTFILE "NETDEV_0=\"$cf_interface\"\n";
      $wrote_netdev = 1;
    }
    elsif ($line[0] eq "IFCONFIG_0")
    {
      if ($cf_method eq "dhcp") { print OUTFILE "IFCONFIG_0=\"dhcpclient\"\n"; }
      elsif ($cf_method eq "bootp") { print OUTFILE "IFCONFIG_0=\"bootp\"\n"; }
      else { print OUTFILE "IFCONFIG_0=\"$cf_hostip broadcast $cfl_broadcast netmask $cf_netmask\"\n"; }
      $wrote_ifconfig = 1;
    }
    else
    {
      print OUTFILE;
    }
  }

  if (not $wrote_ipaddr)   { print OUTFILE "IPADDR_0=\"$cf_hostip\"\n"; }
  if (not $wrote_netdev)   { print OUTFILE "NETDEV_0=\"$cf_interface\"\n"; }
  if (not $wrote_ifconfig)
  {
    if ($cf_method eq "dhcp") { print OUTFILE "IFCONFIG_0=\"dhcpclient\"\n"; }
    elsif ($cf_method eq "bootp") { print OUTFILE "IFCONFIG_0=\"bootp\"\n"; }
    else { print OUTFILE "IFCONFIG_0=\"$cf_hostip broadcast $cfl_broadcast netmask $cf_netmask\"\n"; }
  }

  close(OUTFILE);
  if (*INFILE) { close(INFILE); }
}


# --- IP calculation --- #

# Both functions take two arguments: IP and netmask.


sub ip_calc_network
{
  my @ip_reg1;
  my @ip_reg2;

  @ip_reg1 = (@_[0] =~ /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/);
  @ip_reg2 = (@_[1] =~ /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/);

  @ip_reg1[0] = (@ip_reg1[0] * 1) & (@ip_reg2[0] * 1);
  @ip_reg1[1] = (@ip_reg1[1] * 1) & (@ip_reg2[1] * 1);
  @ip_reg1[2] = (@ip_reg1[2] * 1) & (@ip_reg2[2] * 1);
  @ip_reg1[3] = (@ip_reg1[3] * 1) & (@ip_reg2[3] * 1);

  return(join('.', @ip_reg1));
}


sub ip_calc_broadcast
{
  my @ip_reg1;
  my @ip_reg2;
  
  @ip_reg1 = (@_[0] =~ /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/);
  @ip_reg2 = (@_[1] =~ /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/);
 
  @ip_reg1 = ($cf_hostip =~ /([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/);

  @ip_reg1[0] = (@ip_reg1[0] * 1) | (~(@ip_reg2[0] * 1) & 255);
  @ip_reg1[1] = (@ip_reg1[1] * 1) | (~(@ip_reg2[1] * 1) & 255);
  @ip_reg1[2] = (@ip_reg1[2] * 1) | (~(@ip_reg2[2] * 1) & 255);
  @ip_reg1[3] = (@ip_reg1[3] * 1) | (~(@ip_reg2[3] * 1) & 255);
  
  return(join('.', @ip_reg1));
}


# --- XML parsing --- #


# Scan XML from standard input to an internal tree.

sub xml_parse
{
  # Scan XML to tree.

  $tree = &xst_xml_scan;


  # Walk the tree recursively and extract configuration parameters.
  # This is the top level - find and enter the "networking" tag.

  while (@$tree)
  {
    if ($$tree[0] eq "networking") { &xml_parse_networking($$tree[1]); }

    shift @$tree;
    shift @$tree;
  }

  return($tree);
}


# <networking>...</networking>

sub xml_parse_networking
{
  my $tree = $_[0];

  shift @$tree;  # Skip attributes.

  while (@$tree)
  {
    if    ($$tree[0] eq "primaryinterface") { $cf_interface = &xst_xml_get_word($$tree[1]); }
    elsif ($$tree[0] eq "knowninterface")   { push(@cf_interface_list, &xst_xml_get_word($$tree[1])); }
    elsif ($$tree[0] eq "hostip")           { $cf_hostip = &xst_xml_get_word($$tree[1]); }
    elsif ($$tree[0] eq "netmask")          { $cf_netmask = &xst_xml_get_word($$tree[1]); }
    elsif ($$tree[0] eq "gateway")          { $cf_gateway = &xst_xml_get_word($$tree[1]); }
    elsif ($$tree[0] eq "enabled")          { &xml_parse_enabled($$tree[1]); }
    elsif ($$tree[0] eq "forward")          { &xml_parse_forward($$tree[1]); }
    elsif ($$tree[0] eq "method")
    {
      $cf_method = &xst_xml_get_word($$tree[1]);
      if (($cf_method ne "dhcp") && ($cf_method ne "bootp")) { $cf_method = "static"; }
    }

    shift @$tree;
    shift @$tree;
  }
}

sub xml_parse_enabled
{
  my $tree = $_[0];

  # Check attribute; 'yes', 'true', 'no', 'false'.

  $cf_onboot = &xst_read_boolean($$tree[0]->{state});
}


sub xml_parse_forward
{
  my $tree = $_[0];

  # Check attribute; 'yes', 'true', 'no', 'false'.

  $cf_forward = &xst_read_boolean($$tree[0]->{state});
}


# --- XML printing --- #


sub xml_print
{
  my $cfl_interface = &xst_xml_plain_to_entities(\$cf_interface);
  my $cfl_hostip = &xst_xml_plain_to_entities(\$cf_hostip);
  my $cfl_netmask = &xst_xml_plain_to_entities(\$cf_netmask);
  my $cfl_gateway = &xst_xml_plain_to_entities(\$cf_gateway);
  my $cfl_method = &xst_xml_plain_to_entities(\$cf_method);

  print "<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>\n";
  print "<!DOCTYPE networking []>\n\n";
  print "<networking>\n";
  &xst_xml_enter ();

  &xst_xml_vspace ();
  &xst_xml_print_line ("<!-- Configuration starts here -->\n");
  &xst_xml_vspace ();

  # Hostname, domain, search domains, nameservers.

  &xst_xml_indent ();
  if ($cf_onboot) { print "<enabled state='yes'/>\n"; }
  else            { print "<enabled state='no'/>\n"; }

  &xst_xml_vspace ();

  if ($cfl_interface ne "") { &xst_xml_print_line ("<primaryinterface>$cfl_interface</primaryinterface>\n"); }
  if ($cfl_hostip ne "") { &xst_xml_print_line ("<hostip>$cfl_hostip</hostip>\n"); }
  if ($cfl_netmask ne "") { &xst_xml_print_line ("<netmask>$cfl_netmask</netmask>\n"); }
  if ($cfl_gateway ne "") { &xst_xml_print_line ("<gateway>$cfl_gateway</gateway>\n"); }
  &xst_xml_vspace ();
  if ($cfl_method ne "") { &xst_xml_print_line ("<method>$cfl_method</method>\n"); }
  &xst_xml_vspace ();

  &xst_xml_vspace ();
  &xst_xml_print_line ("<!-- You shouldn't have to modify anything below this line -->\n");
  &xst_xml_vspace ();

  &xst_xml_indent (); 
  if ($cf_forward) { print "<forward state='yes'/>\n"; }
  else             { print "<forward state='no'/>\n"; }

  &xst_xml_vspace ();
  &xst_xml_print_line ("<!-- You cannot modify anything below this line -->\n");
  &xst_xml_vspace ();

  for $elem (@cf_interface_list)
  {
    $elem = &xst_xml_plain_to_entities(\$elem);
    if ($elem ne $cfl_interface)  # Hack: Don't list primary interface here.
    { &xst_xml_print_line ("<knowninterface>$elem</knowninterface>\n"); }
  }

  &xst_xml_vspace ();
  &xst_xml_print_line ("<!-- End of configuration -->\n");
  &xst_xml_vspace ();

  &xst_xml_leave ();
  print "</networking>\n";
}


# --- Get (read) config --- #


sub get_immediate
{
  my $if_cmd;
  my $iftext;
  my @list;

  # Get a list of all interfaces, both configured and unconfigured.
  # Should work on both GNU and Solaris.

  $if_cmd = &xst_locate_tool("ifconfig");
  $iftext = `$if_cmd -a 2>/dev/null`;

  @list = ($iftext =~ /^([a-z0-9]+)[ :\t].*/mg);

  if (not @list)
  {
    &xst_report_warning(05, "Could not find any network devices");
    return(0);
  }
  
  # Remove loopback, dummy and typical dialup interfaces from the list.
  
  for $elem (@list)
  {
    if (!($elem =~ /^(lo)|(dummy)|(ppp).*/)) { push(@cf_interface_list, $elem); }
  }
}


sub get
{
  &xst_report_info(01, "Finding interfaces");
  &get_immediate;

  &read_rc_config; &xst_print_progress ();
  &read_sysconfig_network; &xst_print_progress ();
  &read_network_interfaces; &xst_print_progress ();
  &read_network_options; &xst_print_progress ();
  &read_primary_interface; &xst_print_progress ();

  &xst_end();
  &xml_print ();
}


# --- Set (write) config --- #


sub set_immediate
{
  my $ifup_cmd;
  my $ifdown_cmd;
  
  $ifup_cmd = &xst_locate_tool("ifup");
  $ifdown_cmd = &xst_locate_tool("ifdown");
  
  # Restart primary interface, so configuration can take effect.
  # FIXME: Slightly bogus if xst_service_*() does its job.

  if ($ifup_cmd ne "" && $ifdown_cmd ne "")
  {
    # Found ifup and ifdown utilities.

    if ($cf_interface ne "")
    {
      if (!(system "$ifdown_cmd $cf_interface >/dev/null 2>/dev/null" &&
            system "$ifup_cmd $cf_interface >/dev/null 2>/dev/null"))
      {
        &xst_report_warning(6, "Could not configure network interface");
      }
      else
      {
        &xst_report_info(3, "Primary interface configured");
      }
    }
    else
    {
      &xst_report_warning(7, "No primary interface given");
    }
  }
  else
  {
    &xst_report_warning(8, "No interface control utilities found");
  }

  # Ensure that network is (en|dis)abled according to user's wishes.

  if ($cf_networking) { &xst_service_enable(47, "", "network"); }
  else                { &xst_service_disable(90, "", "network"); }
}


sub set
{
  &xml_parse ();

  # FIXME: This should really be calculated from the old value and $cf_onboot.
  # This hack will make it work, possibly with a few extra boot messages, if
  # the user doesn't have a network.

  $cf_networking = 1;

  &write_rc_config;
  &write_sysconfig_network;
  &write_network_interfaces;
  &write_network_options;
  &write_primary_interface;

  if ($xst_do_immediate)
  {
    &set_immediate;
  }
  
  &xst_end();
}


# --- Filter config: XML in, XML out --- #


sub filter
{
  &xml_parse ();
  &xst_end();
  &xml_print ();
}


# --- Main --- #

xst_init($name, $version, $description, @ARGV);

# Do our thing.

if    ($xst_operation eq "get")    { &get; }
elsif ($xst_operation eq "set")    { &set; }
elsif ($xst_operation eq "filter") { &filter; }
