AC_PREREQ(2.52)
dnl ==============================================================
dnl Process this file with autoconf to produce a configure script.
dnl ==============================================================
AC_INIT(system-tools-backends,2.0.0)
AC_CONFIG_AUX_DIR(.)
AC_CONFIG_HEADERS(config.h)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AC_PROG_LIBTOOL

dnl get prefix in $prefix, yes, this sucks
if test "x$prefix" = "xNONE"; then
   prefix=$ac_default_prefix;
fi

# This macro expands DIR and assigns it to RET.
# If DIR is NONE, then it's replaced by DEFAULT.
#
# Based on AC_DEFINE_DIR
#
# Examples:
#
#  AC_EXPAND(prefix, "/usr/local", expanded_prefix)

AC_DEFUN([AC_EXPAND], [
  test "x$prefix" = xNONE && prefix="$ac_default_prefix"
  test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'
  ac_expand=[$]$1
  test "x$ac_expand" = xNONE && ac_expand="[$]$2"
  ac_expand=`eval echo [$]ac_expand`
  $3=`eval echo [$]ac_expand`
])

dnl get expanded paths
DATADIR_TMP="${datadir}"
AC_EXPAND(datadir,"NONE",EXPANDED_DATADIR)
AC_SUBST(EXPANDED_DATADIR)

SYSCONFDIR_TMP="${sysconfdir}"
AC_EXPAND(sysconfdir,"NONE",EXPANDED_SYSCONFDIR)
AC_SUBST(EXPANDED_SYSCONFDIR)

LOCALSTATEDIR_TMP="${localsatedir}"
AC_EXPAND(localstatedir, "NONE", localstatedir)
AC_SUBST(localstatedir)

dnl scriptsdir & filesdir
scriptsdir="${EXPANDED_DATADIR}/system-tools-backends-2.0/scripts"
filesdir="${EXPANDED_DATADIR}/system-tools-backends-2.0/files"
modulesdir="${EXPANDED_DATADIR}/system-tools-backends-2.0/modules"
AC_SUBST(scriptsdir)
AC_SUBST(filesdir)
AC_SUBST(modulesdir)


dnl DBus services dir
DBUS_SERVICES_DIR="${prefix}/share/dbus-1/services"
AC_SUBST(DBUS_SERVICES_DIR)


dnl where is DBus system.d directory?
AC_ARG_WITH(dbus_sys, [  --with-dbus-sys=<dir>   where D-BUS system.d directory is])

if ! test -z "$with_dbus_sys" ; then
    DBUS_SYSTEMD_DIR="$with_dbus_sys"
else
    DBUS_SYSTEMD_DIR="${EXPANDED_SYSCONFDIR}/dbus-1/system.d"
fi
AC_SUBST(DBUS_SYSTEMD_DIR)


dnl where is Net::DBus?
AC_ARG_WITH(net_dbus, [  --with-net-dbus=<dir>   where Net::DBus perl library is (/usr/lib/perl)])

if ! test -z "$with_net_dbus" ; then
    netdbusdir="$with_net_dbus"
else
dnl hack to avoid an empty path in netdbusdir
    netdbusdir=$scriptsdir
fi

AC_SUBST(netdbusdir)

dnl system-tools-backends admin group
AC_ARG_WITH(stb_group,[  --with-stb-group=<grp>  Group for system-tools-backends (stb-admin)])
if test -z "$with_stb_group" ; then
    STB_GROUP=stb-admin
else
    STB_GROUP=$with_stb_group
fi
AC_SUBST(STB_GROUP)


dnl check for perl
AC_PATH_PROG(PERL_PATH, perl)
if test -z "$PERL_PATH"; then
   AC_MSG_ERROR([perl not found, required for SystemToolsBackends])
fi

dnl check for Net::DBus
AC_MSG_CHECKING([for Net::DBus])
if `$PERL_PATH -e "use lib '$netdbusdir'; require Net::DBus" 2>/dev/null`; then
   AC_MSG_RESULT([ok])
   internalnetdbus=no
else
   AC_MSG_RESULT([missing, going for internal copy])
   DBUS_REQUIRED=0.35
   PKG_CHECK_MODULES([DBUS],[dbus-1 >= $DBUS_REQUIRED])
   AC_SUBST([DBUS_CFLAGS])
   AC_SUBST([DBUS_LIBS])

   netdbusdir="${modulesdir}/lib/perl"
   AC_SUBST(netdbusdir)

   internalnetdbus=yes
fi

AM_CONDITIONAL(INTERNAL_NET_DBUS, test x$internalnetdbus = xyes)

AC_OUTPUT([
Makefile
system-tools-backends-2.0.pc
files/Makefile
Init/Makefile
Network/Makefile
Shares/Makefile
Time/Makefile
Users/Makefile
Utils/Makefile
SystemToolsBackends.pl
test-backends
org.freedesktop.SystemToolsBackends.service
system-tools-backends.conf
Net-DBus/Makefile
Net-DBus/lib/Makefile
Net-DBus/lib/Net/Makefile
Net-DBus/lib/Net/DBus/Makefile
Net-DBus/lib/Net/DBus/Binding/Makefile
Net-DBus/lib/Net/DBus/Binding/Message/Makefile
])

echo "

Configuration (BACKENDS):

  Prefix                            : ${prefix}
  The backends will be installed in : ${scriptsdir}
  The files will be installed in    : ${filesdir}
  Using internal copy of Net::Dbus  : ${internalnetdbus}

  DBus system.d directory           : ${DBUS_SYSTEMD_DIR}
  System tools backends admin group : ${STB_GROUP}
"
