#!/usr/bin/env perl
#-*- Mode: perl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-

# XML printing, scanning and parsing.
#
# Copyright (C) 2000-2001 Ximian, Inc.
#
# Authors: Hans Petter Jansson <hpj@ximian.com>
#          Arturo Espinosa <arturo@ximian.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.


require "___scriptsdir___/util.pl";


# --- XML print formatting  --- #


# &xst_xml_enter: Call after entering a block. Increases indent level.
# &xst_xml_leave: Call before leaving a block. Decreases indent level.
# &xst_xml_indent: Call before printing a line. Indents to current level. 
# &xst_xml_vspace: Ensures there is a vertical space of one and only one line.
# &xst_xml_print: Indent, then print all arguments. Just for sugar.


$xst_indent_level = 0;
$xst_have_vspace = 0;


sub xst_xml_enter
{
  $xst_indent_level += 2;
}


sub xst_xml_leave
{
  $xst_indent_level -= 2;
}


sub xst_xml_indent
{
  my $i;
  for ($i = 0; $i < $xst_indent_level; $i++) { print " "; }
  $xst_have_vspace = 0;
}


sub xst_xml_vspace
{
  if (not $xst_have_vspace)
  {
    print "\n";
    $xst_have_vspace = 1;
  }
}


sub xst_xml_print
{
  &xst_xml_indent;
  print @_;
}


sub xst_xml_print_state
{
  &xst_xml_indent;
  print "<" . @_[0] . " state='" . &xst_print_boolean_truefalse (@_[1]) . "'/>";
}


# --- XML scanning --- #


# This code tries to replace XML::Parser scanning from stdin in tree mode.

sub xst_xml_scan_make_kid_array
{
  my %hash = {};
  my @sublist;
    
  @attr = $_[0] =~ /[^\t\n\r ]+[\t\n\r ]*([a-zA-Z_-]+)[ \t\n\r]*\=[ \t\n\r\"\']*([a-zA-Z_-]+)/g;
  %hash = @attr;
    
  push (@sublist, \%hash);
  return \@sublist;
}


sub xst_xml_scan_recurse
{
  my @list;
  if (@_) { @list = $_[0]->[0]; }
  
  while (@xst_xml_scan_list)
  {
    $el = $xst_xml_scan_list[0]; shift @xst_xml_scan_list;

    if (($el eq "") || $el =~ /^\<[!?].*\>$/s) { next; }  # Empty strings, PI and DTD must go.
    if ($el =~ /^\<.*\/\>$/s)  # Empty.
    {
      $el =~ /^\<([a-zA-Z_-]+).*\/\>$/s;
      push (@list, $1);
      push (@list, &xst_xml_scan_make_kid_array ($el));
    }
    elsif ($el =~ /^\<\/.*\>$/s)  # End.
    {
      last;
    }
    elsif ($el =~ /^\<.*\>$/s)  # Start.
    {
      $el =~ /^\<([a-zA-Z_-]+).*\>$/s;
      push (@list, $1);
      $sublist = &xst_xml_scan_make_kid_array ($el);
      push (@list, &xst_xml_scan_recurse ($sublist));
      next;
    }
    elsif ($el ne "")  # PCDATA.
    {
      push (@list, 0);
      push (@list, "$el");
    }
  }

  return \@list;
}


sub xst_xml_scan
{
  my $doc; my @tree; my $i;

  if ($xst_input_file eq "") 
  {
    $doc .= $i while ($i = <STDIN>);
  }
  else
  {
    open INPUT_FILE, $xst_input_file;
    $doc .= $i while ($i = <INPUT_FILE>);
    close INPUT_FILE;
  }

  @xst_xml_scan_list = ($doc =~ /([^\<]*)(\<[^\>]*\>)[ \t\n\r]*/mg); # pcdata, tag, pcdata, tag, ...
    
  $tree = &xst_xml_scan_recurse;
    
  return $tree;
}


@xst_xml_entities = ( "&lt;", '<', "&gt;", '>', "&apos;", '\\\'', "&quot;", '"', "&amp;", '&' );


#sub xst_xml_entities_to_plain
#{
#  my $in = $_[0];
#  my $out = "";
#  my @xe;
#    
#  $in = $$in;
#    
#  my @elist = ($in =~ /([^&]*)(\&[a-zA-Z_-]+\;)?/mg); # text, entity, text, entity, ...
#    
#  while (@elist)
#  {
#    # Join text.
#	
#    $out = join('', $out, $elist[0]);
#    shift @elist;
#
#    # Find entity and join its text equivalent.
#    # Unknown entities are simply removed.
#	
#    for (@xe = @xst_xml_entities; @xe; )
#    {
#      if ($xe[0] eq $elist[0]) { $out = join ('', $out, $xe[1]); last; }
#      shift @xe; shift @xe;
#    }
#	
#    shift @elist;
#  }
#    
#  return $out;
#}
#
#
#sub xst_xml_plain_to_entities
#{
#  my $in = $_[0];
#  my $out = "";
#  my @xe;
#  my $joined = 0;
#  
#  $in = $$in;
#  
#  my @clist = split (//, $in);
#  
#  while (@clist)
#  {
#    # Find character and join its entity equivalent.
#    # If none found, simply join the character.
#	
#    $joined = 0;  # Cumbersome.
#    
#    for (@xe = @xst_xml_entities; @xe && !$joined; )
#    {
#      if ($xe[1] eq $clist[0])
#      {
#        $out = join ('', $out, $xe[0]);
#        $joined = 1;
#      }
#
#      shift @xe; shift @xe;
#    }
#	
#    if (!$joined) { $out = join ('', $out, $clist[0]); }
#    shift @clist;
#  }
#  
#  return $out;
#}

sub xst_xml_quote
{
  my $ret = $_[0];
  my $i;

  #print STDERR "INI Q: $ret\n";
  
  for ($i = 1; @xst_xml_entities[$i] ne undef; $i += 2)
  {
    $ret =~ s/$xst_xml_entities[$i]/$xst_xml_entities[$i - 1]/g;
  }

  #print STDERR "END Q: $ret\n";
  
  return $ret;
}

sub xst_xml_unquote
{
  my $ret = $_[0];
  my $i;

  #print STDERR "INI U: $ret\n";
  
  for ($i = 0; @xst_xml_entities[$i] ne undef; $i += 2)
  {
    $ret =~ s/$xst_xml_entities[$i]/$xst_xml_entities[$i + 1]/g;
  }

  #print STDERR "END U: $ret\n";
  
  return $ret;
}


# --- XML parsing --- #


# Compresses node into a word and returns it.

sub xst_xml_get_word
{
  my $tree = $_[0];
  
  shift @$tree;		# Skip attributes.
  
  while (@$tree)
  {
    if ($$tree[0] == 0)
    {
      my $retval;

      ($retval = $$tree[1]) =~ tr/ \n\r\t\f//d;
      #$retval = &xst_xml_entities_to_plain (\$retval);
      #Lets see if this works.. Chema
      $retval = &xst_xml_unquote ($retval);
      print STDERR "*$retval*\n";
      return ($retval);
    }
    
    shift @$tree;
    shift @$tree;
  }
    
  return ("");
}


# Compresses node into a size and returns it.

sub xst_xml_get_size
{
  my $tree = $_[0];

  shift @$tree;  # Skip attributes.

  while (@$tree)
  {
    if ($$tree[0] == 0)
    {
      my $retval;

      ($retval = $$tree[1]) =~ tr/ \n\r\t\f//d;
      #$retval = &xst_xml_entities_to_plain (\$retval);
      #lets see if this works.. Chema
      $retval = &xst_xml_unquote ($retval);
      if ($retval =~ /Mb$/)
      {
        $retval =~ tr/ Mb//d; 
        $retval *= 1024;
      }
      return ($retval);
    }

    shift @$tree;
    shift @$tree;
  }

  return ("");
}


# Replaces misc. whitespace with spaces and returns text.

sub xst_xml_get_text
{
  my $tree = $_[0];
  
  shift @$tree;  # Skip attributes.
  
  while (@$tree)
  {
    if ($$tree[0] == 0)
    {
      ($retval = $$tree[1]) =~ tr/\n\r\t\f/    /;
      #$retval = &xst_xml_entities_to_plain (\$retval);
      #lets see if this works.. Chema
      $retval = &xst_xml_unquote ($retval);
      print STDERR "*$retval*\n";
      return ($retval);
    }
    
    shift @$tree;
    shift @$tree;
  }
}

1;
